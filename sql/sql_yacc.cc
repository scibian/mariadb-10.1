
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy"

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_show.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)                  \
  if (!(A))                                      \
  {                                              \
    my_parse_error(thd, ER_SYNTAX_ERROR);        \
    MYSQL_YYABORT;                               \
  }

#define my_yyabort_error(A)                      \
  do { my_error A; MYSQL_YYABORT; } while(0)

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

static void my_parse_error_intern(THD *thd, const char *err_text,
                                  const char *yytext)
{
  Lex_input_stream *lip= &thd->m_parser_state->m_lip;
  if (!yytext)
  {
    if (!(yytext= lip->get_tok_start()))
      yytext= "";
  }
  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext),
                    thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER_THD(thd, ER_PARSE_ERROR), MYF(0),
                  err_text, err.ptr(), lip->yylineno);
}


static void my_parse_error(THD *thd, uint err_number, const char *yytext=0)
{
  return my_parse_error_intern(thd, ER_THD(thd, err_number), yytext);
}

void LEX::parse_error()
{
  my_parse_error(thd, ER_SYNTAX_ERROR);
}


/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER_THD(thd, ER_SYNTAX_ERROR);
  my_parse_error_intern(thd, s, 0);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


static sp_head *make_sp_head(THD *thd, sp_name *name,
                             enum stored_procedure_type type)
{
  LEX *lex= thd->lex;
  sp_head *sp;

  /* Order is important here: new - reset - init */
  if ((sp= new sp_head()))
  {
    sp->reset_thd_mem_root(thd);
    sp->init(lex);
    sp->m_type= type;
    if (name)
      sp->init_sp_name(thd, name);
    sp->m_chistics= &lex->sp_chistics;
    lex->sphead= sp;
  }
  bzero(&lex->sp_chistics, sizeof(lex->sp_chistics));
  return sp;
}

static bool maybe_start_compound_statement(THD *thd)
{
  if (!thd->lex->sphead)
  {
    if (!make_sp_head(thd, NULL, TYPE_ENUM_PROCEDURE))
      return 1;

    Lex->sp_chistics.suid= SP_IS_NOT_SUID;
    Lex->sphead->set_body_start(thd, YYLIP->get_cpp_ptr());
  }
  return 0;
}

static bool push_sp_label(THD *thd, LEX_STRING label)
{
  sp_pcontext *ctx= thd->lex->spcont;
  sp_label *lab= ctx->find_label(label);

  if (lab)
  {
    my_error(ER_SP_LABEL_REDEFINE, MYF(0), label.str);
    return 1;
  }
  else
  {
    lab= thd->lex->spcont->push_label(thd, label,
        thd->lex->sphead->instructions());
    lab->type= sp_label::ITERATION;
  }
  return 0;
}

static bool push_sp_empty_label(THD *thd)
{
  if (maybe_start_compound_statement(thd))
    return 1;
  /* Unlabeled controls get an empty label. */
  thd->lex->spcont->push_label(thd, empty_lex_str,
      thd->lex->sphead->instructions());
  return 0;
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new (lex->thd->mem_root)
    sp_instr_set_case_expr(sp->instructions(), parsing_ctx, case_expr_id, expr,
                           lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;
  THD *thd= lex->thd;

  if (simple)
  {
    var= new (thd->mem_root)
         Item_case_expr(thd, ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new (thd->mem_root) Item_func_eq(thd, var, when);
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i= new (lex->thd->mem_root) sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to after END CASE
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var != NULL)
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new (thd->mem_root)
         set_var(thd, var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var, thd->mem_root);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null(thd);
    if (it == NULL)
      return TRUE;
  }

  sp_set= new (thd->mem_root)
         sp_instr_set(lex->sphead->instructions(), lex->spcont,
                                   spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new (thd->mem_root) Item_null(thd);

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(thd, lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new (thd->mem_root)
        sp_instr_set_trigger_field(lex->sphead->instructions(),
                                                 lex->spcont, trg_fld, val,
         lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(thd, name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(thd, left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(thd, left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(thd, left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select
          statement uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
                       is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->order_list.first && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "ORDER BY");
    return TRUE;
  }

  if (lex->current_select->explicit_limit && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "LIMIT");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  /*
  if (sel->set_braces(1))
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  */
  DBUG_ASSERT(sel->braces);
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  return FALSE;
}

static bool add_create_index_prepare(LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->option_list= NULL;
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    if (no_lookahead)
        lex->sphead->m_tmp_query= lip->get_ptr();
    else
        lex->sphead->m_tmp_query= lip->get_tok_end();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}


static void add_key_to_list(LEX *lex, LEX_STRING *field_name,
                            enum Key::Keytype type, bool check_exists)
{
  Key *key;
  MEM_ROOT *mem_root= lex->thd->mem_root;
  key= new (mem_root)
        Key(type, null_lex_str, HA_KEY_ALG_UNDEF, false,
             DDL_options(check_exists ?
                         DDL_options::OPT_IF_NOT_EXISTS :
                         DDL_options::OPT_NONE));
  key->columns.push_back(new (mem_root) Key_part_spec(*field_name, 0),
                         mem_root);
  lex->alter_info.key_list.push_back(key, mem_root);
}

void LEX::init_last_field(Create_field *field, const char *field_name,
         CHARSET_INFO *cs)
{
  last_field= field;

  field->field_name= field_name;

  /* reset LEX fields that are used in Create_field::set_and_check() */
  length= 0;
  dec= 0;
  charset= cs;
}

void LEX::set_last_field_type(enum enum_field_types field_type)
{
  last_field->sql_type= field_type;
  last_field->create_if_not_exists= check_exists;
  last_field->charset= charset;

  if (length)
  {
    int err;
    last_field->length= my_strtoll10(length, NULL, &err);
    if (err)
      last_field->length= ~0ULL; // safety
  }
  else
    last_field->length= 0;

  last_field->decimals= dec ? (uint)atoi(dec) : 0;
}

bool LEX::set_bincmp(CHARSET_INFO *cs, bool bin)
{
  /*
     if charset is NULL - we're parsing a field declaration.
     we cannot call find_bin_collation for a field here, because actual
     field charset is determined in get_sql_field_charset() much later.
     so we only set a flag.
  */
  if (!charset)
  {
    charset= cs;
    last_field->flags|= bin ? BINCMP_FLAG : 0;
    return false;
  }

  charset= bin ? find_bin_collation(cs ? cs : charset)
               :                    cs ? cs : charset;
  return charset == NULL;
}

#define bincmp_collation(X,Y)           \
  do                                    \
  {                                     \
     if (Lex->set_bincmp(X,Y))          \
       MYSQL_YYABORT;                   \
  } while(0)



/* Line 189 of yacc.c  */
#line 1006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADMIN_SYM = 262,
     ADDDATE_SYM = 263,
     AFTER_SYM = 264,
     AGAINST = 265,
     AGGREGATE_SYM = 266,
     ALGORITHM_SYM = 267,
     ALL = 268,
     ALTER = 269,
     ALWAYS_SYM = 270,
     ANALYZE_SYM = 271,
     AND_AND_SYM = 272,
     AND_SYM = 273,
     ANY_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     ATOMIC_SYM = 280,
     AUTHORS_SYM = 281,
     AUTOEXTEND_SIZE_SYM = 282,
     AUTO_INC = 283,
     AUTO_SYM = 284,
     AVG_ROW_LENGTH = 285,
     AVG_SYM = 286,
     BACKUP_SYM = 287,
     BEFORE_SYM = 288,
     BEGIN_SYM = 289,
     BETWEEN_SYM = 290,
     BIGINT = 291,
     BINARY = 292,
     BINLOG_SYM = 293,
     BIN_NUM = 294,
     BIT_AND = 295,
     BIT_OR = 296,
     BIT_SYM = 297,
     BIT_XOR = 298,
     BLOB_SYM = 299,
     BLOCK_SYM = 300,
     BOOLEAN_SYM = 301,
     BOOL_SYM = 302,
     BOTH = 303,
     BTREE_SYM = 304,
     BY = 305,
     BYTE_SYM = 306,
     CACHE_SYM = 307,
     CALL_SYM = 308,
     CASCADE = 309,
     CASCADED = 310,
     CASE_SYM = 311,
     CAST_SYM = 312,
     CATALOG_NAME_SYM = 313,
     CHAIN_SYM = 314,
     CHANGE = 315,
     CHANGED = 316,
     CHARSET = 317,
     CHAR_SYM = 318,
     CHECKPOINT_SYM = 319,
     CHECKSUM_SYM = 320,
     CHECK_SYM = 321,
     CIPHER_SYM = 322,
     CLASS_ORIGIN_SYM = 323,
     CLIENT_SYM = 324,
     CLOSE_SYM = 325,
     COALESCE = 326,
     CODE_SYM = 327,
     COLLATE_SYM = 328,
     COLLATION_SYM = 329,
     COLUMNS = 330,
     COLUMN_ADD_SYM = 331,
     COLUMN_CHECK_SYM = 332,
     COLUMN_CREATE_SYM = 333,
     COLUMN_DELETE_SYM = 334,
     COLUMN_GET_SYM = 335,
     COLUMN_SYM = 336,
     COLUMN_NAME_SYM = 337,
     COMMENT_SYM = 338,
     COMMITTED_SYM = 339,
     COMMIT_SYM = 340,
     COMPACT_SYM = 341,
     COMPLETION_SYM = 342,
     COMPRESSED_SYM = 343,
     CONCURRENT = 344,
     CONDITION_SYM = 345,
     CONNECTION_SYM = 346,
     CONSISTENT_SYM = 347,
     CONSTRAINT = 348,
     CONSTRAINT_CATALOG_SYM = 349,
     CONSTRAINT_NAME_SYM = 350,
     CONSTRAINT_SCHEMA_SYM = 351,
     CONTAINS_SYM = 352,
     CONTEXT_SYM = 353,
     CONTINUE_SYM = 354,
     CONTRIBUTORS_SYM = 355,
     CONVERT_SYM = 356,
     COUNT_SYM = 357,
     CPU_SYM = 358,
     CREATE = 359,
     CROSS = 360,
     CUBE_SYM = 361,
     CURDATE = 362,
     CURRENT_SYM = 363,
     CURRENT_USER = 364,
     CURRENT_ROLE = 365,
     CURRENT_POS_SYM = 366,
     CURSOR_SYM = 367,
     CURSOR_NAME_SYM = 368,
     CURTIME = 369,
     DATABASE = 370,
     DATABASES = 371,
     DATAFILE_SYM = 372,
     DATA_SYM = 373,
     DATETIME = 374,
     DATE_ADD_INTERVAL = 375,
     DATE_SUB_INTERVAL = 376,
     DATE_SYM = 377,
     DAY_HOUR_SYM = 378,
     DAY_MICROSECOND_SYM = 379,
     DAY_MINUTE_SYM = 380,
     DAY_SECOND_SYM = 381,
     DAY_SYM = 382,
     DEALLOCATE_SYM = 383,
     DECIMAL_NUM = 384,
     DECIMAL_SYM = 385,
     DECLARE_SYM = 386,
     DEFAULT = 387,
     DEFINER_SYM = 388,
     DELAYED_SYM = 389,
     DELAY_KEY_WRITE_SYM = 390,
     DELETE_SYM = 391,
     DESC = 392,
     DESCRIBE = 393,
     DES_KEY_FILE = 394,
     DETERMINISTIC_SYM = 395,
     DIAGNOSTICS_SYM = 396,
     DIRECTORY_SYM = 397,
     DISABLE_SYM = 398,
     DISCARD = 399,
     DISK_SYM = 400,
     DISTINCT = 401,
     DIV_SYM = 402,
     DOUBLE_SYM = 403,
     DO_DOMAIN_IDS_SYM = 404,
     DO_SYM = 405,
     DROP = 406,
     DUAL_SYM = 407,
     DUMPFILE = 408,
     DUPLICATE_SYM = 409,
     DYNAMIC_SYM = 410,
     EACH_SYM = 411,
     ELSE = 412,
     ELSEIF_SYM = 413,
     ENABLE_SYM = 414,
     ENCLOSED = 415,
     END = 416,
     ENDS_SYM = 417,
     END_OF_INPUT = 418,
     ENGINES_SYM = 419,
     ENGINE_SYM = 420,
     ENUM = 421,
     EQUAL_SYM = 422,
     ERROR_SYM = 423,
     ERRORS = 424,
     ESCAPED = 425,
     ESCAPE_SYM = 426,
     EVENTS_SYM = 427,
     EVENT_SYM = 428,
     EVERY_SYM = 429,
     EXCHANGE_SYM = 430,
     EXAMINED_SYM = 431,
     EXECUTE_SYM = 432,
     EXISTS = 433,
     EXIT_SYM = 434,
     EXPANSION_SYM = 435,
     EXPORT_SYM = 436,
     EXTENDED_SYM = 437,
     EXTENT_SIZE_SYM = 438,
     EXTRACT_SYM = 439,
     FALSE_SYM = 440,
     FAST_SYM = 441,
     FAULTS_SYM = 442,
     FETCH_SYM = 443,
     FILE_SYM = 444,
     FIRST_SYM = 445,
     FIXED_SYM = 446,
     FLOAT_NUM = 447,
     FLOAT_SYM = 448,
     FLUSH_SYM = 449,
     FORCE_SYM = 450,
     FOREIGN = 451,
     FOR_SYM = 452,
     FORMAT_SYM = 453,
     FOUND_SYM = 454,
     FROM = 455,
     FULL = 456,
     FULLTEXT_SYM = 457,
     FUNCTION_SYM = 458,
     GE = 459,
     GENERAL = 460,
     GENERATED_SYM = 461,
     GEOMETRYCOLLECTION = 462,
     GEOMETRY_SYM = 463,
     GET_FORMAT = 464,
     GET_SYM = 465,
     GLOBAL_SYM = 466,
     GRANT = 467,
     GRANTS = 468,
     GROUP_SYM = 469,
     GROUP_CONCAT_SYM = 470,
     HANDLER_SYM = 471,
     HARD_SYM = 472,
     HASH_SYM = 473,
     HAVING = 474,
     HELP_SYM = 475,
     HEX_NUM = 476,
     HEX_STRING = 477,
     HIGH_PRIORITY = 478,
     HOST_SYM = 479,
     HOSTS_SYM = 480,
     HOUR_MICROSECOND_SYM = 481,
     HOUR_MINUTE_SYM = 482,
     HOUR_SECOND_SYM = 483,
     HOUR_SYM = 484,
     ID_SYM = 485,
     IDENT = 486,
     IDENTIFIED_SYM = 487,
     IDENT_QUOTED = 488,
     IF_SYM = 489,
     IGNORE_DOMAIN_IDS_SYM = 490,
     IGNORE_SYM = 491,
     IGNORE_SERVER_IDS_SYM = 492,
     IMPORT = 493,
     INDEXES = 494,
     INDEX_SYM = 495,
     INFILE = 496,
     INITIAL_SIZE_SYM = 497,
     INNER_SYM = 498,
     INOUT_SYM = 499,
     INSENSITIVE_SYM = 500,
     INSERT = 501,
     INSERT_METHOD = 502,
     INSTALL_SYM = 503,
     INTERVAL_SYM = 504,
     INTO = 505,
     INT_SYM = 506,
     INVOKER_SYM = 507,
     IN_SYM = 508,
     IO_SYM = 509,
     IPC_SYM = 510,
     IS = 511,
     ISOLATION = 512,
     ISSUER_SYM = 513,
     ITERATE_SYM = 514,
     JOIN_SYM = 515,
     KEYS = 516,
     KEY_BLOCK_SIZE = 517,
     KEY_SYM = 518,
     KILL_SYM = 519,
     LANGUAGE_SYM = 520,
     LAST_SYM = 521,
     LAST_VALUE = 522,
     LE = 523,
     LEADING = 524,
     LEAVES = 525,
     LEAVE_SYM = 526,
     LEFT = 527,
     LESS_SYM = 528,
     LEVEL_SYM = 529,
     LEX_HOSTNAME = 530,
     LIKE = 531,
     LIMIT = 532,
     LINEAR_SYM = 533,
     LINES = 534,
     LINESTRING = 535,
     LIST_SYM = 536,
     LOAD = 537,
     LOCAL_SYM = 538,
     LOCATOR_SYM = 539,
     LOCKS_SYM = 540,
     LOCK_SYM = 541,
     LOGFILE_SYM = 542,
     LOGS_SYM = 543,
     LONGBLOB = 544,
     LONGTEXT = 545,
     LONG_NUM = 546,
     LONG_SYM = 547,
     LOOP_SYM = 548,
     LOW_PRIORITY = 549,
     MASTER_CONNECT_RETRY_SYM = 550,
     MASTER_GTID_POS_SYM = 551,
     MASTER_HOST_SYM = 552,
     MASTER_LOG_FILE_SYM = 553,
     MASTER_LOG_POS_SYM = 554,
     MASTER_PASSWORD_SYM = 555,
     MASTER_PORT_SYM = 556,
     MASTER_SERVER_ID_SYM = 557,
     MASTER_SSL_CAPATH_SYM = 558,
     MASTER_SSL_CA_SYM = 559,
     MASTER_SSL_CERT_SYM = 560,
     MASTER_SSL_CIPHER_SYM = 561,
     MASTER_SSL_CRL_SYM = 562,
     MASTER_SSL_CRLPATH_SYM = 563,
     MASTER_SSL_KEY_SYM = 564,
     MASTER_SSL_SYM = 565,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 566,
     MASTER_SYM = 567,
     MASTER_USER_SYM = 568,
     MASTER_USE_GTID_SYM = 569,
     MASTER_HEARTBEAT_PERIOD_SYM = 570,
     MATCH = 571,
     MAX_CONNECTIONS_PER_HOUR = 572,
     MAX_QUERIES_PER_HOUR = 573,
     MAX_ROWS = 574,
     MAX_SIZE_SYM = 575,
     MAX_SYM = 576,
     MAX_UPDATES_PER_HOUR = 577,
     MAX_STATEMENT_TIME_SYM = 578,
     MAX_USER_CONNECTIONS_SYM = 579,
     MAX_VALUE_SYM = 580,
     MEDIUMBLOB = 581,
     MEDIUMINT = 582,
     MEDIUMTEXT = 583,
     MEDIUM_SYM = 584,
     MEMORY_SYM = 585,
     MERGE_SYM = 586,
     MESSAGE_TEXT_SYM = 587,
     MICROSECOND_SYM = 588,
     MIGRATE_SYM = 589,
     MINUTE_MICROSECOND_SYM = 590,
     MINUTE_SECOND_SYM = 591,
     MINUTE_SYM = 592,
     MIN_ROWS = 593,
     MIN_SYM = 594,
     MODE_SYM = 595,
     MODIFIES_SYM = 596,
     MODIFY_SYM = 597,
     MOD_SYM = 598,
     MONTH_SYM = 599,
     MULTILINESTRING = 600,
     MULTIPOINT = 601,
     MULTIPOLYGON = 602,
     MUTEX_SYM = 603,
     MYSQL_SYM = 604,
     MYSQL_ERRNO_SYM = 605,
     NAMES_SYM = 606,
     NAME_SYM = 607,
     NATIONAL_SYM = 608,
     NATURAL = 609,
     NCHAR_STRING = 610,
     NCHAR_SYM = 611,
     NE = 612,
     NEG = 613,
     NEW_SYM = 614,
     NEXT_SYM = 615,
     NODEGROUP_SYM = 616,
     NONE_SYM = 617,
     NOT2_SYM = 618,
     NOT_SYM = 619,
     NOW_SYM = 620,
     NO_SYM = 621,
     NO_WAIT_SYM = 622,
     NO_WRITE_TO_BINLOG = 623,
     NULL_SYM = 624,
     NUM = 625,
     NUMBER_SYM = 626,
     NUMERIC_SYM = 627,
     NVARCHAR_SYM = 628,
     OFFSET_SYM = 629,
     OLD_PASSWORD_SYM = 630,
     ON = 631,
     ONE_SYM = 632,
     ONLY_SYM = 633,
     ONLINE_SYM = 634,
     OPEN_SYM = 635,
     OPTIMIZE = 636,
     OPTIONS_SYM = 637,
     OPTION = 638,
     OPTIONALLY = 639,
     OR2_SYM = 640,
     ORDER_SYM = 641,
     OR_OR_SYM = 642,
     OR_SYM = 643,
     OUTER = 644,
     OUTFILE = 645,
     OUT_SYM = 646,
     OWNER_SYM = 647,
     PACK_KEYS_SYM = 648,
     PAGE_SYM = 649,
     PAGE_CHECKSUM_SYM = 650,
     PARAM_MARKER = 651,
     PARSER_SYM = 652,
     PARSE_VCOL_EXPR_SYM = 653,
     PARTIAL = 654,
     PARTITION_SYM = 655,
     PARTITIONS_SYM = 656,
     PARTITIONING_SYM = 657,
     PASSWORD_SYM = 658,
     PERSISTENT_SYM = 659,
     PHASE_SYM = 660,
     PLUGINS_SYM = 661,
     PLUGIN_SYM = 662,
     POINT_SYM = 663,
     POLYGON = 664,
     PORT_SYM = 665,
     POSITION_SYM = 666,
     PRECISION = 667,
     PREPARE_SYM = 668,
     PRESERVE_SYM = 669,
     PREV_SYM = 670,
     PRIMARY_SYM = 671,
     PRIVILEGES = 672,
     PROCEDURE_SYM = 673,
     PROCESS = 674,
     PROCESSLIST_SYM = 675,
     PROFILE_SYM = 676,
     PROFILES_SYM = 677,
     PROXY_SYM = 678,
     PURGE = 679,
     QUARTER_SYM = 680,
     QUERY_SYM = 681,
     QUICK = 682,
     RANGE_SYM = 683,
     READS_SYM = 684,
     READ_ONLY_SYM = 685,
     READ_SYM = 686,
     READ_WRITE_SYM = 687,
     REAL = 688,
     REBUILD_SYM = 689,
     RECOVER_SYM = 690,
     REDOFILE_SYM = 691,
     REDO_BUFFER_SIZE_SYM = 692,
     REDUNDANT_SYM = 693,
     REFERENCES = 694,
     REGEXP = 695,
     RELAY = 696,
     RELAYLOG_SYM = 697,
     RELAY_LOG_FILE_SYM = 698,
     RELAY_LOG_POS_SYM = 699,
     RELAY_THREAD = 700,
     RELEASE_SYM = 701,
     RELOAD = 702,
     REMOVE_SYM = 703,
     RENAME = 704,
     REORGANIZE_SYM = 705,
     REPAIR = 706,
     REPEATABLE_SYM = 707,
     REPEAT_SYM = 708,
     REPLACE = 709,
     REPLICATION = 710,
     REQUIRE_SYM = 711,
     RESET_SYM = 712,
     RESIGNAL_SYM = 713,
     RESOURCES = 714,
     RESTORE_SYM = 715,
     RESTRICT = 716,
     RESUME_SYM = 717,
     RETURNED_SQLSTATE_SYM = 718,
     RETURNING_SYM = 719,
     RETURNS_SYM = 720,
     RETURN_SYM = 721,
     REVERSE_SYM = 722,
     REVOKE = 723,
     RIGHT = 724,
     ROLE_SYM = 725,
     ROLLBACK_SYM = 726,
     ROLLUP_SYM = 727,
     ROUTINE_SYM = 728,
     ROWS_SYM = 729,
     ROW_FORMAT_SYM = 730,
     ROW_SYM = 731,
     ROW_COUNT_SYM = 732,
     RTREE_SYM = 733,
     SAVEPOINT_SYM = 734,
     SCHEDULE_SYM = 735,
     SCHEMA_NAME_SYM = 736,
     SECOND_MICROSECOND_SYM = 737,
     SECOND_SYM = 738,
     SECURITY_SYM = 739,
     SELECT_SYM = 740,
     SENSITIVE_SYM = 741,
     SEPARATOR_SYM = 742,
     SERIALIZABLE_SYM = 743,
     SERIAL_SYM = 744,
     SESSION_SYM = 745,
     SERVER_SYM = 746,
     SERVER_OPTIONS = 747,
     SET = 748,
     SET_VAR = 749,
     SHARE_SYM = 750,
     SHIFT_LEFT = 751,
     SHIFT_RIGHT = 752,
     SHOW = 753,
     SHUTDOWN = 754,
     SIGNAL_SYM = 755,
     SIGNED_SYM = 756,
     SIMPLE_SYM = 757,
     SLAVE = 758,
     SLAVES = 759,
     SLAVE_POS_SYM = 760,
     SLOW = 761,
     SMALLINT = 762,
     SNAPSHOT_SYM = 763,
     SOCKET_SYM = 764,
     SOFT_SYM = 765,
     SONAME_SYM = 766,
     SOUNDS_SYM = 767,
     SOURCE_SYM = 768,
     SPATIAL_SYM = 769,
     SPECIFIC_SYM = 770,
     SQLEXCEPTION_SYM = 771,
     SQLSTATE_SYM = 772,
     SQLWARNING_SYM = 773,
     SQL_BIG_RESULT = 774,
     SQL_BUFFER_RESULT = 775,
     SQL_CACHE_SYM = 776,
     SQL_CALC_FOUND_ROWS = 777,
     SQL_NO_CACHE_SYM = 778,
     SQL_SMALL_RESULT = 779,
     SQL_SYM = 780,
     SQL_THREAD = 781,
     REF_SYSTEM_ID_SYM = 782,
     SSL_SYM = 783,
     STARTING = 784,
     STARTS_SYM = 785,
     START_SYM = 786,
     STATEMENT_SYM = 787,
     STATS_AUTO_RECALC_SYM = 788,
     STATS_PERSISTENT_SYM = 789,
     STATS_SAMPLE_PAGES_SYM = 790,
     STATUS_SYM = 791,
     STDDEV_SAMP_SYM = 792,
     STD_SYM = 793,
     STOP_SYM = 794,
     STORAGE_SYM = 795,
     STRAIGHT_JOIN = 796,
     STRING_SYM = 797,
     SUBCLASS_ORIGIN_SYM = 798,
     SUBDATE_SYM = 799,
     SUBJECT_SYM = 800,
     SUBPARTITIONS_SYM = 801,
     SUBPARTITION_SYM = 802,
     SUBSTRING = 803,
     SUM_SYM = 804,
     SUPER_SYM = 805,
     SUSPEND_SYM = 806,
     SWAPS_SYM = 807,
     SWITCHES_SYM = 808,
     SYSDATE = 809,
     TABLES = 810,
     TABLESPACE = 811,
     TABLE_REF_PRIORITY = 812,
     TABLE_SYM = 813,
     TABLE_CHECKSUM_SYM = 814,
     TABLE_NAME_SYM = 815,
     TEMPORARY = 816,
     TEMPTABLE_SYM = 817,
     TERMINATED = 818,
     TEXT_STRING = 819,
     TEXT_SYM = 820,
     THAN_SYM = 821,
     THEN_SYM = 822,
     TIMESTAMP = 823,
     TIMESTAMP_ADD = 824,
     TIMESTAMP_DIFF = 825,
     TIME_SYM = 826,
     TINYBLOB = 827,
     TINYINT = 828,
     TINYTEXT = 829,
     TO_SYM = 830,
     TRAILING = 831,
     TRANSACTION_SYM = 832,
     TRANSACTIONAL_SYM = 833,
     TRIGGERS_SYM = 834,
     TRIGGER_SYM = 835,
     TRIM = 836,
     TRUE_SYM = 837,
     TRUNCATE_SYM = 838,
     TYPES_SYM = 839,
     TYPE_SYM = 840,
     UDF_RETURNS_SYM = 841,
     ULONGLONG_NUM = 842,
     UNCOMMITTED_SYM = 843,
     UNDEFINED_SYM = 844,
     UNDERSCORE_CHARSET = 845,
     UNDOFILE_SYM = 846,
     UNDO_BUFFER_SIZE_SYM = 847,
     UNDO_SYM = 848,
     UNICODE_SYM = 849,
     UNINSTALL_SYM = 850,
     UNION_SYM = 851,
     UNIQUE_SYM = 852,
     UNKNOWN_SYM = 853,
     UNLOCK_SYM = 854,
     UNSIGNED = 855,
     UNTIL_SYM = 856,
     UPDATE_SYM = 857,
     UPGRADE_SYM = 858,
     USAGE = 859,
     USER = 860,
     USE_FRM = 861,
     USE_SYM = 862,
     USING = 863,
     UTC_DATE_SYM = 864,
     UTC_TIMESTAMP_SYM = 865,
     UTC_TIME_SYM = 866,
     VALUES = 867,
     VALUE_SYM = 868,
     VARBINARY = 869,
     VARCHAR = 870,
     VARIABLES = 871,
     VARIANCE_SYM = 872,
     VARYING = 873,
     VAR_SAMP_SYM = 874,
     VIA_SYM = 875,
     VIEW_SYM = 876,
     VIRTUAL_SYM = 877,
     WAIT_SYM = 878,
     WARNINGS = 879,
     WEEK_SYM = 880,
     WEIGHT_STRING_SYM = 881,
     WHEN_SYM = 882,
     WHERE = 883,
     WHILE_SYM = 884,
     WITH = 885,
     WITH_CUBE_SYM = 886,
     WITH_ROLLUP_SYM = 887,
     WORK_SYM = 888,
     WRAPPER_SYM = 889,
     WRITE_SYM = 890,
     X509_SYM = 891,
     XA_SYM = 892,
     XML_SYM = 893,
     XOR = 894,
     YEAR_MONTH_SYM = 895,
     YEAR_SYM = 896,
     ZEROFILL = 897,
     IMPOSSIBLE_ACTION = 898
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define ATOMIC_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CURDATE 362
#define CURRENT_SYM 363
#define CURRENT_USER 364
#define CURRENT_ROLE 365
#define CURRENT_POS_SYM 366
#define CURSOR_SYM 367
#define CURSOR_NAME_SYM 368
#define CURTIME 369
#define DATABASE 370
#define DATABASES 371
#define DATAFILE_SYM 372
#define DATA_SYM 373
#define DATETIME 374
#define DATE_ADD_INTERVAL 375
#define DATE_SUB_INTERVAL 376
#define DATE_SYM 377
#define DAY_HOUR_SYM 378
#define DAY_MICROSECOND_SYM 379
#define DAY_MINUTE_SYM 380
#define DAY_SECOND_SYM 381
#define DAY_SYM 382
#define DEALLOCATE_SYM 383
#define DECIMAL_NUM 384
#define DECIMAL_SYM 385
#define DECLARE_SYM 386
#define DEFAULT 387
#define DEFINER_SYM 388
#define DELAYED_SYM 389
#define DELAY_KEY_WRITE_SYM 390
#define DELETE_SYM 391
#define DESC 392
#define DESCRIBE 393
#define DES_KEY_FILE 394
#define DETERMINISTIC_SYM 395
#define DIAGNOSTICS_SYM 396
#define DIRECTORY_SYM 397
#define DISABLE_SYM 398
#define DISCARD 399
#define DISK_SYM 400
#define DISTINCT 401
#define DIV_SYM 402
#define DOUBLE_SYM 403
#define DO_DOMAIN_IDS_SYM 404
#define DO_SYM 405
#define DROP 406
#define DUAL_SYM 407
#define DUMPFILE 408
#define DUPLICATE_SYM 409
#define DYNAMIC_SYM 410
#define EACH_SYM 411
#define ELSE 412
#define ELSEIF_SYM 413
#define ENABLE_SYM 414
#define ENCLOSED 415
#define END 416
#define ENDS_SYM 417
#define END_OF_INPUT 418
#define ENGINES_SYM 419
#define ENGINE_SYM 420
#define ENUM 421
#define EQUAL_SYM 422
#define ERROR_SYM 423
#define ERRORS 424
#define ESCAPED 425
#define ESCAPE_SYM 426
#define EVENTS_SYM 427
#define EVENT_SYM 428
#define EVERY_SYM 429
#define EXCHANGE_SYM 430
#define EXAMINED_SYM 431
#define EXECUTE_SYM 432
#define EXISTS 433
#define EXIT_SYM 434
#define EXPANSION_SYM 435
#define EXPORT_SYM 436
#define EXTENDED_SYM 437
#define EXTENT_SIZE_SYM 438
#define EXTRACT_SYM 439
#define FALSE_SYM 440
#define FAST_SYM 441
#define FAULTS_SYM 442
#define FETCH_SYM 443
#define FILE_SYM 444
#define FIRST_SYM 445
#define FIXED_SYM 446
#define FLOAT_NUM 447
#define FLOAT_SYM 448
#define FLUSH_SYM 449
#define FORCE_SYM 450
#define FOREIGN 451
#define FOR_SYM 452
#define FORMAT_SYM 453
#define FOUND_SYM 454
#define FROM 455
#define FULL 456
#define FULLTEXT_SYM 457
#define FUNCTION_SYM 458
#define GE 459
#define GENERAL 460
#define GENERATED_SYM 461
#define GEOMETRYCOLLECTION 462
#define GEOMETRY_SYM 463
#define GET_FORMAT 464
#define GET_SYM 465
#define GLOBAL_SYM 466
#define GRANT 467
#define GRANTS 468
#define GROUP_SYM 469
#define GROUP_CONCAT_SYM 470
#define HANDLER_SYM 471
#define HARD_SYM 472
#define HASH_SYM 473
#define HAVING 474
#define HELP_SYM 475
#define HEX_NUM 476
#define HEX_STRING 477
#define HIGH_PRIORITY 478
#define HOST_SYM 479
#define HOSTS_SYM 480
#define HOUR_MICROSECOND_SYM 481
#define HOUR_MINUTE_SYM 482
#define HOUR_SECOND_SYM 483
#define HOUR_SYM 484
#define ID_SYM 485
#define IDENT 486
#define IDENTIFIED_SYM 487
#define IDENT_QUOTED 488
#define IF_SYM 489
#define IGNORE_DOMAIN_IDS_SYM 490
#define IGNORE_SYM 491
#define IGNORE_SERVER_IDS_SYM 492
#define IMPORT 493
#define INDEXES 494
#define INDEX_SYM 495
#define INFILE 496
#define INITIAL_SIZE_SYM 497
#define INNER_SYM 498
#define INOUT_SYM 499
#define INSENSITIVE_SYM 500
#define INSERT 501
#define INSERT_METHOD 502
#define INSTALL_SYM 503
#define INTERVAL_SYM 504
#define INTO 505
#define INT_SYM 506
#define INVOKER_SYM 507
#define IN_SYM 508
#define IO_SYM 509
#define IPC_SYM 510
#define IS 511
#define ISOLATION 512
#define ISSUER_SYM 513
#define ITERATE_SYM 514
#define JOIN_SYM 515
#define KEYS 516
#define KEY_BLOCK_SIZE 517
#define KEY_SYM 518
#define KILL_SYM 519
#define LANGUAGE_SYM 520
#define LAST_SYM 521
#define LAST_VALUE 522
#define LE 523
#define LEADING 524
#define LEAVES 525
#define LEAVE_SYM 526
#define LEFT 527
#define LESS_SYM 528
#define LEVEL_SYM 529
#define LEX_HOSTNAME 530
#define LIKE 531
#define LIMIT 532
#define LINEAR_SYM 533
#define LINES 534
#define LINESTRING 535
#define LIST_SYM 536
#define LOAD 537
#define LOCAL_SYM 538
#define LOCATOR_SYM 539
#define LOCKS_SYM 540
#define LOCK_SYM 541
#define LOGFILE_SYM 542
#define LOGS_SYM 543
#define LONGBLOB 544
#define LONGTEXT 545
#define LONG_NUM 546
#define LONG_SYM 547
#define LOOP_SYM 548
#define LOW_PRIORITY 549
#define MASTER_CONNECT_RETRY_SYM 550
#define MASTER_GTID_POS_SYM 551
#define MASTER_HOST_SYM 552
#define MASTER_LOG_FILE_SYM 553
#define MASTER_LOG_POS_SYM 554
#define MASTER_PASSWORD_SYM 555
#define MASTER_PORT_SYM 556
#define MASTER_SERVER_ID_SYM 557
#define MASTER_SSL_CAPATH_SYM 558
#define MASTER_SSL_CA_SYM 559
#define MASTER_SSL_CERT_SYM 560
#define MASTER_SSL_CIPHER_SYM 561
#define MASTER_SSL_CRL_SYM 562
#define MASTER_SSL_CRLPATH_SYM 563
#define MASTER_SSL_KEY_SYM 564
#define MASTER_SSL_SYM 565
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 566
#define MASTER_SYM 567
#define MASTER_USER_SYM 568
#define MASTER_USE_GTID_SYM 569
#define MASTER_HEARTBEAT_PERIOD_SYM 570
#define MATCH 571
#define MAX_CONNECTIONS_PER_HOUR 572
#define MAX_QUERIES_PER_HOUR 573
#define MAX_ROWS 574
#define MAX_SIZE_SYM 575
#define MAX_SYM 576
#define MAX_UPDATES_PER_HOUR 577
#define MAX_STATEMENT_TIME_SYM 578
#define MAX_USER_CONNECTIONS_SYM 579
#define MAX_VALUE_SYM 580
#define MEDIUMBLOB 581
#define MEDIUMINT 582
#define MEDIUMTEXT 583
#define MEDIUM_SYM 584
#define MEMORY_SYM 585
#define MERGE_SYM 586
#define MESSAGE_TEXT_SYM 587
#define MICROSECOND_SYM 588
#define MIGRATE_SYM 589
#define MINUTE_MICROSECOND_SYM 590
#define MINUTE_SECOND_SYM 591
#define MINUTE_SYM 592
#define MIN_ROWS 593
#define MIN_SYM 594
#define MODE_SYM 595
#define MODIFIES_SYM 596
#define MODIFY_SYM 597
#define MOD_SYM 598
#define MONTH_SYM 599
#define MULTILINESTRING 600
#define MULTIPOINT 601
#define MULTIPOLYGON 602
#define MUTEX_SYM 603
#define MYSQL_SYM 604
#define MYSQL_ERRNO_SYM 605
#define NAMES_SYM 606
#define NAME_SYM 607
#define NATIONAL_SYM 608
#define NATURAL 609
#define NCHAR_STRING 610
#define NCHAR_SYM 611
#define NE 612
#define NEG 613
#define NEW_SYM 614
#define NEXT_SYM 615
#define NODEGROUP_SYM 616
#define NONE_SYM 617
#define NOT2_SYM 618
#define NOT_SYM 619
#define NOW_SYM 620
#define NO_SYM 621
#define NO_WAIT_SYM 622
#define NO_WRITE_TO_BINLOG 623
#define NULL_SYM 624
#define NUM 625
#define NUMBER_SYM 626
#define NUMERIC_SYM 627
#define NVARCHAR_SYM 628
#define OFFSET_SYM 629
#define OLD_PASSWORD_SYM 630
#define ON 631
#define ONE_SYM 632
#define ONLY_SYM 633
#define ONLINE_SYM 634
#define OPEN_SYM 635
#define OPTIMIZE 636
#define OPTIONS_SYM 637
#define OPTION 638
#define OPTIONALLY 639
#define OR2_SYM 640
#define ORDER_SYM 641
#define OR_OR_SYM 642
#define OR_SYM 643
#define OUTER 644
#define OUTFILE 645
#define OUT_SYM 646
#define OWNER_SYM 647
#define PACK_KEYS_SYM 648
#define PAGE_SYM 649
#define PAGE_CHECKSUM_SYM 650
#define PARAM_MARKER 651
#define PARSER_SYM 652
#define PARSE_VCOL_EXPR_SYM 653
#define PARTIAL 654
#define PARTITION_SYM 655
#define PARTITIONS_SYM 656
#define PARTITIONING_SYM 657
#define PASSWORD_SYM 658
#define PERSISTENT_SYM 659
#define PHASE_SYM 660
#define PLUGINS_SYM 661
#define PLUGIN_SYM 662
#define POINT_SYM 663
#define POLYGON 664
#define PORT_SYM 665
#define POSITION_SYM 666
#define PRECISION 667
#define PREPARE_SYM 668
#define PRESERVE_SYM 669
#define PREV_SYM 670
#define PRIMARY_SYM 671
#define PRIVILEGES 672
#define PROCEDURE_SYM 673
#define PROCESS 674
#define PROCESSLIST_SYM 675
#define PROFILE_SYM 676
#define PROFILES_SYM 677
#define PROXY_SYM 678
#define PURGE 679
#define QUARTER_SYM 680
#define QUERY_SYM 681
#define QUICK 682
#define RANGE_SYM 683
#define READS_SYM 684
#define READ_ONLY_SYM 685
#define READ_SYM 686
#define READ_WRITE_SYM 687
#define REAL 688
#define REBUILD_SYM 689
#define RECOVER_SYM 690
#define REDOFILE_SYM 691
#define REDO_BUFFER_SIZE_SYM 692
#define REDUNDANT_SYM 693
#define REFERENCES 694
#define REGEXP 695
#define RELAY 696
#define RELAYLOG_SYM 697
#define RELAY_LOG_FILE_SYM 698
#define RELAY_LOG_POS_SYM 699
#define RELAY_THREAD 700
#define RELEASE_SYM 701
#define RELOAD 702
#define REMOVE_SYM 703
#define RENAME 704
#define REORGANIZE_SYM 705
#define REPAIR 706
#define REPEATABLE_SYM 707
#define REPEAT_SYM 708
#define REPLACE 709
#define REPLICATION 710
#define REQUIRE_SYM 711
#define RESET_SYM 712
#define RESIGNAL_SYM 713
#define RESOURCES 714
#define RESTORE_SYM 715
#define RESTRICT 716
#define RESUME_SYM 717
#define RETURNED_SQLSTATE_SYM 718
#define RETURNING_SYM 719
#define RETURNS_SYM 720
#define RETURN_SYM 721
#define REVERSE_SYM 722
#define REVOKE 723
#define RIGHT 724
#define ROLE_SYM 725
#define ROLLBACK_SYM 726
#define ROLLUP_SYM 727
#define ROUTINE_SYM 728
#define ROWS_SYM 729
#define ROW_FORMAT_SYM 730
#define ROW_SYM 731
#define ROW_COUNT_SYM 732
#define RTREE_SYM 733
#define SAVEPOINT_SYM 734
#define SCHEDULE_SYM 735
#define SCHEMA_NAME_SYM 736
#define SECOND_MICROSECOND_SYM 737
#define SECOND_SYM 738
#define SECURITY_SYM 739
#define SELECT_SYM 740
#define SENSITIVE_SYM 741
#define SEPARATOR_SYM 742
#define SERIALIZABLE_SYM 743
#define SERIAL_SYM 744
#define SESSION_SYM 745
#define SERVER_SYM 746
#define SERVER_OPTIONS 747
#define SET 748
#define SET_VAR 749
#define SHARE_SYM 750
#define SHIFT_LEFT 751
#define SHIFT_RIGHT 752
#define SHOW 753
#define SHUTDOWN 754
#define SIGNAL_SYM 755
#define SIGNED_SYM 756
#define SIMPLE_SYM 757
#define SLAVE 758
#define SLAVES 759
#define SLAVE_POS_SYM 760
#define SLOW 761
#define SMALLINT 762
#define SNAPSHOT_SYM 763
#define SOCKET_SYM 764
#define SOFT_SYM 765
#define SONAME_SYM 766
#define SOUNDS_SYM 767
#define SOURCE_SYM 768
#define SPATIAL_SYM 769
#define SPECIFIC_SYM 770
#define SQLEXCEPTION_SYM 771
#define SQLSTATE_SYM 772
#define SQLWARNING_SYM 773
#define SQL_BIG_RESULT 774
#define SQL_BUFFER_RESULT 775
#define SQL_CACHE_SYM 776
#define SQL_CALC_FOUND_ROWS 777
#define SQL_NO_CACHE_SYM 778
#define SQL_SMALL_RESULT 779
#define SQL_SYM 780
#define SQL_THREAD 781
#define REF_SYSTEM_ID_SYM 782
#define SSL_SYM 783
#define STARTING 784
#define STARTS_SYM 785
#define START_SYM 786
#define STATEMENT_SYM 787
#define STATS_AUTO_RECALC_SYM 788
#define STATS_PERSISTENT_SYM 789
#define STATS_SAMPLE_PAGES_SYM 790
#define STATUS_SYM 791
#define STDDEV_SAMP_SYM 792
#define STD_SYM 793
#define STOP_SYM 794
#define STORAGE_SYM 795
#define STRAIGHT_JOIN 796
#define STRING_SYM 797
#define SUBCLASS_ORIGIN_SYM 798
#define SUBDATE_SYM 799
#define SUBJECT_SYM 800
#define SUBPARTITIONS_SYM 801
#define SUBPARTITION_SYM 802
#define SUBSTRING 803
#define SUM_SYM 804
#define SUPER_SYM 805
#define SUSPEND_SYM 806
#define SWAPS_SYM 807
#define SWITCHES_SYM 808
#define SYSDATE 809
#define TABLES 810
#define TABLESPACE 811
#define TABLE_REF_PRIORITY 812
#define TABLE_SYM 813
#define TABLE_CHECKSUM_SYM 814
#define TABLE_NAME_SYM 815
#define TEMPORARY 816
#define TEMPTABLE_SYM 817
#define TERMINATED 818
#define TEXT_STRING 819
#define TEXT_SYM 820
#define THAN_SYM 821
#define THEN_SYM 822
#define TIMESTAMP 823
#define TIMESTAMP_ADD 824
#define TIMESTAMP_DIFF 825
#define TIME_SYM 826
#define TINYBLOB 827
#define TINYINT 828
#define TINYTEXT 829
#define TO_SYM 830
#define TRAILING 831
#define TRANSACTION_SYM 832
#define TRANSACTIONAL_SYM 833
#define TRIGGERS_SYM 834
#define TRIGGER_SYM 835
#define TRIM 836
#define TRUE_SYM 837
#define TRUNCATE_SYM 838
#define TYPES_SYM 839
#define TYPE_SYM 840
#define UDF_RETURNS_SYM 841
#define ULONGLONG_NUM 842
#define UNCOMMITTED_SYM 843
#define UNDEFINED_SYM 844
#define UNDERSCORE_CHARSET 845
#define UNDOFILE_SYM 846
#define UNDO_BUFFER_SIZE_SYM 847
#define UNDO_SYM 848
#define UNICODE_SYM 849
#define UNINSTALL_SYM 850
#define UNION_SYM 851
#define UNIQUE_SYM 852
#define UNKNOWN_SYM 853
#define UNLOCK_SYM 854
#define UNSIGNED 855
#define UNTIL_SYM 856
#define UPDATE_SYM 857
#define UPGRADE_SYM 858
#define USAGE 859
#define USER 860
#define USE_FRM 861
#define USE_SYM 862
#define USING 863
#define UTC_DATE_SYM 864
#define UTC_TIMESTAMP_SYM 865
#define UTC_TIME_SYM 866
#define VALUES 867
#define VALUE_SYM 868
#define VARBINARY 869
#define VARCHAR 870
#define VARIABLES 871
#define VARIANCE_SYM 872
#define VARYING 873
#define VAR_SAMP_SYM 874
#define VIA_SYM 875
#define VIEW_SYM 876
#define VIRTUAL_SYM 877
#define WAIT_SYM 878
#define WARNINGS 879
#define WEEK_SYM 880
#define WEIGHT_STRING_SYM 881
#define WHEN_SYM 882
#define WHERE 883
#define WHILE_SYM 884
#define WITH 885
#define WITH_CUBE_SYM 886
#define WITH_ROLLUP_SYM 887
#define WORK_SYM 888
#define WRAPPER_SYM 889
#define WRITE_SYM 890
#define X509_SYM 891
#define XA_SYM 892
#define XML_SYM 893
#define XOR 894
#define YEAR_MONTH_SYM 895
#define YEAR_SYM 896
#define ZEROFILL 897
#define IMPOSSIBLE_ACTION 898




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 948 "/home/buildbot/git/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;

  /* structs */
  LEX_STRING lex_str;
  LEX_SYMBOL symbol;
  struct sys_var_with_base variable;
  struct { int vars, conds, hndlrs, curs; } spblock;

  /* pointers */
  CHARSET_INFO *charset;
  Condition_information_item *cond_info_item;
  DYNCALL_CREATE_DEF *dyncol_def;
  Diagnostics_information *diag_info;
  Item *item;
  Item_num *item_num;
  Item_param *item_param;
  Key_part_spec *key_part;
  LEX *lex;
  LEX_STRING *lex_str_ptr;
  LEX_USER *lex_user;
  List<Condition_information_item> *cond_info_list;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  List<Item> *item_list;
  List<Statement_information_item> *stmt_info_list;
  List<String> *string_list;
  Statement_information_item *stmt_info_item;
  String *string;
  TABLE_LIST *table_list;
  Table_ident *table;
  char *simple_string;
  chooser_compare_func_creator boolfunc2creator;
  class my_var *myvar;
  class sp_condition_value *spcondvalue;
  class sp_head *sphead;
  class sp_label *splabel;
  class sp_name *spname;
  class sp_variable *spvar;
  handlerton *db_type;
  st_select_lex *select_lex;
  struct p_elem_val *p_elem_value;
  udf_func *udf;

  /* enums */
  enum Cast_target cast_type;
  enum Condition_information_item::Name cond_info_item_name;
  enum enum_diag_condition_item_name diag_condition_item_name;
  enum Diagnostics_information::Which_area diag_area;
  enum Field::geometry_type geom_type;
  enum Foreign_key::fk_option m_fk_option;
  enum Item_udftype udf_type;
  enum Key::Keytype key_type;
  enum Statement_information_item::Name stmt_info_item_name;
  enum enum_field_types field_type;
  enum enum_filetype filetype;
  enum enum_tx_isolation tx_isolation;
  enum enum_var_type var_type;
  enum enum_yes_no_unknown m_yes_no_unk;
  enum ha_choice choice;
  enum ha_key_alg key_alg;
  enum ha_rkey_function ha_rkey_mode;
  enum index_hint_type index_hint;
  enum interval_type interval, interval_time_st;
  enum row_type row_type;
  enum sp_variable::enum_mode spvar_mode;
  enum thr_lock_type lock_type;
  enum enum_mysql_timestamp_type date_time_type;
  DDL_options_st object_ddl_options;



/* Line 214 of yacc.c  */
#line 2403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 1021 "/home/buildbot/git/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  635
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   66200

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  666
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1028
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2854
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4891

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   898

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   659,     2,     2,     2,   653,   648,     2,
     656,   657,   651,   650,   658,   649,   664,   652,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   665,   662,
     646,   644,   645,     2,   663,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   654,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   660,   647,   661,   655,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   133,   135,   139,   141,
     143,   148,   150,   153,   154,   159,   160,   163,   167,   169,
     172,   173,   177,   178,   185,   187,   191,   195,   199,   203,
     207,   211,   215,   219,   223,   227,   231,   235,   239,   243,
     247,   251,   257,   263,   269,   271,   272,   274,   278,   280,
     281,   283,   287,   289,   290,   292,   296,   298,   302,   306,
     310,   314,   318,   322,   326,   327,   329,   331,   332,   340,
     341,   356,   357,   371,   372,   386,   387,   394,   395,   399,
     405,   412,   417,   421,   422,   426,   427,   440,   442,   446,
     449,   452,   455,   458,   461,   464,   467,   468,   482,   483,
     490,   493,   494,   496,   500,   502,   503,   506,   507,   510,
     511,   513,   518,   519,   522,   523,   526,   527,   531,   533,
     534,   537,   538,   541,   544,   547,   550,   553,   557,   561,
     563,   565,   568,   572,   576,   577,   582,   583,   587,   588,
     590,   594,   596,   597,   599,   603,   605,   606,   610,   611,
     613,   617,   619,   622,   623,   625,   627,   629,   630,   634,
     637,   641,   642,   646,   647,   653,   659,   660,   668,   674,
     675,   678,   680,   682,   684,   688,   690,   692,   694,   698,
     699,   701,   703,   705,   707,   710,   712,   716,   718,   720,
     721,   723,   724,   727,   731,   737,   739,   741,   743,   745,
     747,   749,   751,   753,   755,   757,   759,   761,   763,   765,
     767,   771,   776,   777,   779,   781,   785,   787,   791,   795,
     797,   800,   802,   804,   806,   808,   812,   816,   818,   820,
     822,   824,   826,   828,   830,   832,   834,   836,   838,   840,
     842,   844,   848,   849,   852,   854,   856,   858,   860,   862,
     864,   866,   868,   870,   872,   874,   876,   878,   880,   882,
     883,   889,   890,   893,   894,   898,   901,   904,   907,   908,
     915,   918,   919,   922,   924,   926,   930,   931,   932,   933,
     941,   942,   945,   948,   949,   956,   957,   958,   963,   965,
     967,   970,   972,   975,   976,   977,   984,   985,   986,   993,
     994,   997,   998,  1000,  1001,  1008,  1009,  1013,  1014,  1020,
    1021,  1026,  1030,  1031,  1038,  1039,  1046,  1048,  1049,  1050,
    1057,  1058,  1065,  1066,  1073,  1074,  1079,  1080,  1085,  1086,
    1091,  1093,  1095,  1097,  1099,  1101,  1104,  1109,  1115,  1116,
    1121,  1126,  1131,  1135,  1139,  1142,  1145,  1146,  1149,  1151,
    1154,  1158,  1160,  1162,  1164,  1166,  1168,  1171,  1175,  1177,
    1179,  1181,  1183,  1185,  1187,  1189,  1191,  1193,  1195,  1198,
    1202,  1204,  1206,  1208,  1210,  1212,  1214,  1216,  1219,  1223,
    1225,  1227,  1229,  1231,  1233,  1235,  1237,  1239,  1241,  1244,
    1248,  1250,  1252,  1254,  1257,  1260,  1263,  1265,  1267,  1269,
    1271,  1274,  1278,  1282,  1286,  1290,  1294,  1298,  1302,  1306,
    1311,  1312,  1314,  1316,  1318,  1320,  1322,  1323,  1331,  1335,
    1336,  1342,  1344,  1347,  1352,  1353,  1354,  1360,  1361,  1369,
    1371,  1372,  1374,  1375,  1380,  1381,  1382,  1386,  1392,  1399,
    1400,  1405,  1408,  1411,  1414,  1417,  1418,  1420,  1421,  1425,
    1426,  1428,  1430,  1434,  1436,  1441,  1447,  1453,  1454,  1457,
    1458,  1459,  1467,  1468,  1479,  1481,  1485,  1487,  1489,  1490,
    1493,  1494,  1498,  1500,  1504,  1505,  1512,  1514,  1515,  1516,
    1522,  1523,  1528,  1530,  1532,  1534,  1538,  1540,  1544,  1545,
    1546,  1552,  1554,  1558,  1560,  1562,  1563,  1567,  1569,  1573,
    1574,  1579,  1581,  1582,  1584,  1587,  1589,  1593,  1598,  1602,
    1606,  1610,  1614,  1619,  1624,  1628,  1629,  1630,  1637,  1638,
    1640,  1641,  1643,  1645,  1648,  1650,  1652,  1653,  1657,  1658,
    1662,  1664,  1668,  1669,  1671,  1673,  1676,  1678,  1681,  1685,
    1689,  1693,  1697,  1701,  1705,  1709,  1713,  1717,  1721,  1725,
    1729,  1733,  1737,  1741,  1745,  1749,  1753,  1757,  1761,  1765,
    1766,  1773,  1775,  1777,  1781,  1786,  1791,  1794,  1797,  1800,
    1804,  1808,  1812,  1816,  1820,  1824,  1828,  1833,  1838,  1840,
    1842,  1844,  1846,  1848,  1850,  1852,  1854,  1856,  1858,  1860,
    1862,  1864,  1866,  1868,  1870,  1872,  1874,  1878,  1880,  1882,
    1885,  1888,  1889,  1899,  1900,  1911,  1912,  1922,  1923,  1933,
    1934,  1945,  1946,  1958,  1959,  1970,  1973,  1974,  1976,  1981,
    1982,  1984,  1987,  1988,  1989,  1995,  1997,  2005,  2006,  2009,
    2010,  2012,  2014,  2015,  2017,  2020,  2022,  2024,  2027,  2030,
    2035,  2039,  2043,  2047,  2051,  2053,  2056,  2058,  2060,  2064,
    2067,  2071,  2074,  2077,  2079,  2083,  2087,  2090,  2094,  2096,
    2099,  2102,  2105,  2107,  2110,  2114,  2116,  2118,  2121,  2125,
    2128,  2132,  2135,  2138,  2142,  2146,  2150,  2156,  2162,  2165,
    2167,  2169,  2171,  2173,  2175,  2177,  2179,  2181,  2183,  2185,
    2187,  2190,  2193,  2195,  2198,  2200,  2203,  2207,  2210,  2212,
    2214,  2216,  2218,  2220,  2222,  2224,  2227,  2228,  2232,  2233,
    2235,  2237,  2243,  2244,  2246,  2249,  2251,  2253,  2255,  2257,
    2261,  2265,  2269,  2273,  2274,  2276,  2277,  2279,  2280,  2282,
    2285,  2287,  2289,  2292,  2295,  2300,  2302,  2306,  2309,  2311,
    2314,  2317,  2320,  2324,  2328,  2332,  2336,  2339,  2342,  2344,
    2347,  2349,  2351,  2353,  2355,  2357,  2358,  2361,  2363,  2365,
    2367,  2369,  2371,  2372,  2375,  2377,  2379,  2380,  2382,  2385,
    2387,  2389,  2390,  2392,  2395,  2397,  2400,  2401,  2403,  2404,
    2409,  2411,  2413,  2415,  2416,  2418,  2421,  2423,  2425,  2428,
    2430,  2434,  2438,  2440,  2442,  2443,  2446,  2447,  2449,  2455,
    2456,  2460,  2464,  2466,  2467,  2470,  2473,  2476,  2477,  2481,
    2485,  2492,  2499,  2501,  2503,  2506,  2509,  2512,  2515,  2518,
    2520,  2522,  2523,  2525,  2527,  2529,  2531,  2532,  2534,  2536,
    2538,  2539,  2541,  2542,  2544,  2545,  2547,  2549,  2552,  2554,
    2557,  2559,  2562,  2563,  2566,  2567,  2570,  2573,  2576,  2579,
    2583,  2586,  2590,  2594,  2598,  2602,  2604,  2606,  2608,  2610,
    2614,  2616,  2618,  2620,  2625,  2628,  2630,  2635,  2636,  2638,
    2639,  2642,  2644,  2648,  2649,  2650,  2658,  2659,  2665,  2673,
    2674,  2680,  2681,  2687,  2688,  2694,  2695,  2700,  2701,  2713,
    2717,  2722,  2726,  2730,  2731,  2740,  2741,  2745,  2747,  2752,
    2753,  2757,  2758,  2761,  2762,  2764,  2765,  2768,  2771,  2774,
    2777,  2779,  2781,  2783,  2788,  2793,  2794,  2801,  2806,  2807,
    2813,  2814,  2821,  2826,  2830,  2832,  2840,  2843,  2845,  2847,
    2848,  2855,  2856,  2860,  2863,  2864,  2870,  2871,  2872,  2879,
    2881,  2885,  2887,  2889,  2893,  2897,  2901,  2904,  2909,  2916,
    2922,  2928,  2934,  2938,  2943,  2946,  2949,  2956,  2962,  2966,
    2972,  2974,  2976,  2978,  2980,  2982,  2983,  2985,  2987,  2990,
    2993,  2997,  3001,  3005,  3009,  3010,  3012,  3013,  3015,  3016,
    3019,  3020,  3022,  3025,  3027,  3029,  3031,  3032,  3034,  3036,
    3037,  3040,  3042,  3043,  3045,  3047,  3049,  3050,  3057,  3058,
    3064,  3069,  3074,  3078,  3079,  3081,  3083,  3087,  3091,  3094,
    3097,  3098,  3101,  3103,  3107,  3108,  3110,  3112,  3113,  3116,
    3121,  3123,  3127,  3128,  3134,  3135,  3137,  3139,  3143,  3144,
    3149,  3150,  3155,  3156,  3158,  3160,  3163,  3165,  3167,  3169,
    3170,  3173,  3174,  3180,  3182,  3186,  3189,  3190,  3194,  3196,
    3201,  3203,  3204,  3209,  3211,  3212,  3217,  3218,  3220,  3224,
    3225,  3227,  3231,  3233,  3235,  3238,  3242,  3243,  3248,  3249,
    3253,  3254,  3256,  3258,  3261,  3263,  3265,  3267,  3269,  3271,
    3274,  3275,  3278,  3279,  3285,  3286,  3288,  3290,  3291,  3296,
    3301,  3305,  3311,  3313,  3317,  3321,  3322,  3329,  3331,  3333,
    3335,  3339,  3342,  3346,  3348,  3350,  3351,  3358,  3360,  3362,
    3364,  3368,  3372,  3377,  3378,  3385,  3386,  3389,  3390,  3395,
    3396,  3399,  3401,  3404,  3409,  3410,  3414,  3418,  3419,  3424,
    3428,  3429,  3433,  3438,  3442,  3454,  3455,  3459,  3468,  3471,
    3472,  3474,  3476,  3478,  3479,  3481,  3484,  3486,  3488,  3490,
    3492,  3493,  3496,  3501,  3505,  3507,  3509,  3513,  3518,  3519,
    3520,  3521,  3522,  3525,  3528,  3530,  3532,  3533,  3536,  3540,
    3541,  3544,  3548,  3549,  3552,  3556,  3560,  3564,  3567,  3571,
    3576,  3580,  3585,  3589,  3594,  3596,  3600,  3605,  3609,  3613,
    3620,  3622,  3628,  3635,  3641,  3649,  3656,  3665,  3671,  3678,
    3683,  3688,  3694,  3698,  3703,  3705,  3709,  3713,  3717,  3721,
    3725,  3729,  3735,  3741,  3745,  3749,  3753,  3757,  3761,  3765,
    3767,  3769,  3771,  3773,  3775,  3777,  3779,  3781,  3783,  3785,
    3787,  3789,  3791,  3793,  3795,  3797,  3799,  3800,  3803,  3805,
    3808,  3810,  3812,  3814,  3817,  3818,  3822,  3824,  3826,  3829,
    3832,  3837,  3839,  3843,  3845,  3847,  3849,  3851,  3853,  3857,
    3859,  3861,  3863,  3865,  3869,  3872,  3875,  3878,  3881,  3885,
    3889,  3895,  3902,  3907,  3912,  3920,  3923,  3930,  3936,  3943,
    3950,  3955,  3960,  3966,  3971,  3978,  3981,  3984,  3989,  3994,
    3999,  4010,  4017,  4026,  4033,  4038,  4043,  4050,  4055,  4060,
    4065,  4072,  4077,  4085,  4093,  4101,  4108,  4115,  4122,  4129,
    4133,  4138,  4145,  4154,  4157,  4160,  4169,  4178,  4185,  4192,
    4195,  4202,  4209,  4218,  4227,  4234,  4243,  4250,  4253,  4262,
    4271,  4274,  4277,  4280,  4287,  4294,  4299,  4304,  4313,  4318,
    4323,  4328,  4333,  4337,  4346,  4353,  4362,  4367,  4372,  4379,
    4384,  4389,  4394,  4401,  4410,  4415,  4419,  4426,  4431,  4438,
    4444,  4453,  4461,  4472,  4474,  4481,  4486,  4491,  4496,  4501,
    4506,  4513,  4518,  4519,  4525,  4532,  4535,  4539,  4540,  4545,
    4546,  4550,  4551,  4553,  4555,  4559,  4564,  4569,  4575,  4580,
    4585,  4590,  4596,  4601,  4602,  4603,  4611,  4616,  4622,  4627,
    4633,  4638,  4643,  4648,  4653,  4658,  4664,  4665,  4674,  4675,
    4679,  4683,  4685,  4690,  4691,  4693,  4694,  4697,  4698,  4699,
    4704,  4709,  4712,  4713,  4717,  4720,  4721,  4726,  4729,  4731,
    4733,  4736,  4738,  4741,  4743,  4746,  4749,  4752,  4753,  4757,
    4758,  4760,  4762,  4766,  4768,  4772,  4774,  4778,  4779,  4781,
    4782,  4785,  4790,  4796,  4798,  4800,  4802,  4804,  4809,  4811,
    4815,  4819,  4820,  4827,  4828,  4837,  4842,  4843,  4852,  4853,
    4864,  4871,  4872,  4881,  4882,  4893,  4900,  4902,  4905,  4907,
    4909,  4912,  4913,  4915,  4921,  4922,  4928,  4932,  4938,  4941,
    4942,  4948,  4950,  4951,  4955,  4956,  4960,  4961,  4962,  4968,
    4969,  4971,  4972,  4974,  4975,  4978,  4982,  4986,  4988,  4990,
    4991,  4999,  5000,  5008,  5010,  5013,  5014,  5015,  5018,  5019,
    5022,  5023,  5025,  5027,  5029,  5031,  5035,  5037,  5041,  5043,
    5045,  5047,  5049,  5051,  5053,  5055,  5057,  5059,  5061,  5063,
    5065,  5067,  5069,  5071,  5073,  5075,  5077,  5079,  5081,  5083,
    5085,  5087,  5089,  5091,  5092,  5094,  5096,  5097,  5100,  5101,
    5103,  5104,  5105,  5109,  5110,  5111,  5115,  5118,  5119,  5120,
    5125,  5130,  5133,  5134,  5136,  5138,  5142,  5146,  5148,  5151,
    5152,  5154,  5155,  5160,  5165,  5168,  5169,  5171,  5173,  5174,
    5176,  5178,  5181,  5187,  5192,  5194,  5198,  5202,  5204,  5206,
    5208,  5210,  5212,  5214,  5215,  5218,  5222,  5227,  5229,  5232,
    5235,  5237,  5239,  5241,  5243,  5245,  5247,  5249,  5251,  5253,
    5255,  5257,  5259,  5261,  5263,  5265,  5267,  5269,  5271,  5273,
    5275,  5277,  5279,  5281,  5283,  5285,  5287,  5288,  5289,  5296,
    5297,  5299,  5303,  5305,  5309,  5310,  5313,  5317,  5319,  5321,
    5324,  5326,  5327,  5329,  5330,  5334,  5335,  5336,  5344,  5347,
    5349,  5350,  5354,  5355,  5363,  5364,  5372,  5377,  5384,  5389,
    5394,  5400,  5406,  5407,  5414,  5419,  5424,  5430,  5437,  5442,
    5444,  5448,  5450,  5453,  5455,  5459,  5461,  5462,  5465,  5466,
    5469,  5470,  5472,  5473,  5474,  5483,  5484,  5485,  5492,  5493,
    5495,  5497,  5499,  5501,  5503,  5506,  5508,  5510,  5512,  5516,
    5521,  5522,  5526,  5530,  5532,  5535,  5538,  5539,  5543,  5544,
    5550,  5554,  5556,  5560,  5562,  5566,  5568,  5570,  5571,  5573,
    5574,  5579,  5580,  5582,  5586,  5588,  5590,  5592,  5593,  5594,
    5601,  5602,  5603,  5615,  5619,  5621,  5625,  5629,  5631,  5635,
    5636,  5638,  5639,  5644,  5645,  5646,  5656,  5657,  5663,  5664,
    5671,  5672,  5675,  5677,  5681,  5684,  5689,  5690,  5693,  5694,
    5697,  5699,  5701,  5703,  5704,  5709,  5710,  5712,  5713,  5715,
    5717,  5721,  5723,  5725,  5728,  5731,  5734,  5736,  5738,  5740,
    5742,  5743,  5747,  5748,  5752,  5755,  5760,  5765,  5769,  5774,
    5779,  5781,  5785,  5789,  5793,  5797,  5804,  5807,  5810,  5811,
    5818,  5819,  5827,  5833,  5836,  5838,  5840,  5842,  5848,  5854,
    5857,  5860,  5862,  5867,  5871,  5874,  5878,  5881,  5884,  5886,
    5891,  5896,  5900,  5904,  5907,  5911,  5914,  5918,  5922,  5926,
    5930,  5934,  5938,  5942,  5946,  5950,  5954,  5958,  5960,  5962,
    5964,  5966,  5968,  5969,  5971,  5972,  5975,  5976,  5978,  5980,
    5982,  5983,  5986,  5987,  5990,  5991,  5995,  5999,  6000,  6005,
    6006,  6011,  6013,  6015,  6017,  6019,  6021,  6023,  6025,  6029,
    6031,  6033,  6035,  6036,  6040,  6041,  6043,  6045,  6046,  6051,
    6052,  6057,  6059,  6060,  6062,  6067,  6068,  6072,  6076,  6078,
    6081,  6084,  6087,  6090,  6093,  6097,  6100,  6102,  6104,  6106,
    6108,  6111,  6113,  6115,  6117,  6120,  6121,  6123,  6124,  6128,
    6129,  6133,  6137,  6139,  6140,  6145,  6146,  6150,  6153,  6154,
    6156,  6157,  6160,  6161,  6165,  6169,  6172,  6175,  6176,  6182,
    6183,  6185,  6187,  6188,  6190,  6192,  6195,  6197,  6200,  6202,
    6205,  6206,  6207,  6208,  6209,  6232,  6234,  6236,  6237,  6239,
    6240,  6242,  6244,  6245,  6247,  6249,  6250,  6253,  6256,  6258,
    6262,  6267,  6271,  6275,  6276,  6279,  6282,  6284,  6288,  6292,
    6293,  6298,  6299,  6303,  6305,  6307,  6308,  6312,  6315,  6319,
    6321,  6323,  6326,  6327,  6330,  6334,  6336,  6342,  6344,  6346,
    6349,  6352,  6354,  6356,  6358,  6360,  6362,  6364,  6366,  6369,
    6372,  6374,  6376,  6378,  6380,  6382,  6384,  6386,  6388,  6390,
    6393,  6395,  6397,  6399,  6401,  6403,  6406,  6409,  6412,  6414,
    6416,  6420,  6426,  6428,  6430,  6432,  6434,  6436,  6440,  6445,
    6451,  6453,  6459,  6463,  6466,  6468,  6472,  6475,  6478,  6483,
    6485,  6487,  6489,  6491,  6493,  6495,  6497,  6499,  6501,  6503,
    6505,  6507,  6509,  6511,  6515,  6518,  6520,  6522,  6524,  6526,
    6528,  6530,  6532,  6534,  6536,  6538,  6540,  6542,  6544,  6546,
    6548,  6550,  6552,  6554,  6556,  6558,  6560,  6562,  6564,  6566,
    6568,  6570,  6572,  6574,  6576,  6578,  6580,  6582,  6584,  6586,
    6588,  6590,  6592,  6594,  6596,  6598,  6600,  6602,  6604,  6606,
    6608,  6610,  6612,  6614,  6616,  6618,  6620,  6622,  6624,  6626,
    6628,  6630,  6632,  6634,  6636,  6638,  6640,  6642,  6644,  6646,
    6648,  6650,  6652,  6654,  6656,  6658,  6660,  6662,  6664,  6666,
    6668,  6670,  6672,  6674,  6676,  6678,  6680,  6682,  6684,  6686,
    6688,  6690,  6692,  6694,  6696,  6698,  6700,  6702,  6704,  6706,
    6708,  6710,  6712,  6714,  6716,  6718,  6720,  6722,  6724,  6726,
    6728,  6730,  6732,  6734,  6736,  6738,  6740,  6742,  6744,  6746,
    6748,  6750,  6752,  6754,  6756,  6758,  6760,  6762,  6764,  6766,
    6768,  6770,  6772,  6774,  6776,  6778,  6780,  6782,  6784,  6786,
    6788,  6790,  6792,  6794,  6796,  6798,  6800,  6802,  6804,  6806,
    6808,  6810,  6812,  6814,  6816,  6818,  6820,  6822,  6824,  6826,
    6828,  6830,  6832,  6834,  6836,  6838,  6840,  6842,  6844,  6846,
    6848,  6850,  6852,  6854,  6856,  6858,  6860,  6862,  6864,  6866,
    6868,  6870,  6872,  6874,  6876,  6878,  6880,  6882,  6884,  6886,
    6888,  6890,  6892,  6894,  6896,  6898,  6900,  6902,  6904,  6906,
    6908,  6910,  6912,  6914,  6916,  6918,  6920,  6922,  6924,  6926,
    6928,  6930,  6932,  6934,  6936,  6938,  6940,  6942,  6944,  6946,
    6948,  6950,  6952,  6954,  6956,  6958,  6960,  6962,  6964,  6966,
    6968,  6970,  6972,  6974,  6976,  6978,  6980,  6982,  6984,  6986,
    6988,  6990,  6992,  6994,  6996,  6998,  7000,  7002,  7004,  7006,
    7008,  7010,  7012,  7014,  7016,  7018,  7020,  7022,  7024,  7026,
    7028,  7030,  7032,  7034,  7036,  7038,  7040,  7042,  7044,  7046,
    7048,  7050,  7052,  7054,  7056,  7058,  7060,  7062,  7064,  7066,
    7068,  7070,  7072,  7074,  7076,  7078,  7080,  7082,  7084,  7086,
    7088,  7090,  7092,  7094,  7096,  7098,  7100,  7102,  7104,  7106,
    7108,  7110,  7112,  7114,  7116,  7118,  7120,  7122,  7124,  7126,
    7128,  7130,  7132,  7134,  7136,  7138,  7140,  7142,  7144,  7146,
    7148,  7150,  7152,  7154,  7156,  7158,  7160,  7162,  7164,  7166,
    7168,  7170,  7172,  7174,  7176,  7178,  7180,  7182,  7184,  7186,
    7188,  7190,  7192,  7194,  7196,  7198,  7200,  7202,  7204,  7206,
    7208,  7210,  7212,  7214,  7216,  7218,  7220,  7222,  7224,  7226,
    7228,  7230,  7232,  7234,  7236,  7238,  7240,  7242,  7244,  7246,
    7248,  7250,  7252,  7254,  7256,  7258,  7260,  7262,  7264,  7265,
    7269,  7270,  7271,  7279,  7281,  7285,  7286,  7290,  7291,  7295,
    7296,  7300,  7301,  7305,  7308,  7309,  7312,  7313,  7316,  7317,
    7322,  7323,  7327,  7329,  7331,  7333,  7335,  7336,  7338,  7340,
    7342,  7343,  7346,  7349,  7352,  7356,  7360,  7365,  7372,  7375,
    7379,  7383,  7387,  7393,  7396,  7400,  7402,  7406,  7410,  7412,
    7414,  7418,  7422,  7424,  7428,  7431,  7434,  7437,  7440,  7443,
    7445,  7447,  7451,  7453,  7458,  7463,  7465,  7467,  7469,  7471,
    7473,  7474,  7479,  7481,  7483,  7485,  7489,  7493,  7495,  7497,
    7500,  7503,  7506,  7507,  7511,  7516,  7520,  7521,  7529,  7531,
    7534,  7536,  7538,  7540,  7542,  7544,  7546,  7547,  7553,  7555,
    7557,  7559,  7561,  7563,  7567,  7574,  7581,  7588,  7596,  7602,
    7606,  7611,  7613,  7617,  7626,  7635,  7644,  7651,  7656,  7657,
    7661,  7662,  7666,  7668,  7672,  7675,  7677,  7679,  7680,  7682,
    7684,  7687,  7688,  7690,  7692,  7696,  7697,  7701,  7702,  7706,
    7707,  7711,  7712,  7716,  7718,  7720,  7722,  7724,  7726,  7728,
    7730,  7732,  7734,  7736,  7738,  7741,  7744,  7746,  7750,  7753,
    7756,  7759,  7762,  7765,  7768,  7771,  7774,  7776,  7778,  7781,
    7782,  7784,  7788,  7790,  7793,  7796,  7799,  7801,  7805,  7809,
    7811,  7813,  7817,  7819,  7823,  7825,  7829,  7831,  7833,  7835,
    7837,  7842,  7848,  7853,  7860,  7862,  7863,  7867,  7871,  7873,
    7875,  7876,  7879,  7882,  7885,  7888,  7889,  7892,  7893,  7897,
    7900,  7902,  7905,  7908,  7911,  7914,  7917,  7920,  7921,  7925,
    7927,  7928,  7930,  7931,  7933,  7934,  7938,  7941,  7942,  7944,
    7947,  7948,  7950,  7955,  7960,  7966,  7969,  7973,  7974,  7976,
    7977,  7982,  7984,  7986,  7987,  7989,  7990,  7993,  7996,  7998,
    7999,  8001,  8003,  8007,  8012,  8014,  8015,  8021,  8025,  8026,
    8027,  8028,  8030,  8033,  8035,  8037,  8039,  8041,  8043,  8045,
    8047,  8049,  8051,  8054,  8057,  8061,  8063,  8065,  8067,  8069,
    8071,  8073,  8075,  8077,  8079,  8081,  8083,  8085,  8087,  8088,
    8092,  8096,  8100,  8104,  8105,  8109,  8113,  8114,  8123,  8124,
    8128,  8130,  8134,  8135,  8139,  8142,  8147,  8148,  8152,  8157,
    8162,  8163,  8164,  8165,  8166,  8185,  8188,  8190,  8198,  8199,
    8200,  8201,  8202,  8203,  8219,  8220,  8221,  8222,  8223,  8236,
    8241,  8246,  8250,  8255,  8259,  8262,  8264,  8268,  8274,  8276,
    8278,  8279,  8281,  8283,  8284,  8287,  8288,  8289,  8293,  8294,
    8297,  8303,  8307,  8311,  8315
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     667,     0,    -1,   163,    -1,    -1,   670,   668,   662,   669,
      -1,   670,   163,    -1,    -1,   163,    -1,   671,    -1,  1619,
      -1,  1621,    -1,  1064,    -1,  1133,    -1,  1448,    -1,  1146,
      -1,   727,    -1,   683,    -1,  1149,    -1,  1122,    -1,  1627,
      -1,   696,    -1,   672,    -1,  1409,    -1,  1443,    -1,  1359,
      -1,  1361,    -1,   676,    -1,  1452,    -1,   763,    -1,  1585,
      -1,  1575,    -1,   681,    -1,  1373,    -1,  1691,    -1,  1693,
      -1,  1163,    -1,  1475,    -1,  1482,    -1,  1567,    -1,  1155,
      -1,   983,    -1,   891,    -1,  1170,    -1,   674,    -1,  1471,
      -1,  1630,    -1,  1158,    -1,  1127,    -1,  1376,    -1,  1463,
      -1,   762,    -1,  1582,    -1,  1628,    -1,  1629,    -1,  1182,
      -1,  1536,    -1,   755,    -1,  1429,    -1,  1480,    -1,  1109,
      -1,  1112,    -1,  1422,    -1,  1692,    -1,  1573,    -1,  1401,
      -1,  1481,    -1,  1683,    -1,   673,   413,  1528,    -1,   128,
      -1,   151,    -1,   413,  1528,   200,   675,    -1,  1525,    -1,
     663,  1530,    -1,    -1,   177,  1528,   677,   678,    -1,    -1,
     608,   679,    -1,   679,   658,   680,    -1,   680,    -1,   663,
    1530,    -1,    -1,   220,   682,  1530,    -1,    -1,    60,   312,
     694,   575,   684,   685,    -1,   686,    -1,   685,   658,   686,
      -1,   297,   644,  1525,    -1,   313,   644,  1525,    -1,   300,
     644,  1525,    -1,   301,   644,  1336,    -1,   295,   644,  1336,
      -1,   310,   644,  1336,    -1,   304,   644,  1525,    -1,   303,
     644,  1525,    -1,   305,   644,  1525,    -1,   306,   644,  1525,
      -1,   309,   644,  1525,    -1,   311,   644,  1336,    -1,   307,
     644,  1525,    -1,   308,   644,  1525,    -1,   315,   644,  1512,
      -1,   237,   644,   656,   687,   657,    -1,   149,   644,   656,
     689,   657,    -1,   235,   644,   656,   691,   657,    -1,   693,
      -1,    -1,   688,    -1,   687,   658,   688,    -1,  1336,    -1,
      -1,   690,    -1,   689,   658,   690,    -1,  1336,    -1,    -1,
     692,    -1,   691,   658,   692,    -1,  1336,    -1,   298,   644,
    1525,    -1,   299,   644,  1338,    -1,   443,   644,  1525,    -1,
     444,   644,  1336,    -1,   314,   644,   111,    -1,   314,   644,
     505,    -1,   314,   644,   366,    -1,    -1,   695,    -1,  1525,
      -1,    -1,   945,  1372,   558,   944,  1521,   697,   879,    -1,
      -1,   945,  1042,   240,   944,  1528,  1052,   376,  1521,   698,
     656,  1059,   657,  1045,  1096,    -1,    -1,   945,  1043,   240,
     944,  1528,   376,  1521,   699,   656,  1059,   657,  1046,  1096,
      -1,    -1,   945,  1044,   240,   944,  1528,   376,  1521,   700,
     656,  1059,   657,  1047,  1096,    -1,    -1,   945,   115,   944,
    1528,   701,   940,    -1,    -1,   945,   702,  1649,    -1,   945,
     605,   944,   720,  1606,    -1,   945,   470,   944,   720,  1589,
    1587,    -1,   104,   287,   214,   842,    -1,   104,   556,   839,
      -1,    -1,   945,   703,   704,    -1,    -1,   491,   944,  1530,
     705,   196,   118,   634,  1530,   382,   656,   706,   657,    -1,
     707,    -1,   706,   658,   707,    -1,   605,  1525,    -1,   224,
    1525,    -1,   115,  1525,    -1,   392,  1525,    -1,   403,  1525,
      -1,   509,  1525,    -1,   410,  1336,    -1,    -1,  1204,   173,
     944,   721,   709,   376,   480,   710,   715,   712,   717,   150,
     718,    -1,    -1,   174,  1210,  1306,   711,   713,   714,    -1,
      24,  1210,    -1,    -1,   159,    -1,   143,   376,   503,    -1,
     143,    -1,    -1,   530,  1210,    -1,    -1,   162,  1210,    -1,
      -1,   716,    -1,   376,    87,  1622,   414,    -1,    -1,    83,
    1525,    -1,    -1,   719,   776,    -1,    -1,  1528,   664,  1528,
      -1,  1528,    -1,    -1,   722,   724,    -1,    -1,   723,   725,
      -1,    83,  1525,    -1,   265,   525,    -1,   366,   525,    -1,
      97,   525,    -1,   429,   525,   118,    -1,   341,   525,   118,
      -1,   726,    -1,   724,    -1,  1622,   140,    -1,   525,   484,
     133,    -1,   525,   484,   252,    -1,    -1,    53,   721,   728,
     729,    -1,    -1,   656,   730,   657,    -1,    -1,   731,    -1,
     731,   658,  1210,    -1,  1210,    -1,    -1,   733,    -1,   733,
     658,   734,    -1,   734,    -1,    -1,  1528,   735,  1005,    -1,
      -1,   737,    -1,   737,   658,   738,    -1,   738,    -1,   739,
     734,    -1,    -1,   253,    -1,   391,    -1,   244,    -1,    -1,
     740,   776,   662,    -1,   776,   662,    -1,   741,   776,   662,
      -1,    -1,   742,   743,   662,    -1,    -1,   131,   774,   744,
    1005,   775,    -1,   131,  1528,    90,   197,   751,    -1,    -1,
     131,   748,   216,   197,   745,   749,   776,    -1,   131,  1528,
     112,   197,   746,    -1,    -1,   747,  1182,    -1,   179,    -1,
      99,    -1,   750,    -1,   749,   658,   750,    -1,   754,    -1,
    1336,    -1,   752,    -1,   517,   753,  1526,    -1,    -1,   613,
      -1,   751,    -1,  1528,    -1,   518,    -1,  1216,   199,    -1,
     516,    -1,   500,   756,   758,    -1,  1528,    -1,   752,    -1,
      -1,   756,    -1,    -1,   493,   759,    -1,   761,   644,   760,
      -1,   759,   658,   761,   644,   760,    -1,  1511,    -1,  1242,
      -1,  1517,    -1,    68,    -1,   543,    -1,    94,    -1,    96,
      -1,    95,    -1,    58,    -1,   481,    -1,   560,    -1,    82,
      -1,   113,    -1,   332,    -1,   350,    -1,   458,   757,   758,
      -1,   210,   764,   141,   765,    -1,    -1,   108,    -1,   766,
      -1,    90,   770,   771,    -1,   767,    -1,   766,   658,   767,
      -1,   768,   644,   769,    -1,  1528,    -1,   663,  1530,    -1,
     371,    -1,   477,    -1,   760,    -1,   772,    -1,   771,   658,
     772,    -1,   768,   644,   773,    -1,    68,    -1,   543,    -1,
      94,    -1,    96,    -1,    95,    -1,    58,    -1,   481,    -1,
     560,    -1,    82,    -1,   113,    -1,   332,    -1,   350,    -1,
     463,    -1,  1528,    -1,   774,   658,  1528,    -1,    -1,   132,
    1210,    -1,   780,    -1,   782,    -1,   812,    -1,   814,    -1,
     827,    -1,   784,    -1,   785,    -1,   786,    -1,   787,    -1,
     789,    -1,   777,    -1,   778,    -1,   797,    -1,   816,    -1,
     831,    -1,    -1,   234,   779,   792,   161,   234,    -1,    -1,
     781,   671,    -1,    -1,   466,   783,  1210,    -1,   271,  1529,
      -1,   259,  1529,    -1,   380,  1528,    -1,    -1,   188,   790,
    1528,   250,   788,   791,    -1,    70,  1528,    -1,    -1,   360,
     200,    -1,   200,    -1,  1528,    -1,   791,   658,  1528,    -1,
      -1,    -1,    -1,   793,  1210,   567,   794,   741,   795,   796,
      -1,    -1,   158,   792,    -1,   157,   741,    -1,    -1,    56,
     798,   799,   810,   161,    56,    -1,    -1,    -1,   800,  1210,
     801,   802,    -1,   803,    -1,   804,    -1,   802,   804,    -1,
     807,    -1,   803,   807,    -1,    -1,    -1,   627,   805,  1210,
     806,   567,   741,    -1,    -1,    -1,   627,   808,  1210,   809,
     567,   741,    -1,    -1,   157,   741,    -1,    -1,  1529,    -1,
      -1,  1529,   665,    34,   813,   818,   811,    -1,    -1,    34,
     815,   818,    -1,    -1,    34,  1216,    25,   817,   818,    -1,
      -1,   819,   742,   740,   161,    -1,   741,   161,   293,    -1,
      -1,  1210,   150,   822,   741,   161,   629,    -1,    -1,   741,
     601,   824,  1210,   161,   453,    -1,   811,    -1,    -1,    -1,
    1529,   665,   293,   828,   820,   825,    -1,    -1,  1529,   665,
     629,   829,   821,   825,    -1,    -1,  1529,   665,   453,   830,
     823,   825,    -1,    -1,   293,   832,   820,   826,    -1,    -1,
     629,   833,   821,   826,    -1,    -1,   453,   834,   823,   826,
      -1,    33,    -1,     9,    -1,   246,    -1,   602,    -1,   136,
      -1,   864,   866,    -1,   864,    60,   861,   845,    -1,   864,
       6,   861,   840,   849,    -1,    -1,   607,   287,   214,  1528,
      -1,   864,     6,   861,   852,    -1,   864,   151,   861,   852,
      -1,   865,   844,   855,    -1,   865,   844,   858,    -1,     6,
     862,    -1,     6,   863,    -1,    -1,   846,   847,    -1,   848,
      -1,   847,   848,    -1,   847,   658,   848,    -1,   867,    -1,
     868,    -1,   869,    -1,   850,    -1,   851,    -1,   850,   851,
      -1,   850,   658,   851,    -1,   867,    -1,   868,    -1,   869,
      -1,   870,    -1,   873,    -1,   875,    -1,   877,    -1,   874,
      -1,   853,    -1,   854,    -1,   853,   854,    -1,   853,   658,
     854,    -1,   867,    -1,   868,    -1,   869,    -1,   875,    -1,
     877,    -1,   856,    -1,   857,    -1,   856,   857,    -1,   856,
     658,   857,    -1,   867,    -1,   871,    -1,   872,    -1,   873,
      -1,   875,    -1,   877,    -1,   874,    -1,   859,    -1,   860,
      -1,   859,   860,    -1,   859,   658,   860,    -1,   867,    -1,
     875,    -1,   877,    -1,   117,  1525,    -1,   591,  1525,    -1,
     436,  1525,    -1,  1528,    -1,  1528,    -1,   430,    -1,   432,
      -1,   364,     4,    -1,   242,  1393,   878,    -1,    27,  1393,
     878,    -1,   320,  1393,   878,    -1,   183,  1393,   878,    -1,
     592,  1393,   878,    -1,   437,  1393,   878,    -1,   361,  1393,
    1337,    -1,    83,  1393,  1525,    -1,  1436,   165,  1393,   953,
      -1,    -1,   877,    -1,   623,    -1,   367,    -1,  1339,    -1,
    1524,    -1,    -1,   656,   958,   657,   880,   946,   886,   883,
      -1,   946,   886,   883,    -1,    -1,   656,   936,   657,   881,
    1634,    -1,   882,    -1,   276,  1521,    -1,   656,   276,  1521,
     657,    -1,    -1,    -1,  1490,   939,   936,   884,  1631,    -1,
      -1,  1490,   939,   656,   936,   657,   885,  1634,    -1,   887,
      -1,    -1,   888,    -1,    -1,   400,   890,   889,   893,    -1,
      -1,    -1,   400,   892,   893,    -1,    50,   894,   904,   905,
     912,    -1,   896,   263,   897,   656,   898,   657,    -1,    -1,
     896,   218,   895,   902,    -1,   428,   902,    -1,   428,   901,
      -1,   281,   902,    -1,   281,   901,    -1,    -1,   278,    -1,
      -1,    12,   644,  1337,    -1,    -1,   899,    -1,   900,    -1,
     899,   658,   900,    -1,  1528,    -1,    75,   656,   898,   657,
      -1,   656,  1204,   910,  1205,   657,    -1,   656,  1204,   910,
    1205,   657,    -1,    -1,   401,  1337,    -1,    -1,    -1,   547,
      50,   896,   218,   903,   906,   911,    -1,    -1,   547,    50,
     896,   263,   897,   656,   908,   657,   907,   911,    -1,   909,
      -1,   908,   658,   909,    -1,  1528,    -1,  1213,    -1,    -1,
     546,  1337,    -1,    -1,   656,   913,   657,    -1,   914,    -1,
     913,   658,   914,    -1,    -1,   400,   915,   916,   917,   933,
     928,    -1,  1528,    -1,    -1,    -1,   612,   273,   566,   918,
     920,    -1,    -1,   612,   253,   919,   921,    -1,   325,    -1,
     923,    -1,   923,    -1,   656,   922,   657,    -1,   923,    -1,
     922,   658,   923,    -1,    -1,    -1,   656,   924,   926,   925,
     657,    -1,   927,    -1,   926,   658,   927,    -1,   325,    -1,
    1213,    -1,    -1,   656,   929,   657,    -1,   930,    -1,   929,
     658,   930,    -1,    -1,   547,   931,   932,   933,    -1,  1530,
      -1,    -1,   934,    -1,   934,   935,    -1,   935,    -1,   556,
    1393,  1530,    -1,  1436,   165,  1393,   953,    -1,    91,  1393,
    1525,    -1,   361,  1393,  1337,    -1,   319,  1393,  1339,    -1,
     338,  1393,  1339,    -1,   118,   142,  1393,  1525,    -1,   240,
     142,  1393,  1525,    -1,    83,  1393,  1525,    -1,    -1,    -1,
     485,   937,  1197,  1201,   938,  1193,    -1,    -1,    20,    -1,
      -1,   941,    -1,   942,    -1,   941,   942,    -1,   952,    -1,
     951,    -1,    -1,   234,  1216,   178,    -1,    -1,   234,  1216,
     178,    -1,   104,    -1,   104,   388,   454,    -1,    -1,   948,
      -1,   949,    -1,   949,   947,    -1,   949,    -1,   949,   948,
      -1,   949,   658,   948,    -1,   165,  1393,   953,    -1,   319,
    1393,  1338,    -1,   338,  1393,  1338,    -1,    30,  1393,  1336,
      -1,   403,  1393,  1525,    -1,    83,  1393,  1525,    -1,    28,
    1393,  1338,    -1,   393,  1393,  1336,    -1,   393,  1393,   132,
      -1,   533,  1393,  1336,    -1,   533,  1393,   132,    -1,   534,
    1393,  1336,    -1,   534,  1393,   132,    -1,   535,  1393,  1336,
      -1,   535,  1393,   132,    -1,    65,  1393,  1336,    -1,   559,
    1393,  1336,    -1,   395,  1393,  1342,    -1,   135,  1393,  1336,
      -1,   475,  1393,   955,    -1,    -1,   596,  1393,   950,   656,
    1461,   657,    -1,   951,    -1,   952,    -1,   247,  1393,   956,
      -1,   118,   142,  1393,  1525,    -1,   240,   142,  1393,  1525,
      -1,   556,  1528,    -1,   540,   145,    -1,   540,   330,    -1,
      91,  1393,  1525,    -1,   262,  1393,  1336,    -1,   578,  1393,
    1342,    -1,  1524,  1392,  1525,    -1,  1524,  1392,  1528,    -1,
    1524,  1392,  1339,    -1,  1524,  1392,   132,    -1,  1016,  1007,
    1393,  1009,    -1,  1016,    73,  1393,  1015,    -1,  1530,    -1,
    1530,    -1,   132,    -1,   191,    -1,   155,    -1,    88,    -1,
     438,    -1,    86,    -1,   394,    -1,   366,    -1,   190,    -1,
     266,    -1,   542,    -1,   433,    -1,   130,    -1,   251,    -1,
     959,    -1,   960,    -1,   959,   658,   960,    -1,   961,    -1,
     962,    -1,   974,   970,    -1,   974,  1032,    -1,    -1,  1039,
     944,  1061,  1051,   963,   656,  1059,   657,  1045,    -1,    -1,
    1039,   944,  1528,   585,  1058,   964,   656,  1059,   657,  1045,
      -1,    -1,  1043,  1040,   944,  1061,   965,   656,  1059,   657,
    1046,    -1,    -1,  1044,  1040,   944,  1061,   966,   656,  1059,
     657,  1047,    -1,    -1,   972,  1038,   944,  1061,  1051,   967,
     656,  1059,   657,  1045,    -1,    -1,   972,  1038,   944,  1528,
     585,  1058,   968,   656,  1059,   657,  1045,    -1,    -1,   972,
     196,   263,   944,  1061,   969,   656,  1059,   657,  1032,    -1,
     972,   971,    -1,    -1,   971,    -1,    66,   656,  1210,   657,
      -1,    -1,   973,    -1,    93,  1061,    -1,    -1,    -1,  1520,
     975,   985,   976,   977,    -1,  1002,    -1,   978,    20,   656,
     984,   657,   979,   980,    -1,    -1,   206,    15,    -1,    -1,
     622,    -1,   404,    -1,    -1,   981,    -1,   981,   982,    -1,
     982,    -1,   597,    -1,   597,   263,    -1,    83,  1525,    -1,
     398,   656,   984,   657,    -1,  1204,  1210,  1205,    -1,   991,
    1000,   996,    -1,   992,  1001,   996,    -1,   193,   994,   996,
      -1,    42,    -1,    42,   999,    -1,    47,    -1,    46,    -1,
     987,   999,  1018,    -1,   987,  1018,    -1,   988,   999,  1019,
      -1,   988,  1019,    -1,    37,   999,    -1,    37,    -1,   989,
     999,  1018,    -1,   990,   999,  1019,    -1,   614,   999,    -1,
     641,  1000,   996,    -1,   122,    -1,   571,  1000,    -1,   568,
    1000,    -1,   119,  1000,    -1,   572,    -1,    44,  1000,    -1,
     986,   994,   993,    -1,   326,    -1,   289,    -1,   292,   614,
      -1,   292,   989,  1018,    -1,   574,  1018,    -1,   565,  1000,
    1018,    -1,   328,  1018,    -1,   290,  1018,    -1,   130,   994,
     996,    -1,   372,   994,   996,    -1,   191,   994,   996,    -1,
     166,   656,  1063,   657,  1018,    -1,   493,   656,  1063,   657,
    1018,    -1,   292,  1018,    -1,   489,    -1,   208,    -1,   207,
      -1,   408,    -1,   346,    -1,   280,    -1,   345,    -1,   409,
      -1,   347,    -1,    63,    -1,   356,    -1,   353,    63,    -1,
     987,   618,    -1,   615,    -1,   353,   615,    -1,   373,    -1,
     356,   615,    -1,   353,    63,   618,    -1,   356,   618,    -1,
     251,    -1,   573,    -1,   507,    -1,   327,    -1,    36,    -1,
     433,    -1,   148,    -1,   148,   412,    -1,    -1,   527,   644,
     370,    -1,    -1,   999,    -1,   995,    -1,   656,   370,   658,
     370,   657,    -1,    -1,   997,    -1,   997,   998,    -1,   998,
      -1,   501,    -1,   600,    -1,   642,    -1,   656,   291,   657,
      -1,   656,   587,   657,    -1,   656,   129,   657,    -1,   656,
     370,   657,    -1,    -1,   999,    -1,    -1,   995,    -1,    -1,
    1003,    -1,  1003,  1004,    -1,  1004,    -1,   369,    -1,  1216,
     369,    -1,   132,  1006,    -1,   376,   602,   365,  1207,    -1,
      28,    -1,   489,   132,   613,    -1,  1031,   263,    -1,   597,
      -1,   597,   263,    -1,    83,  1525,    -1,    73,  1013,    -1,
    1524,  1392,  1525,    -1,  1524,  1392,  1528,    -1,  1524,  1392,
    1339,    -1,  1524,  1392,   132,    -1,   985,  1014,    -1,   365,
    1207,    -1,  1510,    -1,    63,   493,    -1,    62,    -1,  1530,
      -1,    37,    -1,  1008,    -1,   132,    -1,    -1,  1007,  1009,
      -1,  1530,    -1,    37,    -1,  1011,    -1,   132,    -1,  1530,
      -1,    -1,    73,  1015,    -1,  1013,    -1,   132,    -1,    -1,
     132,    -1,  1007,  1008,    -1,    22,    -1,   594,    -1,    -1,
      51,    -1,  1017,  1019,    -1,    37,    -1,    37,  1017,    -1,
      -1,    37,    -1,    -1,   656,  1337,  1021,   657,    -1,    21,
      -1,   137,    -1,   467,    -1,    -1,  1022,    -1,  1022,  1023,
      -1,  1023,    -1,  1337,    -1,  1025,  1024,    -1,  1026,    -1,
    1027,   658,  1026,    -1,  1025,   649,  1025,    -1,  1027,    -1,
    1028,    -1,    -1,   274,  1029,    -1,    -1,   416,    -1,   439,
    1521,  1033,  1035,  1036,    -1,    -1,   656,  1034,   657,    -1,
    1034,   658,  1528,    -1,  1528,    -1,    -1,   316,   201,    -1,
     316,   399,    -1,   316,   502,    -1,    -1,   376,   602,  1037,
      -1,   376,   136,  1037,    -1,   376,   602,  1037,   376,   136,
    1037,    -1,   376,   136,  1037,   376,   602,  1037,    -1,   461,
      -1,    54,    -1,   493,   369,    -1,   366,     5,    -1,   493,
     132,    -1,   416,   263,    -1,   597,  1040,    -1,   263,    -1,
     240,    -1,    -1,  1039,    -1,   261,    -1,   240,    -1,   239,
      -1,    -1,   597,    -1,   202,    -1,   514,    -1,    -1,  1048,
      -1,    -1,  1050,    -1,    -1,  1049,    -1,  1055,    -1,  1048,
    1055,    -1,  1056,    -1,  1049,  1056,    -1,  1057,    -1,  1050,
    1057,    -1,    -1,   608,  1058,    -1,    -1,   608,  1058,    -1,
     585,  1058,    -1,   608,  1058,    -1,   585,  1058,    -1,   262,
    1393,  1336,    -1,    83,  1525,    -1,  1524,  1392,  1525,    -1,
    1524,  1392,  1528,    -1,  1524,  1392,  1339,    -1,  1524,  1392,
     132,    -1,  1054,    -1,  1053,    -1,  1054,    -1,  1054,    -1,
     630,   397,  1524,    -1,    49,    -1,   478,    -1,   218,    -1,
    1059,   658,  1060,  1327,    -1,  1060,  1327,    -1,  1528,    -1,
    1528,   656,   370,   657,    -1,    -1,  1520,    -1,    -1,   664,
    1528,    -1,  1507,    -1,  1063,   658,  1507,    -1,    -1,    -1,
      14,  1065,  1101,   558,  1521,  1066,  1078,    -1,    -1,    14,
     115,  1077,  1067,   941,    -1,    14,   115,  1528,   603,   118,
     142,   352,    -1,    -1,    14,   418,   721,  1068,   722,    -1,
      -1,    14,   203,   721,  1069,   722,    -1,    -1,    14,  1655,
    1652,  1070,  1657,    -1,    -1,    14,  1652,  1071,  1657,    -1,
      -1,    14,  1652,  1204,   173,   721,  1072,  1074,  1075,   712,
     717,  1076,    -1,    14,   556,   841,    -1,    14,   287,   214,
     843,    -1,    14,   556,   838,    -1,    14,   556,   837,    -1,
      -1,    14,   491,  1530,  1073,   382,   656,   706,   657,    -1,
      -1,   376,   480,   710,    -1,   716,    -1,   376,   480,   710,
     716,    -1,    -1,   449,   575,   721,    -1,    -1,   150,   718,
      -1,    -1,  1528,    -1,    -1,   144,   556,    -1,   238,   556,
      -1,  1093,   887,    -1,  1093,  1082,    -1,  1082,    -1,   888,
      -1,  1084,    -1,   151,   400,  1371,  1091,    -1,   434,   400,
    1157,  1083,    -1,    -1,   381,   400,  1157,  1083,  1079,  1157,
      -1,    16,   400,  1157,  1083,    -1,    -1,    66,   400,  1083,
    1080,  1151,    -1,    -1,   451,   400,  1157,  1083,  1081,  1129,
      -1,    71,   400,  1157,  1337,    -1,   583,   400,  1083,    -1,
    1087,    -1,   175,   400,  1092,   630,   558,  1521,   890,    -1,
     448,   402,    -1,    13,    -1,  1091,    -1,    -1,     6,   400,
     944,  1157,  1085,  1086,    -1,    -1,   656,   913,   657,    -1,
     401,  1337,    -1,    -1,   450,   400,  1157,  1088,  1089,    -1,
      -1,    -1,  1091,  1090,   250,   656,   913,   657,    -1,  1092,
      -1,  1091,   658,  1092,    -1,  1528,    -1,  1095,    -1,  1093,
     658,  1095,    -1,     6,  1099,   943,    -1,  1094,   961,  1107,
      -1,     6,   962,    -1,  1094,   656,   958,   657,    -1,    60,
    1099,  1370,  1520,   974,  1107,    -1,   342,  1099,  1370,   974,
    1107,    -1,   151,  1099,  1370,  1520,  1106,    -1,   151,   196,
     263,  1370,  1520,    -1,   151,   416,   263,    -1,   151,  1039,
    1370,  1520,    -1,   143,   261,    -1,   159,   261,    -1,    14,
    1099,  1520,   493,   132,  1510,    -1,    14,  1099,  1520,   151,
     132,    -1,   449,  1108,  1521,    -1,   101,   575,  1007,  1009,
    1014,    -1,   947,    -1,   195,    -1,  1320,    -1,  1097,    -1,
    1098,    -1,    -1,  1098,    -1,  1097,    -1,  1098,  1097,    -1,
    1097,  1098,    -1,    12,  1393,   132,    -1,    12,  1393,  1528,
      -1,   286,  1393,   132,    -1,   286,  1393,  1528,    -1,    -1,
      81,    -1,    -1,   236,    -1,    -1,  1102,  1103,    -1,    -1,
    1104,    -1,  1104,  1105,    -1,  1105,    -1,   236,    -1,   379,
      -1,    -1,   461,    -1,    54,    -1,    -1,     9,  1528,    -1,
     190,    -1,    -1,   575,    -1,   644,    -1,    20,    -1,    -1,
     531,   503,   694,  1116,  1110,  1120,    -1,    -1,   531,    13,
     504,  1116,  1111,    -1,   539,   503,   694,  1116,    -1,   539,
      13,   504,  1116,    -1,   531,   577,  1113,    -1,    -1,  1114,
      -1,  1115,    -1,  1114,   658,  1115,    -1,   630,    92,   508,
      -1,   431,   378,    -1,   431,   635,    -1,    -1,  1117,  1118,
      -1,  1119,    -1,  1118,   658,  1119,    -1,    -1,   526,    -1,
     445,    -1,    -1,   601,  1121,    -1,   601,   296,   644,  1525,
      -1,   693,    -1,  1121,   658,   693,    -1,    -1,    65,  1569,
    1123,  1365,  1124,    -1,    -1,   427,    -1,   182,    -1,  1569,
    1365,  1129,    -1,    -1,   621,  1126,  1365,  1132,    -1,    -1,
     451,  1157,  1128,  1125,    -1,    -1,  1130,    -1,  1131,    -1,
    1131,  1130,    -1,   427,    -1,   182,    -1,   606,    -1,    -1,
     200,   349,    -1,    -1,    16,  1157,  1569,  1134,  1135,    -1,
    1136,    -1,  1135,   658,  1136,    -1,  1366,  1137,    -1,    -1,
     404,   197,  1138,    -1,    13,    -1,    75,  1139,   239,  1141,
      -1,    13,    -1,    -1,   656,  1140,  1143,   657,    -1,    13,
      -1,    -1,   656,  1142,  1144,   657,    -1,    -1,  1528,    -1,
    1143,   658,  1528,    -1,    -1,  1145,    -1,  1144,   658,  1145,
      -1,  1528,    -1,   416,    -1,    38,  1525,    -1,  1569,  1365,
    1151,    -1,    -1,   621,  1148,  1365,  1154,    -1,    -1,    66,
    1150,  1147,    -1,    -1,  1152,    -1,  1153,    -1,  1153,  1152,
      -1,   427,    -1,   186,    -1,   329,    -1,   182,    -1,    61,
      -1,   197,   603,    -1,    -1,   197,   603,    -1,    -1,   381,
    1157,  1569,  1156,  1365,    -1,    -1,   368,    -1,   283,    -1,
      -1,   449,  1569,  1159,  1161,    -1,   449,   605,   720,  1160,
      -1,  1533,   575,  1533,    -1,  1160,   658,  1533,   575,  1533,
      -1,  1162,    -1,  1161,   658,  1162,    -1,  1521,   575,  1521,
      -1,    -1,    52,   240,  1164,  1165,   253,  1169,    -1,  1166,
      -1,  1168,    -1,  1167,    -1,  1166,   658,  1167,    -1,  1521,
    1178,    -1,  1521,  1176,  1178,    -1,  1528,    -1,   132,    -1,
      -1,   282,   240,   250,    52,  1171,  1172,    -1,  1175,    -1,
    1173,    -1,  1174,    -1,  1173,   658,  1174,    -1,  1521,  1178,
    1181,    -1,  1521,  1176,  1178,  1181,    -1,    -1,   400,   890,
    1177,   656,  1083,   657,    -1,    -1,  1179,  1180,    -1,    -1,
    1039,   656,  1302,   657,    -1,    -1,   236,   270,    -1,  1183,
      -1,   485,  1188,    -1,   656,  1184,   657,  1634,    -1,    -1,
    1185,   485,  1190,    -1,   656,  1184,   657,    -1,    -1,  1187,
     485,  1282,  1193,    -1,   656,  1186,   657,    -1,    -1,  1190,
    1189,  1631,    -1,  1191,  1323,  1328,  1200,    -1,  1191,  1354,
    1200,    -1,  1191,  1353,  1194,  1312,  1317,  1314,  1323,  1328,
    1343,  1353,  1200,    -1,    -1,  1192,  1197,  1201,    -1,  1195,
    1312,  1317,  1314,  1323,  1328,  1343,  1200,    -1,   200,  1196,
      -1,    -1,  1194,    -1,  1263,    -1,   152,    -1,    -1,  1198,
      -1,  1198,  1199,    -1,  1199,    -1,  1648,    -1,   523,    -1,
     521,    -1,    -1,   197,   602,    -1,   286,   253,   495,   340,
      -1,  1201,   658,  1202,    -1,  1202,    -1,   651,    -1,  1204,
    1515,  1205,    -1,  1204,  1210,  1205,  1206,    -1,    -1,    -1,
      -1,    -1,    20,  1528,    -1,    20,  1525,    -1,  1528,    -1,
    1525,    -1,    -1,   656,   657,    -1,   656,  1337,   657,    -1,
      -1,   656,   657,    -1,   656,  1337,   657,    -1,    -1,   656,
     657,    -1,  1210,  1214,  1210,    -1,  1210,   639,  1210,    -1,
    1210,  1215,  1210,    -1,   364,  1210,    -1,  1211,   256,   582,
      -1,  1211,   256,  1216,   582,    -1,  1211,   256,   185,    -1,
    1211,   256,  1216,   185,    -1,  1211,   256,   598,    -1,  1211,
     256,  1216,   598,    -1,  1211,    -1,  1211,   256,   369,    -1,
    1211,   256,  1216,   369,    -1,  1211,   167,  1212,    -1,  1211,
    1218,  1212,    -1,  1211,  1218,  1219,   656,  1643,   657,    -1,
    1212,    -1,  1213,   253,   656,  1643,   657,    -1,  1213,  1216,
     253,   656,  1643,   657,    -1,  1213,   253,   656,  1210,   657,
      -1,  1213,   253,   656,  1210,   658,  1256,   657,    -1,  1213,
    1216,   253,   656,  1210,   657,    -1,  1213,  1216,   253,   656,
    1210,   658,  1256,   657,    -1,  1213,    35,  1213,    18,  1212,
      -1,  1213,  1216,    35,  1213,    18,  1212,    -1,  1213,   512,
     276,  1213,    -1,  1213,   276,  1225,  1316,    -1,  1213,  1216,
     276,  1225,  1316,    -1,  1213,   440,  1213,    -1,  1213,  1216,
     440,  1213,    -1,  1213,    -1,  1213,   647,  1213,    -1,  1213,
     648,  1213,    -1,  1213,   496,  1213,    -1,  1213,   497,  1213,
      -1,  1213,   650,  1213,    -1,  1213,   649,  1213,    -1,  1213,
     650,   249,  1210,  1306,    -1,  1213,   649,   249,  1210,  1306,
      -1,  1213,   651,  1213,    -1,  1213,   652,  1213,    -1,  1213,
     653,  1213,    -1,  1213,   147,  1213,    -1,  1213,   343,  1213,
      -1,  1213,   654,  1213,    -1,  1225,    -1,   388,    -1,   385,
      -1,    18,    -1,    17,    -1,   364,    -1,   363,    -1,   659,
      -1,   363,    -1,   644,    -1,   204,    -1,   645,    -1,   268,
      -1,   646,    -1,   357,    -1,    13,    -1,    19,    -1,    -1,
      20,  1221,    -1,   251,    -1,   600,   251,    -1,   148,    -1,
     433,    -1,   193,    -1,   130,   994,    -1,    -1,   987,  1222,
    1018,    -1,   988,    -1,   122,    -1,   571,  1000,    -1,   119,
    1000,    -1,  1210,   658,  1210,  1220,    -1,  1223,    -1,  1224,
     658,  1223,    -1,  1517,    -1,  1226,    -1,  1227,    -1,  1230,
      -1,  1228,    -1,  1225,    73,  1530,    -1,  1511,    -1,  1509,
      -1,  1242,    -1,  1238,    -1,  1225,   387,  1225,    -1,   650,
    1225,    -1,   649,  1225,    -1,   655,  1225,    -1,  1217,  1225,
      -1,   656,  1643,   657,    -1,   656,  1210,   657,    -1,   656,
    1210,   658,  1256,   657,    -1,   476,   656,  1210,   658,  1256,
     657,    -1,   178,   656,  1643,   657,    -1,   660,  1528,  1210,
     661,    -1,   316,  1257,    10,   656,  1213,  1232,   657,    -1,
      37,  1225,    -1,    57,   656,  1210,    20,  1252,   657,    -1,
      56,  1259,  1261,  1260,   161,    -1,   101,   656,  1210,   658,
    1252,   657,    -1,   101,   656,  1210,   608,  1008,   657,    -1,
     132,   656,  1517,   657,    -1,   612,   656,  1518,   657,    -1,
     249,  1210,  1306,   650,  1210,    -1,    63,   656,  1256,   657,
      -1,    63,   656,  1256,   608,  1008,   657,    -1,   109,  1209,
      -1,   110,  1209,    -1,   122,   656,  1210,   657,    -1,   127,
     656,  1210,   657,    -1,   229,   656,  1210,   657,    -1,   246,
     656,  1210,   658,  1210,   658,  1210,   658,  1210,   657,    -1,
     249,   656,  1210,   658,  1210,   657,    -1,   249,   656,  1210,
     658,  1210,   658,  1256,   657,    -1,   272,   656,  1210,   658,
    1210,   657,    -1,   337,   656,  1210,   657,    -1,   344,   656,
    1210,   657,    -1,   469,   656,  1210,   658,  1210,   657,    -1,
     483,   656,  1210,   657,    -1,   571,   656,  1210,   657,    -1,
     568,   656,  1210,   657,    -1,   568,   656,  1210,   658,  1210,
     657,    -1,   581,   656,  1210,   657,    -1,   581,   656,   269,
    1210,   200,  1210,   657,    -1,   581,   656,   576,  1210,   200,
    1210,   657,    -1,   581,   656,    48,  1210,   200,  1210,   657,
      -1,   581,   656,   269,   200,  1210,   657,    -1,   581,   656,
     576,   200,  1210,   657,    -1,   581,   656,    48,   200,  1210,
     657,    -1,   581,   656,  1210,   200,  1210,   657,    -1,   605,
     656,   657,    -1,   641,   656,  1210,   657,    -1,     8,   656,
    1210,   658,  1210,   657,    -1,     8,   656,  1210,   658,   249,
    1210,  1306,   657,    -1,   107,  1209,    -1,   114,  1208,    -1,
     120,   656,  1210,   658,   249,  1210,  1306,   657,    -1,   121,
     656,  1210,   658,   249,  1210,  1306,   657,    -1,   184,   656,
    1306,   200,  1210,   657,    -1,   209,   656,  1308,   658,  1210,
     657,    -1,   365,  1208,    -1,   411,   656,  1213,   253,  1210,
     657,    -1,   544,   656,  1210,   658,  1210,   657,    -1,   544,
     656,  1210,   658,   249,  1210,  1306,   657,    -1,   548,   656,
    1210,   658,  1210,   658,  1210,   657,    -1,   548,   656,  1210,
     658,  1210,   657,    -1,   548,   656,  1210,   200,  1210,   197,
    1210,   657,    -1,   548,   656,  1210,   200,  1210,   657,    -1,
     554,  1208,    -1,   569,   656,  1307,   658,  1210,   658,  1210,
     657,    -1,   570,   656,  1307,   658,  1210,   658,  1210,   657,
      -1,   609,  1209,    -1,   611,  1208,    -1,   610,  1208,    -1,
      76,   656,  1210,   658,  1224,   657,    -1,    79,   656,  1210,
     658,  1256,   657,    -1,    77,   656,  1210,   657,    -1,    78,
     656,  1224,   657,    -1,    80,   656,  1210,   658,  1210,    20,
    1252,   657,    -1,    22,   656,  1210,   657,    -1,    62,   656,
    1210,   657,    -1,    71,   656,  1256,   657,    -1,    74,   656,
    1210,   657,    -1,   115,   656,   657,    -1,   234,   656,  1210,
     658,  1210,   658,  1210,   657,    -1,   198,   656,  1210,   658,
    1210,   657,    -1,   198,   656,  1210,   658,  1210,   658,  1210,
     657,    -1,   267,   656,  1256,   657,    -1,   333,   656,  1210,
     657,    -1,   343,   656,  1210,   658,  1210,   657,    -1,   375,
     656,  1210,   657,    -1,   403,   656,  1210,   657,    -1,   425,
     656,  1210,   657,    -1,   453,   656,  1210,   658,  1210,   657,
      -1,   454,   656,  1210,   658,  1210,   658,  1210,   657,    -1,
     467,   656,  1210,   657,    -1,   477,   656,   657,    -1,   583,
     656,  1210,   658,  1210,   657,    -1,   625,   656,  1210,   657,
      -1,   625,   656,  1210,   658,  1210,   657,    -1,   626,   656,
    1210,  1030,   657,    -1,   626,   656,  1210,    20,    63,  1020,
    1030,   657,    -1,   626,   656,  1210,    20,    37,  1020,   657,
      -1,   626,   656,  1210,   658,  1336,   658,  1336,   658,  1336,
     657,    -1,  1229,    -1,    97,   656,  1210,   658,  1210,   657,
      -1,   207,   656,  1256,   657,    -1,   280,   656,  1256,   657,
      -1,   345,   656,  1256,   657,    -1,   346,   656,  1256,   657,
      -1,   347,   656,  1256,   657,    -1,   408,   656,  1210,   658,
    1210,   657,    -1,   409,   656,  1256,   657,    -1,    -1,  1524,
     656,  1231,  1235,   657,    -1,  1528,   664,  1528,   656,  1255,
     657,    -1,  1233,  1234,    -1,   253,    46,   340,    -1,    -1,
     253,   354,   265,   340,    -1,    -1,   630,   426,   180,    -1,
      -1,  1236,    -1,  1237,    -1,  1236,   658,  1237,    -1,  1204,
    1210,  1205,  1206,    -1,    31,   656,  1250,   657,    -1,    31,
     656,   146,  1250,   657,    -1,    40,   656,  1250,   657,    -1,
      41,   656,  1250,   657,    -1,    43,   656,  1250,   657,    -1,
     102,   656,  1311,   651,   657,    -1,   102,   656,  1250,   657,
      -1,    -1,    -1,   102,   656,   146,  1239,  1256,  1240,   657,
      -1,   339,   656,  1250,   657,    -1,   339,   656,   146,  1250,
     657,    -1,   321,   656,  1250,   657,    -1,   321,   656,   146,
    1250,   657,    -1,   538,   656,  1250,   657,    -1,   617,   656,
    1250,   657,    -1,   537,   656,  1250,   657,    -1,   619,   656,
    1250,   657,    -1,   549,   656,  1250,   657,    -1,   549,   656,
     146,  1250,   657,    -1,    -1,   215,   656,  1245,  1241,  1256,
    1247,  1246,   657,    -1,    -1,   663,  1243,  1244,    -1,  1530,
     494,  1210,    -1,  1530,    -1,   663,  1555,  1530,  1062,    -1,
      -1,   146,    -1,    -1,   487,  1507,    -1,    -1,    -1,   386,
      50,  1248,  1249,    -1,  1249,   658,  1516,  1327,    -1,  1516,
    1327,    -1,    -1,  1311,  1251,  1210,    -1,    37,  1000,    -1,
      -1,    63,  1000,  1253,  1018,    -1,   356,  1000,    -1,   251,
      -1,   501,    -1,   501,   251,    -1,   600,    -1,   600,   251,
      -1,   122,    -1,   571,  1000,    -1,   119,  1000,    -1,   130,
     994,    -1,    -1,   148,  1254,  1001,    -1,    -1,  1256,    -1,
    1210,    -1,  1256,   658,  1210,    -1,  1258,    -1,   656,  1258,
     657,    -1,  1517,    -1,  1258,   658,  1517,    -1,    -1,  1210,
      -1,    -1,   157,  1210,    -1,   627,  1210,   567,  1210,    -1,
    1261,   627,  1210,   567,  1210,    -1,  1277,    -1,  1266,    -1,
    1265,    -1,  1262,    -1,   660,  1528,  1262,   661,    -1,  1264,
      -1,  1265,   658,  1264,    -1,  1262,  1274,  1262,    -1,    -1,
    1262,  1274,  1262,   376,  1267,  1210,    -1,    -1,  1262,  1274,
    1262,   608,  1268,   656,  1305,   657,    -1,  1262,   354,  1273,
    1277,    -1,    -1,  1262,   272,  1291,   260,  1262,   376,  1269,
    1210,    -1,    -1,  1262,   272,  1291,   260,  1277,  1270,   608,
     656,  1305,   657,    -1,  1262,   354,   272,  1291,   260,  1277,
      -1,    -1,  1262,   469,  1291,   260,  1262,   376,  1271,  1210,
      -1,    -1,  1262,   469,  1291,   260,  1277,  1272,   608,   656,
    1305,   657,    -1,  1262,   354,   469,  1291,   260,  1277,    -1,
     260,    -1,   243,   260,    -1,   541,    -1,  1273,    -1,   105,
     260,    -1,    -1,  1276,    -1,   400,   656,  1305,   657,   890,
      -1,    -1,  1278,  1521,  1275,  1310,  1300,    -1,  1290,  1289,
    1286,    -1,   656,  1289,  1279,   657,  1310,    -1,  1284,  1635,
      -1,    -1,  1279,   596,  1639,  1280,  1640,    -1,  1282,    -1,
      -1,  1283,  1646,  1201,    -1,    -1,  1289,  1285,  1265,    -1,
      -1,    -1,  1287,  1197,  1201,  1288,  1193,    -1,    -1,   485,
      -1,    -1,   389,    -1,    -1,   197,   260,    -1,   197,   386,
      50,    -1,   197,   214,    50,    -1,   195,    -1,   236,    -1,
      -1,  1293,  1039,  1292,  1295,   656,  1304,   657,    -1,    -1,
     607,  1039,  1292,  1296,   656,  1302,   657,    -1,  1294,    -1,
    1297,  1294,    -1,    -1,    -1,  1299,  1297,    -1,    -1,  1301,
    1298,    -1,    -1,  1304,    -1,  1528,    -1,   416,    -1,  1303,
      -1,  1304,   658,  1303,    -1,  1528,    -1,  1305,   658,  1528,
      -1,  1307,    -1,   123,    -1,   124,    -1,   125,    -1,   126,
      -1,   226,    -1,   227,    -1,   228,    -1,   335,    -1,   336,
      -1,   482,    -1,   640,    -1,   127,    -1,   625,    -1,   229,
      -1,   337,    -1,   344,    -1,   425,    -1,   483,    -1,   333,
      -1,   641,    -1,   122,    -1,   571,    -1,   119,    -1,   568,
      -1,    -1,    20,    -1,   644,    -1,    -1,  1309,  1528,    -1,
      -1,    13,    -1,    -1,    -1,   628,  1313,  1210,    -1,    -1,
      -1,   219,  1315,  1210,    -1,   171,  1225,    -1,    -1,    -1,
     214,    50,  1318,  1319,    -1,  1318,   658,  1516,  1327,    -1,
    1516,  1327,    -1,    -1,   631,    -1,   632,    -1,   386,    50,
    1321,    -1,  1321,   658,  1322,    -1,  1322,    -1,  1518,  1327,
      -1,    -1,  1324,    -1,    -1,   386,    50,  1325,  1326,    -1,
    1326,   658,  1516,  1327,    -1,  1516,  1327,    -1,    -1,    21,
      -1,   137,    -1,    -1,  1330,    -1,   277,    -1,  1329,  1331,
      -1,  1329,  1331,   474,   176,  1333,    -1,  1329,   474,   176,
    1333,    -1,  1332,    -1,  1332,   658,  1332,    -1,  1332,   374,
    1332,    -1,  1528,    -1,  1509,    -1,   587,    -1,   291,    -1,
     370,    -1,  1332,    -1,    -1,   277,  1332,    -1,   277,   474,
     176,    -1,   277,  1332,   474,   176,    -1,   370,    -1,   649,
     370,    -1,   649,   291,    -1,   370,    -1,   221,    -1,   291,
      -1,   587,    -1,   129,    -1,   192,    -1,   370,    -1,   221,
      -1,   291,    -1,   587,    -1,  1340,    -1,   370,    -1,   587,
      -1,   291,    -1,   129,    -1,   192,    -1,   370,    -1,   587,
      -1,   221,    -1,   291,    -1,  1340,    -1,  1341,    -1,   129,
      -1,   192,    -1,  1336,    -1,   132,    -1,    -1,    -1,   418,
    1528,  1344,   656,  1345,   657,    -1,    -1,  1346,    -1,  1346,
     658,  1347,    -1,  1347,    -1,  1204,  1210,  1205,    -1,    -1,
    1349,  1350,    -1,  1350,   658,  1351,    -1,  1351,    -1,  1352,
      -1,   663,  1530,    -1,  1530,    -1,    -1,  1354,    -1,    -1,
     250,  1355,  1356,    -1,    -1,    -1,   390,  1527,  1357,  1010,
    1358,  1491,  1494,    -1,   153,  1527,    -1,  1348,    -1,    -1,
     150,  1360,  1256,    -1,    -1,   151,  1372,  1569,  1371,  1362,
    1365,  1106,    -1,    -1,   151,   240,  1370,  1528,   376,  1521,
    1363,    -1,   151,   115,  1371,  1528,    -1,   151,   203,  1371,
    1528,   664,  1528,    -1,   151,   203,  1371,  1528,    -1,   151,
     418,  1371,   721,    -1,   151,   605,  1371,   720,  1605,    -1,
     151,   470,  1371,   720,  1589,    -1,    -1,   151,   621,  1371,
    1364,  1365,  1106,    -1,   151,   173,  1371,   721,    -1,   151,
     580,  1371,   721,    -1,   151,   556,   864,   875,   876,    -1,
     151,   287,   214,   865,   875,   876,    -1,   151,   491,  1371,
    1530,    -1,  1366,    -1,  1365,   658,  1366,    -1,  1521,    -1,
    1521,  1275,    -1,  1369,    -1,  1368,   658,  1369,    -1,  1522,
      -1,    -1,   234,   178,    -1,    -1,   234,   178,    -1,    -1,
     561,    -1,    -1,    -1,   246,  1374,  1379,  1100,  1381,  1375,
    1383,  1399,    -1,    -1,    -1,   454,  1377,  1380,  1381,  1378,
    1383,    -1,    -1,   294,    -1,   134,    -1,   223,    -1,  1408,
      -1,   134,    -1,   250,  1382,    -1,  1382,    -1,  1367,    -1,
    1386,    -1,   656,   657,  1386,    -1,   656,  1385,   657,  1386,
      -1,    -1,   493,  1384,  1390,    -1,  1385,   658,  1514,    -1,
    1514,    -1,   612,  1389,    -1,   613,  1389,    -1,    -1,   936,
    1387,  1631,    -1,    -1,   656,   936,   657,  1388,  1634,    -1,
    1389,   658,  1394,    -1,  1394,    -1,  1390,   658,  1391,    -1,
    1391,    -1,  1518,  1392,  1398,    -1,   644,    -1,   494,    -1,
      -1,  1392,    -1,    -1,   656,  1395,  1396,   657,    -1,    -1,
    1397,    -1,  1397,   658,  1398,    -1,  1398,    -1,  1210,    -1,
     132,    -1,    -1,    -1,   376,   154,  1400,   263,   602,  1406,
      -1,    -1,    -1,   602,  1402,  1408,  1100,  1263,   493,  1404,
    1403,  1312,  1323,  1334,    -1,  1404,   658,  1405,    -1,  1405,
      -1,  1518,  1392,  1398,    -1,  1406,   658,  1407,    -1,  1407,
      -1,  1518,  1392,  1398,    -1,    -1,   294,    -1,    -1,   136,
    1410,  1420,  1411,    -1,    -1,    -1,   200,  1521,  1275,  1412,
    1312,  1323,  1334,  1413,  1416,    -1,    -1,  1417,  1414,   200,
    1263,  1312,    -1,    -1,   200,  1368,  1415,   608,  1263,  1312,
      -1,    -1,   464,  1201,    -1,  1418,    -1,  1417,   658,  1418,
      -1,  1528,  1419,    -1,  1528,   664,  1528,  1419,    -1,    -1,
     664,   651,    -1,    -1,  1421,  1420,    -1,   427,    -1,   294,
      -1,   236,    -1,    -1,   583,  1424,  1423,  1366,    -1,    -1,
     558,    -1,    -1,  1426,    -1,  1427,    -1,  1426,   658,  1427,
      -1,   103,    -1,   330,    -1,    45,   254,    -1,    98,   553,
      -1,   394,   187,    -1,   255,    -1,   552,    -1,   513,    -1,
      13,    -1,    -1,   197,   426,   370,    -1,    -1,   498,  1430,
    1431,    -1,   116,  1442,    -1,  1438,   555,  1437,  1442,    -1,
    1438,   579,  1437,  1442,    -1,   172,  1437,  1442,    -1,   558,
     536,  1437,  1442,    -1,   380,   555,  1437,  1442,    -1,   406,
      -1,   406,   511,  1525,    -1,   406,   511,  1442,    -1,   165,
     954,  1434,    -1,   165,    13,  1434,    -1,  1438,    75,  1439,
    1521,  1437,  1442,    -1,  1435,   288,    -1,   503,   225,    -1,
      -1,    38,   172,  1440,  1441,  1432,  1328,    -1,    -1,   442,
     694,   172,  1440,  1441,  1433,  1328,    -1,  1041,  1439,  1521,
    1437,  1312,    -1,  1436,   164,    -1,    26,    -1,   100,    -1,
     417,    -1,   102,   656,   651,   657,   624,    -1,   102,   656,
     651,   657,   169,    -1,   624,  1328,    -1,   169,  1328,    -1,
     422,    -1,   421,  1425,  1428,  1328,    -1,  1554,   536,  1442,
      -1,  1438,   420,    -1,  1554,   616,  1442,    -1,  1007,  1442,
      -1,    74,  1442,    -1,   213,    -1,   213,   197,  1532,   720,
      -1,   104,   115,   944,  1528,    -1,   104,   558,  1521,    -1,
     104,   621,  1521,    -1,   312,   536,    -1,    13,   504,   536,
      -1,   503,   536,    -1,   503,   695,   536,    -1,   104,   418,
     721,    -1,   104,   203,   721,    -1,   104,   580,   721,    -1,
     418,   536,  1442,    -1,   203,   536,  1442,    -1,   418,    72,
     721,    -1,   203,    72,   721,    -1,   104,   173,   721,    -1,
    1447,   197,  1210,    -1,  1524,  1203,  1442,    -1,   536,    -1,
     348,    -1,   288,    -1,   312,    -1,    37,    -1,    -1,   540,
      -1,    -1,  1439,  1528,    -1,    -1,   201,    -1,   200,    -1,
     253,    -1,    -1,   253,  1525,    -1,    -1,   200,  1338,    -1,
      -1,   276,  1203,  1525,    -1,   628,  1203,  1210,    -1,    -1,
    1447,  1521,  1444,  1451,    -1,    -1,  1447,  1449,  1445,  1446,
      -1,  1182,    -1,  1373,    -1,  1376,    -1,  1401,    -1,  1409,
      -1,   137,    -1,   138,    -1,    16,  1450,  1446,    -1,   182,
      -1,   401,    -1,  1450,    -1,    -1,   198,   644,  1530,    -1,
      -1,  1507,    -1,  1528,    -1,    -1,   194,  1157,  1453,  1454,
      -1,    -1,  1569,  1455,  1461,  1456,    -1,  1459,    -1,    -1,
    1457,    -1,   630,   431,   286,  1462,    -1,    -1,   197,  1458,
     181,    -1,  1459,   658,  1460,    -1,  1460,    -1,   168,   288,
      -1,   165,   288,    -1,   205,   288,    -1,   506,   288,    -1,
      37,   288,    -1,   441,   288,   694,    -1,   426,    52,    -1,
     225,    -1,   417,    -1,   288,    -1,   536,    -1,   503,   694,
      -1,   312,    -1,   139,    -1,   459,    -1,  1524,  1203,    -1,
      -1,  1365,    -1,    -1,    18,   143,    64,    -1,    -1,   457,
    1464,  1465,    -1,  1465,   658,  1466,    -1,  1466,    -1,    -1,
     503,  1467,   694,  1469,    -1,    -1,   312,  1468,  1470,    -1,
     426,    52,    -1,    -1,    13,    -1,    -1,   575,  1336,    -1,
      -1,   424,  1472,  1473,    -1,  1435,   288,  1474,    -1,   575,
    1525,    -1,    33,  1210,    -1,    -1,   264,  1476,  1477,  1478,
    1479,    -1,    -1,   217,    -1,   510,    -1,    -1,    91,    -1,
     426,    -1,   426,   230,    -1,  1210,    -1,   605,  1533,    -1,
     499,    -1,   607,  1528,    -1,    -1,    -1,    -1,    -1,   282,
    1487,  1483,  1489,  1488,   241,  1527,  1484,  1490,   250,   558,
    1521,  1275,  1485,  1010,  1486,  1497,  1491,  1494,  1498,  1500,
    1503,    -1,   118,    -1,   638,    -1,    -1,   283,    -1,    -1,
      89,    -1,   294,    -1,    -1,   454,    -1,   236,    -1,    -1,
      75,  1492,    -1,  1492,  1493,    -1,  1493,    -1,   563,    50,
    1507,    -1,   384,   160,    50,  1507,    -1,   160,    50,  1507,
      -1,   170,    50,  1507,    -1,    -1,   279,  1495,    -1,  1495,
    1496,    -1,  1496,    -1,   563,    50,  1507,    -1,   529,    50,
    1507,    -1,    -1,   474,   232,    50,  1507,    -1,    -1,   236,
     370,  1499,    -1,   279,    -1,   474,    -1,    -1,   656,  1501,
     657,    -1,   656,   657,    -1,  1501,   658,  1502,    -1,  1502,
      -1,  1518,    -1,   663,  1530,    -1,    -1,   493,  1504,    -1,
    1504,   658,  1505,    -1,  1505,    -1,  1518,  1392,  1204,  1398,
    1205,    -1,   564,    -1,   355,    -1,   590,   564,    -1,  1506,
    1526,    -1,  1526,    -1,  1508,    -1,   221,    -1,   222,    -1,
      39,    -1,   396,    -1,  1511,    -1,   650,  1512,    -1,   649,
    1512,    -1,  1506,    -1,  1512,    -1,  1513,    -1,   369,    -1,
     185,    -1,   582,    -1,   221,    -1,   222,    -1,    39,    -1,
     590,  1508,    -1,   370,    -1,   291,    -1,   587,    -1,   129,
      -1,   192,    -1,   122,   564,    -1,   571,   564,    -1,   568,
     564,    -1,  1518,    -1,  1515,    -1,  1528,   664,   651,    -1,
    1528,   664,  1528,   664,   651,    -1,  1210,    -1,  1528,    -1,
    1519,    -1,  1528,    -1,  1519,    -1,  1528,   664,  1528,    -1,
     664,  1528,   664,  1528,    -1,  1528,   664,  1528,   664,  1528,
      -1,  1528,    -1,  1528,   664,  1528,   664,  1528,    -1,  1528,
     664,  1528,    -1,   664,  1528,    -1,  1528,    -1,  1528,   664,
    1528,    -1,   664,  1528,    -1,  1528,  1419,    -1,  1528,   664,
    1528,  1419,    -1,  1528,    -1,   231,    -1,   233,    -1,   564,
      -1,   564,    -1,   564,    -1,  1524,    -1,  1534,    -1,  1524,
      -1,  1535,    -1,  1528,    -1,  1525,    -1,   275,    -1,  1530,
      -1,  1530,   663,  1530,    -1,   109,  1209,    -1,  1531,    -1,
    1590,    -1,  1531,    -1,  1535,    -1,    22,    -1,    32,    -1,
      34,    -1,    51,    -1,    52,    -1,    62,    -1,    65,    -1,
      64,    -1,    70,    -1,    76,    -1,    77,    -1,    78,    -1,
      79,    -1,    80,    -1,    83,    -1,    85,    -1,    97,    -1,
     128,    -1,   150,    -1,   161,    -1,   176,    -1,   177,    -1,
     194,    -1,   198,    -1,   210,    -1,   216,    -1,   220,    -1,
     224,    -1,   248,    -1,   265,    -1,   366,    -1,   380,    -1,
     383,    -1,   382,    -1,   392,    -1,   397,    -1,   410,    -1,
     413,    -1,   448,    -1,   451,    -1,   457,    -1,   460,    -1,
     471,    -1,   479,    -1,   484,    -1,   491,    -1,   499,    -1,
     501,    -1,   509,    -1,   503,    -1,   504,    -1,   511,    -1,
     531,    -1,   539,    -1,   583,    -1,   594,    -1,   595,    -1,
     634,    -1,   637,    -1,   603,    -1,     5,    -1,     8,    -1,
       7,    -1,     9,    -1,    10,    -1,    11,    -1,    12,    -1,
      15,    -1,    19,    -1,    24,    -1,    25,    -1,    26,    -1,
      28,    -1,    27,    -1,    29,    -1,    30,    -1,    31,    -1,
      38,    -1,    42,    -1,    45,    -1,    47,    -1,    46,    -1,
      49,    -1,    55,    -1,    58,    -1,    59,    -1,    61,    -1,
      67,    -1,    69,    -1,    68,    -1,    71,    -1,    72,    -1,
      74,    -1,    82,    -1,    75,    -1,    84,    -1,    86,    -1,
      87,    -1,    88,    -1,    89,    -1,    91,    -1,    92,    -1,
      94,    -1,    96,    -1,    95,    -1,    98,    -1,   100,    -1,
     111,    -1,   103,    -1,   106,    -1,   108,    -1,   113,    -1,
     118,    -1,   117,    -1,   119,    -1,   122,    -1,   127,    -1,
     133,    -1,   135,    -1,   139,    -1,   141,    -1,   142,    -1,
     143,    -1,   144,    -1,   145,    -1,   153,    -1,   154,    -1,
     155,    -1,   162,    -1,   166,    -1,   165,    -1,   164,    -1,
     168,    -1,   169,    -1,   171,    -1,   173,    -1,   172,    -1,
     174,    -1,   175,    -1,   180,    -1,   181,    -1,   182,    -1,
     183,    -1,   187,    -1,   186,    -1,   199,    -1,   159,    -1,
     201,    -1,   189,    -1,   190,    -1,   191,    -1,   205,    -1,
     206,    -1,   208,    -1,   207,    -1,   209,    -1,   213,    -1,
     211,    -1,   218,    -1,   217,    -1,   225,    -1,   229,    -1,
     230,    -1,   232,    -1,   237,    -1,   252,    -1,   238,    -1,
     239,    -1,   242,    -1,   254,    -1,   255,    -1,   257,    -1,
     258,    -1,   247,    -1,   262,    -1,   267,    -1,   266,    -1,
     270,    -1,   273,    -1,   274,    -1,   280,    -1,   281,    -1,
     283,    -1,   285,    -1,   287,    -1,   288,    -1,   319,    -1,
     312,    -1,   315,    -1,   296,    -1,   297,    -1,   301,    -1,
     298,    -1,   299,    -1,   313,    -1,   314,    -1,   300,    -1,
     302,    -1,   295,    -1,   310,    -1,   304,    -1,   303,    -1,
     305,    -1,   306,    -1,   307,    -1,   308,    -1,   309,    -1,
     317,    -1,   318,    -1,   320,    -1,   323,    -1,   322,    -1,
     324,    -1,   329,    -1,   330,    -1,   331,    -1,   332,    -1,
     333,    -1,   334,    -1,   337,    -1,   338,    -1,   342,    -1,
     340,    -1,   344,    -1,   345,    -1,   346,    -1,   347,    -1,
     348,    -1,   349,    -1,   350,    -1,   352,    -1,   351,    -1,
     353,    -1,   356,    -1,   360,    -1,   359,    -1,   367,    -1,
     361,    -1,   362,    -1,   371,    -1,   373,    -1,   374,    -1,
     375,    -1,   377,    -1,   379,    -1,   378,    -1,   393,    -1,
     394,    -1,   399,    -1,   402,    -1,   401,    -1,   403,    -1,
     404,    -1,   405,    -1,   407,    -1,   406,    -1,   408,    -1,
     409,    -1,   414,    -1,   415,    -1,   417,    -1,   419,    -1,
     420,    -1,   421,    -1,   422,    -1,   423,    -1,   425,    -1,
     426,    -1,   427,    -1,   430,    -1,   434,    -1,   435,    -1,
     437,    -1,   436,    -1,   438,    -1,   441,    -1,   442,    -1,
     443,    -1,   444,    -1,   445,    -1,   447,    -1,   450,    -1,
     452,    -1,   455,    -1,   459,    -1,   462,    -1,   463,    -1,
     465,    -1,   467,    -1,   470,    -1,   472,    -1,   473,    -1,
     474,    -1,   477,    -1,   475,    -1,   476,    -1,   478,    -1,
     480,    -1,   481,    -1,   483,    -1,   489,    -1,   488,    -1,
     490,    -1,   502,    -1,   495,    -1,   505,    -1,   506,    -1,
     508,    -1,   510,    -1,   512,    -1,   513,    -1,   521,    -1,
     520,    -1,   523,    -1,   526,    -1,   530,    -1,   532,    -1,
     536,    -1,   540,    -1,   542,    -1,   543,    -1,   544,    -1,
     545,    -1,   547,    -1,   546,    -1,   550,    -1,   551,    -1,
     552,    -1,   553,    -1,   560,    -1,   555,    -1,   559,    -1,
     556,    -1,   561,    -1,   562,    -1,   565,    -1,   566,    -1,
     577,    -1,   578,    -1,   579,    -1,   568,    -1,   569,    -1,
     570,    -1,   571,    -1,   584,    -1,   585,    -1,   586,    -1,
     203,    -1,   588,    -1,   589,    -1,   592,    -1,   591,    -1,
     598,    -1,   601,    -1,   605,    -1,   606,    -1,   616,    -1,
     621,    -1,   622,    -1,   613,    -1,   624,    -1,   623,    -1,
     625,    -1,   626,    -1,   633,    -1,   636,    -1,   638,    -1,
     641,    -1,   620,    -1,    -1,   493,  1537,  1541,    -1,    -1,
      -1,   493,   532,  1538,  1540,  1539,   197,   670,    -1,  1556,
      -1,  1540,   658,  1556,    -1,    -1,  1557,  1542,  1547,    -1,
      -1,   577,  1543,  1559,    -1,    -1,  1553,  1544,  1545,    -1,
      -1,  1556,  1546,  1547,    -1,   577,  1559,    -1,    -1,   658,
    1548,    -1,    -1,  1549,  1551,    -1,    -1,  1548,   658,  1550,
    1551,    -1,    -1,  1553,  1552,  1556,    -1,  1557,    -1,   211,
      -1,   283,    -1,   490,    -1,    -1,   211,    -1,   283,    -1,
     490,    -1,    -1,   211,   664,    -1,   283,   664,    -1,   490,
     664,    -1,  1558,  1392,  1566,    -1,  1558,  1392,  1566,    -1,
     663,  1530,  1392,  1210,    -1,   663,   663,  1555,  1558,  1392,
    1566,    -1,  1007,  1012,    -1,   351,  1392,  1210,    -1,   351,
    1009,  1014,    -1,   132,   470,  1591,    -1,   132,   470,  1591,
     197,  1533,    -1,   470,  1530,    -1,   403,  1564,  1565,    -1,
    1528,    -1,  1528,   664,  1528,    -1,   132,   664,  1528,    -1,
    1560,    -1,  1561,    -1,  1560,   658,  1561,    -1,  1561,   658,
    1560,    -1,  1562,    -1,   257,   274,  1563,    -1,   431,   378,
      -1,   431,   635,    -1,   431,   588,    -1,   431,    84,    -1,
     452,   431,    -1,   488,    -1,  1392,    -1,   197,  1533,  1392,
      -1,   564,    -1,   403,   656,   564,   657,    -1,   375,   656,
     564,   657,    -1,  1210,    -1,   132,    -1,   376,    -1,    13,
      -1,    37,    -1,    -1,   286,  1569,  1568,  1570,    -1,   558,
      -1,   555,    -1,  1571,    -1,  1570,   658,  1571,    -1,  1521,
    1310,  1572,    -1,   431,    -1,   635,    -1,   635,    89,    -1,
     294,   635,    -1,   431,   283,    -1,    -1,   599,  1574,  1569,
      -1,   216,  1521,   380,  1310,    -1,   216,  1523,    70,    -1,
      -1,   216,  1523,   431,  1576,  1577,  1312,  1328,    -1,  1578,
      -1,  1528,  1579,    -1,   190,    -1,   360,    -1,   190,    -1,
     360,    -1,   415,    -1,   266,    -1,    -1,  1581,  1580,   656,
    1397,   657,    -1,   644,    -1,   204,    -1,   268,    -1,   645,
      -1,   646,    -1,   468,   720,  1583,    -1,  1593,   376,  1592,
    1604,   200,  1607,    -1,  1593,   376,   203,  1604,   200,  1607,
      -1,  1593,   376,   418,  1604,   200,  1607,    -1,    13,  1594,
     658,   212,   383,   200,  1607,    -1,   423,   376,  1533,   200,
    1605,    -1,  1584,   200,  1607,    -1,     7,   383,   197,  1591,
      -1,  1591,    -1,   212,   720,  1586,    -1,  1593,   376,  1592,
    1604,   575,  1606,  1614,  1615,    -1,  1593,   376,   203,  1604,
     575,  1606,  1614,  1615,    -1,  1593,   376,   418,  1604,   575,
    1606,  1614,  1615,    -1,   423,   376,  1533,   575,  1606,  1616,
      -1,  1591,   575,  1606,  1588,    -1,    -1,   630,     7,  1532,
      -1,    -1,   630,     7,   383,    -1,  1591,    -1,  1589,   658,
    1591,    -1,   110,  1209,    -1,  1530,    -1,  1590,    -1,    -1,
     558,    -1,  1595,    -1,    13,  1594,    -1,    -1,   417,    -1,
    1596,    -1,  1595,   658,  1596,    -1,    -1,   485,  1597,  1611,
      -1,    -1,   246,  1598,  1611,    -1,    -1,   602,  1599,  1611,
      -1,    -1,   439,  1600,  1611,    -1,   136,    -1,   604,    -1,
     240,    -1,    14,    -1,   104,    -1,   151,    -1,   177,    -1,
     447,    -1,   499,    -1,   419,    -1,   189,    -1,   212,   383,
      -1,   498,   116,    -1,   550,    -1,   104,   561,   555,    -1,
     286,   555,    -1,   455,   503,    -1,   455,    69,    -1,   104,
     621,    -1,   498,   621,    -1,   104,   473,    -1,    14,   473,
      -1,   104,   605,    -1,   173,    -1,   580,    -1,   104,   556,
      -1,    -1,    18,    -1,  1603,  1601,  1602,    -1,  1603,    -1,
     545,   564,    -1,   258,   564,    -1,    67,   564,    -1,   651,
      -1,  1528,   664,   651,    -1,   651,   664,   651,    -1,  1521,
      -1,  1533,    -1,  1605,   658,  1533,    -1,  1610,    -1,  1606,
     658,  1610,    -1,  1532,    -1,  1607,   658,  1532,    -1,   620,
      -1,   630,    -1,   608,    -1,    20,    -1,  1533,   232,    50,
     564,    -1,  1533,   232,    50,   403,   564,    -1,  1533,   232,
    1608,  1530,    -1,  1533,   232,  1608,  1530,  1609,  1525,    -1,
    1532,    -1,    -1,   656,  1612,   657,    -1,  1612,   658,  1613,
      -1,  1613,    -1,  1528,    -1,    -1,   456,  1602,    -1,   456,
     528,    -1,   456,   636,    -1,   456,   362,    -1,    -1,   630,
    1617,    -1,    -1,   630,   212,   383,    -1,  1617,  1618,    -1,
    1618,    -1,   212,   383,    -1,   318,  1336,    -1,   322,  1336,
      -1,   317,  1336,    -1,   324,  1335,    -1,   323,  1512,    -1,
      -1,    34,  1620,  1623,    -1,   777,    -1,    -1,  1216,    -1,
      -1,   633,    -1,    -1,    18,   366,    59,    -1,    18,    59,
      -1,    -1,   446,    -1,   366,   446,    -1,    -1,   479,    -1,
      85,  1623,  1624,  1625,    -1,   471,  1623,  1624,  1625,    -1,
     471,  1623,   575,  1626,  1528,    -1,   479,  1528,    -1,   446,
     479,  1528,    -1,    -1,  1632,    -1,    -1,   596,  1639,  1633,
    1183,    -1,  1635,    -1,  1632,    -1,    -1,  1636,    -1,    -1,
    1637,  1638,    -1,  1324,  1328,    -1,  1330,    -1,    -1,   146,
      -1,    13,    -1,   485,  1281,  1193,    -1,   656,  1186,   657,
    1635,    -1,  1640,    -1,    -1,  1641,   596,  1639,  1642,  1640,
      -1,  1644,  1641,  1645,    -1,    -1,    -1,    -1,  1647,    -1,
    1647,  1648,    -1,  1648,    -1,   541,    -1,   223,    -1,   146,
      -1,   524,    -1,   519,    -1,   520,    -1,   522,    -1,    13,
      -1,  1654,  1650,    -1,  1653,  1651,    -1,  1655,  1652,  1657,
      -1,  1657,    -1,  1665,    -1,  1678,    -1,  1672,    -1,   708,
      -1,  1657,    -1,  1665,    -1,  1678,    -1,  1672,    -1,  1670,
      -1,   708,    -1,  1653,    -1,  1654,    -1,    -1,   133,   644,
    1532,    -1,    12,   644,   589,    -1,    12,   644,   331,    -1,
      12,   644,   562,    -1,    -1,   525,   484,   133,    -1,   525,
     484,   252,    -1,    -1,  1656,   621,   944,  1521,  1658,  1659,
      20,  1661,    -1,    -1,   656,  1660,   657,    -1,  1528,    -1,
    1660,   658,  1528,    -1,    -1,  1662,  1663,  1664,    -1,   485,
    1188,    -1,   656,  1184,   657,  1634,    -1,    -1,   630,    66,
     383,    -1,   630,    55,    66,   383,    -1,   630,   283,    66,
     383,    -1,    -1,    -1,    -1,    -1,   580,  1204,   944,  1666,
     721,   835,   836,   376,  1204,  1667,  1521,   197,  1204,  1668,
     156,   476,  1669,   776,    -1,    11,  1671,    -1,  1671,    -1,
     203,   944,  1528,   465,   957,   511,  1525,    -1,    -1,    -1,
      -1,    -1,    -1,   203,   944,   721,   656,  1673,   732,   657,
    1674,   465,  1675,  1005,  1676,   723,  1677,   776,    -1,    -1,
      -1,    -1,    -1,   418,   944,   721,  1679,   656,  1680,   736,
     657,  1681,   723,  1682,   776,    -1,   637,  1685,  1684,  1686,
      -1,   637,   161,  1684,  1688,    -1,   637,   413,  1684,    -1,
     637,    85,  1684,  1687,    -1,   637,   471,  1684,    -1,   637,
     435,    -1,  1507,    -1,  1507,   658,  1507,    -1,  1507,   658,
    1507,   658,  1336,    -1,    34,    -1,   531,    -1,    -1,   260,
      -1,   462,    -1,    -1,   377,   405,    -1,    -1,    -1,   551,
    1689,  1690,    -1,    -1,   197,   334,    -1,   248,   407,  1528,
     511,  1525,    -1,   248,   511,  1525,    -1,   595,   407,  1528,
      -1,   595,   511,  1525,    -1,   643,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  2023,  2023,  2033,  2032,  2057,  2064,  2066,  2070,  2071,
    2072,  2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,
    2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
    2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,  2104,  2105,
    2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,
    2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,  2124,  2125,
    2126,  2127,  2128,  2129,  2130,  2131,  2132,  2136,  2145,  2146,
    2150,  2159,  2165,  2175,  2174,  2184,  2186,  2190,  2191,  2195,
    2209,  2208,  2225,  2224,  2233,  2234,  2238,  2242,  2246,  2250,
    2254,  2258,  2263,  2267,  2271,  2275,  2279,  2283,  2288,  2292,
    2297,  2324,  2328,  2332,  2337,  2340,  2342,  2343,  2347,  2353,
    2355,  2356,  2360,  2366,  2368,  2369,  2373,  2380,  2384,  2399,
    2403,  2409,  2415,  2421,  2431,  2435,  2439,  2453,  2452,  2491,
    2488,  2501,  2499,  2511,  2509,  2520,  2519,  2532,  2531,  2540,
    2545,  2551,  2555,  2559,  2559,  2566,  2565,  2577,  2578,  2582,
    2587,  2592,  2597,  2602,  2607,  2612,  2620,  2619,  2651,  2650,
    2657,  2664,  2665,  2671,  2677,  2687,  2693,  2699,  2701,  2708,
    2709,  2713,  2723,  2724,  2732,  2732,  2776,  2790,  2801,  2819,
    2820,  2824,  2825,  2830,  2832,  2834,  2836,  2838,  2840,  2842,
    2848,  2849,  2853,  2857,  2865,  2864,  2877,  2879,  2882,  2884,
    2888,  2892,  2899,  2901,  2905,  2906,  2911,  2910,  2943,  2945,
    2949,  2950,  2954,  2958,  2959,  2960,  2961,  2965,  2966,  2970,
    2971,  2976,  2979,  2998,  2997,  3069,  3082,  3081,  3140,  3162,
    3162,  3181,  3182,  3187,  3189,  3194,  3209,  3217,  3221,  3240,
    3241,  3245,  3249,  3255,  3261,  3267,  3276,  3290,  3305,  3311,
    3312,  3318,  3321,  3325,  3333,  3350,  3352,  3370,  3376,  3378,
    3380,  3382,  3384,  3386,  3388,  3390,  3392,  3394,  3396,  3398,
    3403,  3418,  3434,  3435,  3440,  3446,  3455,  3461,  3470,  3478,
    3487,  3496,  3498,  3507,  3512,  3518,  3527,  3535,  3537,  3539,
    3541,  3543,  3545,  3547,  3549,  3551,  3553,  3555,  3557,  3559,
    3564,  3576,  3591,  3592,  3596,  3597,  3598,  3599,  3600,  3601,
    3602,  3603,  3604,  3605,  3606,  3610,  3611,  3612,  3613,  3618,
    3617,  3628,  3628,  3681,  3680,  3705,  3755,  3796,  3815,  3814,
    3834,  3851,  3853,  3854,  3858,  3872,  3889,  3891,  3907,  3889,
    3926,  3928,  3929,  3934,  3933,  4003,  4005,  4003,  4014,  4019,
    4020,  4024,  4025,  4030,  4034,  4029,  4055,  4059,  4054,  4078,
    4088,  4092,  4093,  4098,  4097,  4119,  4118,  4128,  4127,  4138,
    4138,  4178,  4193,  4192,  4224,  4223,  4243,  4257,  4266,  4265,
    4273,  4272,  4281,  4280,  4291,  4290,  4299,  4298,  4308,  4307,
    4318,  4320,  4325,  4327,  4329,  4346,  4351,  4357,  4364,  4365,
    4373,  4379,  4388,  4394,  4400,  4401,  4405,  4405,  4410,  4411,
    4412,  4416,  4417,  4418,  4422,  4426,  4427,  4428,  4432,  4433,
    4434,  4435,  4436,  4437,  4438,  4439,  4443,  4447,  4448,  4449,
    4453,  4454,  4455,  4456,  4457,  4461,  4465,  4466,  4467,  4471,
    4472,  4473,  4474,  4475,  4476,  4477,  4481,  4485,  4486,  4487,
    4491,  4492,  4493,  4498,  4506,  4514,  4522,  4535,  4548,  4553,
    4558,  4566,  4574,  4582,  4590,  4598,  4606,  4614,  4624,  4634,
    4644,  4646,  4650,  4655,  4665,  4666,  4709,  4708,  4711,  4717,
    4717,  4718,  4732,  4733,  4737,  4739,  4738,  4742,  4741,  4747,
    4784,  4785,  4790,  4789,  4808,  4823,  4822,  4839,  4843,  4851,
    4850,  4853,  4855,  4857,  4859,  4864,  4865,  4871,  4872,  4889,
    4890,  4894,  4895,  4899,  4915,  4925,  4936,  4945,  4946,  4959,
    4961,  4960,  4965,  4963,  4974,  4975,  4979,  4994,  5010,  5011,
    5024,  5033,  5055,  5056,  5061,  5060,  5085,  5097,  5113,  5112,
    5127,  5126,  5143,  5165,  5169,  5198,  5210,  5211,  5216,  5227,
    5215,  5252,  5253,  5257,  5270,  5291,  5304,  5330,  5331,  5336,
    5335,  5373,  5382,  5383,  5387,  5388,  5392,  5394,  5400,  5406,
    5408,  5410,  5412,  5414,  5416,  5426,  5441,  5425,  5455,  5456,
    5460,  5461,  5465,  5466,  5470,  5471,  5476,  5479,  5487,  5490,
    5497,  5501,  5507,  5509,  5513,  5514,  5518,  5519,  5520,  5524,
    5529,  5534,  5539,  5544,  5549,  5554,  5559,  5574,  5580,  5595,
    5600,  5615,  5621,  5639,  5644,  5649,  5654,  5659,  5664,  5670,
    5669,  5695,  5696,  5697,  5702,  5707,  5712,  5714,  5716,  5718,
    5724,  5729,  5734,  5742,  5750,  5756,  5765,  5773,  5790,  5811,
    5822,  5823,  5824,  5825,  5826,  5827,  5828,  5832,  5833,  5834,
    5838,  5839,  5840,  5841,  5846,  5853,  5854,  5858,  5859,  5863,
    5864,  5869,  5868,  5876,  5875,  5883,  5882,  5890,  5889,  5899,
    5896,  5907,  5905,  5914,  5913,  5948,  5951,  5953,  5957,  5961,
    5962,  5966,  5971,  5984,  5970,  6003,  6004,  6010,  6011,  6016,
    6019,  6023,  6030,  6031,  6035,  6036,  6040,  6046,  6052,  6056,
    6069,  6086,  6087,  6088,  6103,  6108,  6112,  6117,  6122,  6126,
    6131,  6136,  6142,  6147,  6153,  6157,  6162,  6167,  6185,  6187,
    6190,  6207,  6210,  6215,  6220,  6231,  6236,  6241,  6246,  6248,
    6250,  6252,  6254,  6256,  6258,  6260,  6262,  6264,  6266,  6268,
    6277,  6278,  6279,  6285,  6286,  6287,  6288,  6289,  6293,  6297,
    6298,  6302,  6303,  6307,  6308,  6309,  6310,  6311,  6315,  6316,
    6317,  6318,  6319,  6323,  6328,  6330,  6336,  6338,  6346,  6347,
    6349,  6354,  6363,  6364,  6368,  6369,  6373,  6374,  6375,  6379,
    6380,  6381,  6382,  6385,  6386,  6390,  6391,  6395,  6396,  6400,
    6401,  6405,  6406,  6407,  6408,  6415,  6416,  6422,  6428,  6434,
    6440,  6441,  6448,  6456,  6464,  6470,  6479,  6494,  6500,  6505,
    6506,  6510,  6515,  6519,  6520,  6524,  6525,  6529,  6535,  6539,
    6540,  6544,  6552,  6553,  6557,  6558,  6562,  6563,  6567,  6568,
    6569,  6577,  6578,  6579,  6580,  6581,  6585,  6586,  6591,  6590,
    6603,  6604,  6608,  6611,  6612,  6613,  6614,  6618,  6626,  6633,
    6634,  6638,  6648,  6649,  6653,  6654,  6657,  6659,  6663,  6675,
    6676,  6680,  6687,  6700,  6701,  6703,  6705,  6711,  6716,  6722,
    6728,  6735,  6745,  6746,  6747,  6748,  6749,  6753,  6754,  6758,
    6759,  6763,  6764,  6768,  6769,  6770,  6774,  6775,  6779,  6783,
    6795,  6796,  6800,  6801,  6805,  6806,  6810,  6811,  6815,  6816,
    6820,  6821,  6825,  6826,  6830,  6831,  6832,  6835,  6837,  6842,
    6844,  6846,  6854,  6862,  6868,  6876,  6877,  6881,  6885,  6886,
    6896,  6897,  6898,  6902,  6906,  6913,  6919,  6931,  6932,  6936,
    6937,  6941,  6943,  6952,  6966,  6951,  6986,  6985,  6999,  7008,
    7007,  7023,  7022,  7038,  7037,  7053,  7047,  7064,  7063,  7098,
    7103,  7108,  7113,  7119,  7118,  7127,  7128,  7129,  7130,  7134,
    7135,  7147,  7148,  7152,  7153,  7156,  7158,  7166,  7174,  7176,
    7178,  7179,  7187,  7188,  7194,  7203,  7201,  7214,  7227,  7226,
    7239,  7237,  7250,  7257,  7267,  7268,  7295,  7302,  7306,  7312,
    7310,  7329,  7331,  7336,  7344,  7343,  7359,  7363,  7362,  7374,
    7375,  7379,  7395,  7396,  7400,  7408,  7412,  7417,  7422,  7429,
    7436,  7446,  7456,  7467,  7477,  7483,  7489,  7498,  7508,  7524,
    7538,  7548,  7552,  7557,  7558,  7561,  7563,  7564,  7565,  7566,
    7569,  7574,  7582,  7587,  7595,  7596,  7600,  7601,  7605,  7605,
    7608,  7610,  7614,  7615,  7619,  7620,  7628,  7629,  7630,  7634,
    7635,  7640,  7648,  7649,  7650,  7651,  7656,  7655,  7665,  7664,
    7671,  7678,  7688,  7705,  7708,  7715,  7719,  7726,  7730,  7734,
    7741,  7741,  7747,  7748,  7752,  7753,  7754,  7758,  7759,  7768,
    7775,  7776,  7781,  7780,  7792,  7793,  7794,  7798,  7799,  7799,
    7804,  7803,  7824,  7825,  7829,  7830,  7834,  7835,  7836,  7840,
    7841,  7846,  7845,  7866,  7867,  7871,  7876,  7877,  7884,  7886,
    7890,  7892,  7891,  7903,  7905,  7904,  7917,  7918,  7923,  7932,
    7933,  7934,  7938,  7945,  7955,  7963,  7964,  7964,  7968,  7967,
    7990,  7991,  7995,  7996,  8000,  8001,  8002,  8003,  8004,  8005,
    8009,  8010,  8015,  8014,  8035,  8036,  8037,  8042,  8041,  8047,
    8054,  8060,  8069,  8070,  8074,  8088,  8087,  8100,  8101,  8105,
    8106,  8110,  8120,  8130,  8131,  8136,  8135,  8146,  8147,  8151,
    8152,  8156,  8166,  8177,  8176,  8184,  8184,  8193,  8194,  8199,
    8200,  8209,  8218,  8219,  8223,  8223,  8235,  8240,  8240,  8249,
    8254,  8253,  8268,  8272,  8273,  8294,  8294,  8308,  8319,  8322,
    8324,  8328,  8334,  8341,  8343,  8351,  8352,  8356,  8357,  8374,
    8393,  8395,  8402,  8413,  8414,  8415,  8429,  8434,  8456,  8462,
    8468,  8474,  8475,  8476,  8477,  8478,  8482,  8483,  8484,  8488,
    8489,  8490,  8494,  8495,  8500,  8551,  8558,  8601,  8607,  8613,
    8619,  8625,  8631,  8637,  8643,  8647,  8653,  8659,  8665,  8671,
    8677,  8681,  8687,  8696,  8702,  8710,  8716,  8726,  8732,  8741,
    8751,  8758,  8768,  8774,  8783,  8787,  8793,  8799,  8805,  8811,
    8817,  8823,  8829,  8835,  8841,  8847,  8853,  8859,  8865,  8871,
    8875,  8876,  8880,  8881,  8885,  8886,  8890,  8891,  8895,  8896,
    8897,  8898,  8899,  8900,  8904,  8905,  8910,  8916,  8920,  8927,
    8934,  8941,  8948,  8955,  8961,  8960,  8968,  8975,  8982,  8990,
    9001,  9023,  9030,  9038,  9039,  9040,  9041,  9042,  9043,  9054,
    9055,  9056,  9057,  9058,  9064,  9068,  9074,  9080,  9086,  9092,
    9094,  9101,  9108,  9114,  9138,  9148,  9155,  9163,  9169,  9176,
    9182,  9192,  9199,  9215,  9221,  9227,  9236,  9245,  9251,  9257,
    9263,  9269,  9283,  9294,  9300,  9306,  9312,  9318,  9324,  9331,
    9338,  9344,  9350,  9356,  9362,  9368,  9374,  9380,  9386,  9392,
    9400,  9421,  9428,  9434,  9441,  9448,  9455,  9462,  9468,  9474,
    9481,  9487,  9494,  9500,  9506,  9512,  9518,  9524,  9542,  9548,
    9554,  9561,  9568,  9576,  9583,  9590,  9597,  9604,  9621,  9627,
    9633,  9639,  9645,  9652,  9658,  9664,  9670,  9676,  9682,  9688,
    9695,  9703,  9709,  9715,  9721,  9727,  9735,  9741,  9755,  9761,
    9767,  9775,  9787,  9794,  9809,  9815,  9822,  9829,  9836,  9843,
    9850,  9854,  9874,  9873,  9945,  9983,  9985,  9990,  9991,  9995,
    9996, 10000, 10001, 10005, 10012, 10020, 10047, 10053, 10059, 10065,
   10071, 10077, 10086, 10093, 10095, 10092, 10102, 10113, 10119, 10125,
   10131, 10137, 10143, 10149, 10155, 10161, 10168, 10167, 10187, 10186,
   10198, 10208, 10216, 10232, 10233, 10238, 10243, 10246, 10249, 10248,
   10264, 10266, 10272, 10271, 10288, 10291, 10290, 10294, 10296, 10298,
   10300, 10302, 10304, 10306, 10308, 10314, 10320, 10323, 10322, 10328,
   10329, 10333, 10340, 10348, 10349, 10353, 10360, 10368, 10369, 10373,
   10374, 10378, 10386, 10397, 10398, 10410, 10421, 10422, 10428, 10429,
   10449, 10453, 10451, 10469, 10467, 10478, 10488, 10486, 10504, 10503,
   10513, 10524, 10522, 10541, 10540, 10551, 10563, 10564, 10565, 10569,
   10570, 10578, 10579, 10583, 10598, 10598, 10613, 10649, 10734, 10745,
   10742, 10767, 10780, 10780, 10796, 10795, 10816, 10833, 10816, 10840,
   10844, 10867, 10868, 10873, 10876, 10877, 10878, 10882, 10883, 10888,
   10887, 10893, 10892, 10900, 10901, 10904, 10906, 10906, 10910, 10910,
   10915, 10916, 10920, 10922, 10927, 10928, 10932, 10943, 10956, 10957,
   10958, 10959, 10960, 10961, 10962, 10963, 10964, 10965, 10966, 10967,
   10971, 10972, 10973, 10974, 10975, 10976, 10977, 10978, 10979, 10983,
   10984, 10985, 10986, 10989, 10991, 10992, 10996, 10997, 11005, 11007,
   11011, 11013, 11012, 11026, 11029, 11028, 11043, 11049, 11063, 11065,
   11069, 11071, 11076, 11077, 11094, 11116, 11120, 11121, 11125, 11137,
   11139, 11144, 11143, 11193, 11195, 11200, 11201, 11202, 11206, 11207,
   11211, 11224, 11231, 11236, 11243, 11250, 11257, 11267, 11294, 11298,
   11304, 11310, 11319, 11327, 11331, 11338, 11339, 11343, 11344, 11345,
   11349, 11350, 11351, 11352, 11353, 11354, 11358, 11359, 11360, 11361,
   11362, 11366, 11367, 11368, 11369, 11370, 11374, 11375, 11376, 11377,
   11378, 11382, 11387, 11388, 11392, 11393, 11397, 11399, 11398, 11436,
   11437, 11441, 11442, 11446, 11456, 11456, 11467, 11468, 11471, 11491,
   11495, 11509, 11510, 11515, 11514, 11524, 11534, 11523, 11536, 11549,
   11561, 11560, 11578, 11577, 11586, 11586, 11603, 11609, 11624, 11640,
   11648, 11652, 11657, 11656, 11665, 11670, 11676, 11681, 11686, 11694,
   11695, 11699, 11710, 11723, 11724, 11728, 11740, 11744, 11753, 11756,
   11763, 11764, 11772, 11780, 11771, 11790, 11797, 11789, 11807, 11815,
   11816, 11824, 11828, 11829, 11840, 11841, 11845, 11854, 11855, 11856,
   11858, 11857, 11868, 11870, 11874, 11875, 11877, 11876, 11880, 11879,
   11885, 11886, 11890, 11891, 11895, 11905, 11906, 11910, 11911, 11916,
   11915, 11929, 11930, 11934, 11939, 11947, 11948, 11956, 11958, 11958,
   11966, 11974, 11965, 11996, 11997, 12001, 12009, 12010, 12014, 12024,
   12025, 12032, 12031, 12047, 12058, 12046, 12061, 12060, 12072, 12071,
   12084, 12086, 12090, 12091, 12095, 12108, 12124, 12125, 12129, 12130,
   12134, 12135, 12136, 12141, 12140, 12161, 12163, 12166, 12168, 12171,
   12172, 12175, 12179, 12183, 12187, 12191, 12195, 12199, 12203, 12207,
   12215, 12218, 12228, 12227, 12243, 12250, 12258, 12266, 12274, 12282,
   12290, 12297, 12304, 12310, 12312, 12314, 12323, 12327, 12332, 12331,
   12338, 12337, 12342, 12351, 12358, 12363, 12368, 12373, 12375, 12377,
   12379, 12381, 12383, 12390, 12398, 12400, 12408, 12415, 12422, 12429,
   12435, 12440, 12448, 12456, 12460, 12465, 12472, 12477, 12484, 12491,
   12497, 12504, 12511, 12516, 12521, 12526, 12533, 12555, 12557, 12559,
   12564, 12565, 12568, 12570, 12574, 12575, 12579, 12580, 12584, 12585,
   12589, 12590, 12594, 12595, 12599, 12600, 12608, 12620, 12619, 12635,
   12634, 12644, 12645, 12646, 12647, 12648, 12652, 12653, 12657, 12664,
   12665, 12666, 12670, 12671, 12683, 12684, 12685, 12700, 12699, 12712,
   12711, 12723, 12727, 12728, 12741, 12744, 12743, 12755, 12756, 12761,
   12763, 12765, 12767, 12769, 12771, 12779, 12781, 12783, 12785, 12790,
   12792, 12800, 12802, 12804, 12806, 12822, 12823, 12827, 12828, 12832,
   12831, 12841, 12842, 12846, 12846, 12850, 12849, 12855, 12859, 12860,
   12864, 12865, 12873, 12872, 12883, 12887, 12891, 12904, 12903, 12918,
   12919, 12920, 12923, 12924, 12925, 12926, 12934, 12938, 12947, 12953,
   12965, 12976, 12986, 12996, 12964, 13004, 13005, 13009, 13010, 13014,
   13015, 13023, 13027, 13028, 13029, 13032, 13034, 13038, 13039, 13043,
   13048, 13055, 13060, 13067, 13069, 13073, 13074, 13078, 13083, 13091,
   13092, 13095, 13097, 13105, 13106, 13110, 13111, 13112, 13116, 13118,
   13123, 13124, 13133, 13134, 13138, 13139, 13143, 13156, 13180, 13192,
   13199, 13218, 13226, 13231, 13244, 13253, 13269, 13286, 13287, 13288,
   13296, 13297, 13298, 13299, 13313, 13319, 13325, 13331, 13337, 13343,
   13361, 13371, 13381, 13387, 13396, 13408, 13414, 13420, 13436, 13437,
   13441, 13450, 13465, 13469, 13512, 13516, 13533, 13537, 13609, 13633,
   13663, 13664, 13674, 13681, 13685, 13691, 13697, 13707, 13713, 13722,
   13732, 13733, 13761, 13775, 13789, 13804, 13805, 13815, 13816, 13826,
   13827, 13828, 13832, 13845, 13875, 13885, 13885, 13887, 13897, 13898,
   13899, 13900, 13901, 13902, 13903, 13904, 13905, 13906, 13907, 13908,
   13909, 13910, 13911, 13912, 13913, 13914, 13915, 13916, 13917, 13918,
   13919, 13920, 13921, 13922, 13923, 13924, 13925, 13926, 13927, 13928,
   13929, 13930, 13931, 13932, 13933, 13934, 13935, 13936, 13937, 13938,
   13939, 13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947, 13948,
   13949, 13950, 13951, 13952, 13953, 13954, 13955, 13956, 13957, 13967,
   13968, 13969, 13970, 13971, 13972, 13973, 13974, 13975, 13976, 13977,
   13978, 13979, 13980, 13981, 13982, 13983, 13984, 13985, 13986, 13987,
   13988, 13989, 13990, 13991, 13992, 13993, 13994, 13995, 13996, 13997,
   13998, 13999, 14000, 14001, 14002, 14003, 14004, 14005, 14006, 14007,
   14008, 14009, 14010, 14011, 14012, 14013, 14014, 14015, 14016, 14021,
   14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031,
   14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039, 14040, 14041,
   14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049, 14050, 14051,
   14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059, 14060, 14061,
   14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069, 14070, 14071,
   14072, 14073, 14074, 14075, 14076, 14077, 14078, 14079, 14080, 14081,
   14082, 14083, 14084, 14085, 14086, 14087, 14088, 14089, 14090, 14091,
   14092, 14093, 14094, 14095, 14096, 14097, 14098, 14099, 14100, 14101,
   14102, 14103, 14104, 14105, 14106, 14107, 14108, 14109, 14110, 14111,
   14112, 14113, 14114, 14115, 14116, 14117, 14118, 14119, 14120, 14121,
   14122, 14123, 14124, 14125, 14126, 14127, 14128, 14129, 14130, 14131,
   14132, 14133, 14134, 14135, 14136, 14137, 14138, 14139, 14140, 14141,
   14142, 14143, 14144, 14145, 14146, 14147, 14148, 14149, 14150, 14151,
   14152, 14153, 14154, 14155, 14156, 14157, 14158, 14159, 14160, 14161,
   14162, 14163, 14164, 14165, 14166, 14167, 14168, 14169, 14170, 14171,
   14172, 14173, 14174, 14175, 14176, 14177, 14178, 14179, 14180, 14181,
   14182, 14183, 14184, 14185, 14186, 14187, 14188, 14189, 14190, 14191,
   14192, 14193, 14194, 14195, 14196, 14197, 14198, 14199, 14200, 14201,
   14202, 14203, 14204, 14205, 14206, 14207, 14208, 14209, 14210, 14211,
   14212, 14213, 14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221,
   14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231,
   14232, 14233, 14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241,
   14242, 14243, 14244, 14245, 14246, 14247, 14248, 14249, 14250, 14251,
   14252, 14253, 14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261,
   14262, 14263, 14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271,
   14272, 14273, 14274, 14275, 14276, 14277, 14278, 14279, 14291, 14290,
   14303, 14311, 14302, 14328, 14329, 14334, 14333, 14340, 14339, 14349,
   14348, 14359, 14358, 14364, 14372, 14374, 14379, 14379, 14388, 14387,
   14401, 14400, 14405, 14409, 14410, 14411, 14415, 14416, 14417, 14418,
   14422, 14423, 14424, 14425, 14430, 14454, 14480, 14491, 14503, 14517,
   14532, 14551, 14568, 14580, 14588, 14604, 14630, 14667, 14681, 14682,
   14683, 14684, 14688, 14706, 14724, 14725, 14729, 14730, 14731, 14732,
   14736, 14750, 14754, 14755, 14756, 14766, 14767, 14768, 14774, 14780,
   14792, 14791, 14804, 14805, 14809, 14810, 14814, 14829, 14830, 14831,
   14836, 14837, 14842, 14841, 14858, 14867, 14877, 14876, 14907, 14908,
   14912, 14913, 14917, 14918, 14919, 14920, 14922, 14921, 14934, 14935,
   14936, 14937, 14938, 14944, 14949, 14955, 14966, 14977, 14981, 14988,
   14997, 14999, 15004, 15009, 15016, 15028, 15040, 15047, 15059, 15060,
   15063, 15064, 15067, 15072, 15080, 15090, 15109, 15112, 15114, 15118,
   15119, 15126, 15128, 15132, 15133, 15138, 15137, 15141, 15140, 15144,
   15143, 15147, 15146, 15149, 15150, 15151, 15152, 15153, 15154, 15155,
   15156, 15157, 15158, 15159, 15160, 15161, 15162, 15163, 15164, 15165,
   15166, 15167, 15168, 15169, 15170, 15171, 15172, 15173, 15174, 15178,
   15179, 15183, 15184, 15188, 15195, 15202, 15212, 15223, 15232, 15241,
   15253, 15258, 15266, 15271, 15279, 15284, 15291, 15291, 15292, 15292,
   15295, 15302, 15307, 15313, 15319, 15325, 15329, 15333, 15334, 15338,
   15366, 15368, 15372, 15376, 15380, 15387, 15388, 15392, 15393, 15397,
   15398, 15402, 15403, 15409, 15415, 15421, 15427, 15437, 15436, 15446,
   15455, 15456, 15460, 15461, 15466, 15467, 15468, 15473, 15474, 15475,
   15479, 15480, 15484, 15496, 15505, 15515, 15524, 15538, 15539, 15544,
   15543, 15559, 15560, 15564, 15565, 15569, 15569, 15590, 15591, 15595,
   15596, 15597, 15601, 15606, 15614, 15617, 15615, 15630, 15637, 15658,
   15682, 15684, 15688, 15689, 15693, 15694, 15702, 15703, 15704, 15705,
   15711, 15717, 15727, 15729, 15731, 15736, 15737, 15738, 15739, 15740,
   15744, 15745, 15746, 15747, 15748, 15749, 15759, 15760, 15765, 15778,
   15794, 15796, 15798, 15804, 15805, 15807, 15813, 15812, 15831, 15832,
   15836, 15842, 15851, 15851, 15875, 15876, 15881, 15882, 15884, 15886,
   15900, 15909, 15915, 15920, 15897, 15970, 15971, 15975, 15995, 16016,
   16020, 16026, 16032, 15991, 16091, 16103, 16112, 16116, 16090, 16133,
   16137, 16141, 16145, 16149, 16153, 16160, 16167, 16174, 16184, 16185,
   16189, 16190, 16191, 16195, 16196, 16201, 16203, 16202, 16208, 16209,
   16213, 16220, 16230, 16236, 16247
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "ATOMIC_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM",
  "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE", "CURRENT_POS_SYM",
  "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_DOMAIN_IDS_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM",
  "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY",
  "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF_SYM", "IGNORE_DOMAIN_IDS_SYM", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM",
  "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES",
  "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_STATEMENT_TIME_SYM", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD_SYM", "ON", "ONE_SYM", "ONLY_SYM",
  "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD_SYM", "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM",
  "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM",
  "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM",
  "PRIVILEGES", "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM",
  "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM",
  "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM",
  "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM",
  "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES",
  "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "REF_SYSTEM_ID_SYM",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM", "STATEMENT_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRANSACTIONAL_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM",
  "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM",
  "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM",
  "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM",
  "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL",
  "IMPOSSIBLE_ACTION", "'='", "'>'", "'<'", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "do_domain_id_list", "do_domain_id",
  "ignore_domain_id_list", "ignore_domain_id", "master_file_def",
  "optional_connection_name", "connection_name", "create", "$@5", "$@6",
  "$@7", "$@8", "$@9", "$@10", "$@11", "server_def", "$@12",
  "server_options_list", "server_option", "event_tail", "$@13",
  "ev_schedule_time", "$@14", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@15", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@16",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_param_name_and_type", "@17", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@18", "$@19",
  "sp_cursor_stmt", "$@20", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_compound_ok", "sp_proc_stmt_if", "$@21",
  "sp_proc_stmt_statement", "$@22", "sp_proc_stmt_return", "$@23",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@24", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@25", "$@26", "$@27", "sp_elseifs",
  "case_stmt_specification", "$@28", "case_stmt_body", "$@29", "$@30",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@31", "$@32", "searched_when_clause", "$@33",
  "$@34", "else_clause_opt", "sp_opt_label", "sp_labeled_block", "$@35",
  "sp_unlabeled_block", "$@36", "sp_unlabeled_block_not_atomic", "$@37",
  "sp_block_content", "$@38", "loop_body", "while_body", "$@39",
  "repeat_body", "$@40", "pop_sp_label", "pop_sp_empty_label",
  "sp_labeled_control", "$@41", "$@42", "$@43", "sp_unlabeled_control",
  "$@44", "$@45", "$@46", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@47", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@48", "$@49", "create_like", "opt_create_select", "$@50", "$@51",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@52",
  "have_partitioning", "partition_entry", "$@53", "partition",
  "part_type_def", "$@54", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@55",
  "$@56", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@57", "part_name", "opt_part_values", "$@58", "$@59", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@60", "$@61",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@62", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@63", "$@64", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option",
  "opt_if_not_exists_table_element", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@65", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "udf_type", "create_field_list", "field_list",
  "field_list_item", "column_def", "key_def", "$@66", "$@67", "$@68",
  "$@69", "$@70", "$@71", "$@72", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@73",
  "$@74", "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "field_type", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "srid_option", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "charset_or_alias", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@75", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_unique", "fulltext", "spatial",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "opt_USING_key_algorithm", "opt_key_algorithm_clause", "key_using_alg",
  "all_key_opt", "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@76", "$@77", "$@78", "$@79", "$@80", "$@81",
  "$@82", "$@83", "$@84", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@85", "$@86", "$@87", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@88",
  "add_part_extra", "reorg_partition_rule", "$@89", "reorg_parts_rule",
  "$@90", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "alter_options", "$@91", "alter_options_part2",
  "alter_option_list", "alter_option", "opt_restrict", "opt_place",
  "opt_to", "slave", "$@92", "$@93", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@94",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@95", "opt_checksum_type",
  "repair_table_or_view", "$@96", "repair", "$@97", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@98", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@99", "persistent_index_stat_spec",
  "$@100", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@101", "check", "$@102",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@103", "opt_no_write_to_binlog",
  "rename", "$@104", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@105", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@106", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@107", "cache_keys_spec", "$@108", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren", "$@109",
  "select_paren_derived", "$@110", "select_init2", "$@111", "select_part2",
  "select_options_and_item_list", "$@112", "table_expression",
  "from_clause", "opt_from_clause", "table_reference_list",
  "select_options", "select_option_list", "select_option",
  "opt_select_lock_type", "select_item_list", "select_item",
  "remember_tok_start", "remember_name", "remember_end", "select_alias",
  "opt_default_time_precision", "opt_time_precision", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type", "$@113",
  "dyncall_create_element", "dyncall_create_list", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@114", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@115", "$@116", "$@117", "variable", "$@118",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "$@119", "gorder_list", "in_sum_expr", "$@120",
  "cast_type", "$@121", "$@122", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@123", "$@124", "$@125", "$@126", "$@127", "$@128",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "$@129", "select_derived_union", "$@130",
  "select_init2_derived", "select_part2_derived", "$@131",
  "select_derived", "$@132", "select_derived2", "$@133", "$@134",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@135",
  "$@136", "index_hints_list", "opt_index_hints_list", "$@137",
  "opt_key_definition", "$@138", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "opt_where_clause", "$@139", "opt_having_clause", "$@140", "opt_escape",
  "opt_group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@141", "order_list", "order_dir", "opt_limit_clause",
  "limit_clause_init", "limit_clause", "limit_options", "limit_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "opt_procedure_clause", "$@142", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@143",
  "select_var_list", "select_var_ident", "select_outvar", "opt_into",
  "into", "$@144", "into_destination", "$@145", "$@146", "do", "$@147",
  "drop", "$@148", "$@149", "$@150", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists_table_element", "opt_if_exists",
  "opt_temporary", "insert", "$@151", "$@152", "replace", "$@153", "$@154",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "$@155", "fields", "insert_values", "$@156",
  "$@157", "values_list", "ident_eq_list", "ident_eq_value", "equal",
  "opt_equal", "no_braces", "$@158", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "$@159", "update", "$@160",
  "$@161", "update_list", "update_elem", "insert_update_list",
  "insert_update_elem", "opt_low_priority", "delete", "$@162",
  "single_multi", "$@163", "$@164", "$@165", "$@166",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@167", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@168", "show_param",
  "$@169", "$@170", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@171", "$@172", "explainable_command",
  "describe_command", "analyze_stmt_command", "opt_extended_describe",
  "opt_format_json", "opt_describe_column", "flush", "$@173",
  "flush_options", "$@174", "opt_flush_lock", "flush_lock", "$@175",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@176", "reset_options",
  "reset_option", "$@177", "$@178", "slave_reset_options",
  "master_reset_options", "purge", "$@179", "purge_options",
  "purge_option", "kill", "$@180", "kill_type", "kill_option", "kill_expr",
  "shutdown", "use", "load", "$@181", "$@182", "$@183", "$@184",
  "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "hex_or_bin_String", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user_maybe_role", "user_or_role", "user", "keyword",
  "keyword_sp", "set", "$@185", "$@186", "$@187",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@188", "$@189", "$@190",
  "start_option_value_list_following_option_type", "$@191",
  "option_value_list_continued", "option_value_list", "$@192", "$@193",
  "option_value", "$@194", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "opt_for_user", "text_or_password", "set_expr_or_default", "lock",
  "$@195", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "$@196", "handler", "$@197",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@198", "handler_rkey_mode", "revoke", "revoke_command",
  "admin_option_for_role", "grant", "grant_command", "opt_with_admin",
  "opt_with_admin_option", "role_list", "current_role", "grant_role",
  "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@199", "$@200", "$@201",
  "$@202", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "user_and_role_list",
  "via_or_with", "using_or_as", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "require_clause", "grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin",
  "$@203", "compound_statement", "opt_not", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", "savepoint",
  "release", "union_clause", "union_list", "$@204", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@205",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@206", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "$@207", "view_list_opt", "view_list", "view_select",
  "$@208", "view_select_aux", "view_check_option", "trigger_tail", "$@209",
  "$@210", "$@211", "$@212", "udf_tail", "udf_tail2", "sf_tail", "$@213",
  "$@214", "$@215", "$@216", "$@217", "sp_tail", "$@218", "$@219", "$@220",
  "$@221", "xa", "xid", "begin_or_start", "opt_join_or_resume",
  "opt_one_phase", "opt_suspend", "$@222", "opt_migrate", "install",
  "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,    61,    62,    60,   124,    38,    45,
      43,    42,    47,    37,    94,   126,    40,    41,    44,    33,
     123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   666,   667,   668,   667,   667,   669,   669,   670,   670,
     670,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   671,   671,   671,
     671,   671,   671,   671,   671,   671,   671,   672,   673,   673,
     674,   675,   675,   677,   676,   678,   678,   679,   679,   680,
     682,   681,   684,   683,   685,   685,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   687,   687,   687,   688,   689,
     689,   689,   690,   691,   691,   691,   692,   693,   693,   693,
     693,   693,   693,   693,   694,   694,   695,   697,   696,   698,
     696,   699,   696,   700,   696,   701,   696,   702,   696,   696,
     696,   696,   696,   703,   696,   705,   704,   706,   706,   707,
     707,   707,   707,   707,   707,   707,   709,   708,   711,   710,
     710,   712,   712,   712,   712,   713,   713,   714,   714,   715,
     715,   716,   717,   717,   719,   718,   720,   721,   721,   722,
     722,   723,   723,   724,   724,   724,   724,   724,   724,   724,
     725,   725,   726,   726,   728,   727,   729,   729,   730,   730,
     731,   731,   732,   732,   733,   733,   735,   734,   736,   736,
     737,   737,   738,   739,   739,   739,   739,   740,   740,   741,
     741,   742,   742,   744,   743,   743,   745,   743,   743,   747,
     746,   748,   748,   749,   749,   750,   751,   751,   752,   753,
     753,   754,   754,   754,   754,   754,   755,   756,   756,   757,
     757,   758,   758,   759,   759,   760,   760,   760,   761,   761,
     761,   761,   761,   761,   761,   761,   761,   761,   761,   761,
     762,   763,   764,   764,   765,   765,   766,   766,   767,   768,
     768,   769,   769,   770,   771,   771,   772,   773,   773,   773,
     773,   773,   773,   773,   773,   773,   773,   773,   773,   773,
     774,   774,   775,   775,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   777,   777,   777,   777,   779,
     778,   781,   780,   783,   782,   784,   785,   786,   788,   787,
     789,   790,   790,   790,   791,   791,   793,   794,   795,   792,
     796,   796,   796,   798,   797,   800,   801,   799,   799,   802,
     802,   803,   803,   805,   806,   804,   808,   809,   807,   810,
     810,   811,   811,   813,   812,   815,   814,   817,   816,   819,
     818,   820,   822,   821,   824,   823,   825,   826,   828,   827,
     829,   827,   830,   827,   832,   831,   833,   831,   834,   831,
     835,   835,   836,   836,   836,   837,   838,   839,   840,   840,
     841,   841,   842,   843,   844,   844,   846,   845,   847,   847,
     847,   848,   848,   848,   849,   850,   850,   850,   851,   851,
     851,   851,   851,   851,   851,   851,   852,   853,   853,   853,
     854,   854,   854,   854,   854,   855,   856,   856,   856,   857,
     857,   857,   857,   857,   857,   857,   858,   859,   859,   859,
     860,   860,   860,   861,   862,   863,   864,   865,   866,   866,
     866,   867,   868,   869,   870,   871,   872,   873,   874,   875,
     876,   876,   877,   877,   878,   878,   880,   879,   879,   881,
     879,   879,   882,   882,   883,   884,   883,   885,   883,   886,
     887,   887,   889,   888,   890,   892,   891,   893,   894,   895,
     894,   894,   894,   894,   894,   896,   896,   897,   897,   898,
     898,   899,   899,   900,   901,   902,   903,   904,   904,   905,
     906,   905,   907,   905,   908,   908,   909,   910,   911,   911,
     912,   912,   913,   913,   915,   914,   916,   917,   918,   917,
     919,   917,   920,   920,   921,   921,   922,   922,   924,   925,
     923,   926,   926,   927,   927,   928,   928,   929,   929,   931,
     930,   932,   933,   933,   934,   934,   935,   935,   935,   935,
     935,   935,   935,   935,   935,   937,   938,   936,   939,   939,
     940,   940,   941,   941,   942,   942,   943,   943,   944,   944,
     945,   945,   946,   946,   947,   947,   948,   948,   948,   949,
     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,
     949,   949,   949,   949,   949,   949,   949,   949,   949,   950,
     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,
     949,   949,   949,   949,   949,   949,   951,   952,   953,   954,
     955,   955,   955,   955,   955,   955,   955,   956,   956,   956,
     957,   957,   957,   957,   958,   959,   959,   960,   960,   961,
     961,   963,   962,   964,   962,   965,   962,   966,   962,   967,
     962,   968,   962,   969,   962,   962,   970,   970,   971,   972,
     972,   973,   975,   976,   974,   977,   977,   978,   978,   979,
     979,   979,   980,   980,   981,   981,   982,   982,   982,   983,
     984,   985,   985,   985,   985,   985,   985,   985,   985,   985,
     985,   985,   985,   985,   985,   985,   985,   985,   985,   985,
     985,   985,   985,   985,   985,   985,   985,   985,   985,   985,
     985,   985,   985,   985,   985,   985,   985,   985,   985,   985,
     986,   986,   986,   986,   986,   986,   986,   986,   987,   988,
     988,   989,   989,   990,   990,   990,   990,   990,   991,   991,
     991,   991,   991,   992,   992,   992,   993,   993,   994,   994,
     994,   995,   996,   996,   997,   997,   998,   998,   998,   999,
     999,   999,   999,  1000,  1000,  1001,  1001,  1002,  1002,  1003,
    1003,  1004,  1004,  1004,  1004,  1004,  1004,  1004,  1004,  1004,
    1004,  1004,  1004,  1004,  1004,  1004,  1005,  1006,  1006,  1007,
    1007,  1008,  1008,  1009,  1009,  1010,  1010,  1011,  1011,  1012,
    1012,  1013,  1014,  1014,  1015,  1015,  1016,  1016,  1017,  1017,
    1017,  1018,  1018,  1018,  1018,  1018,  1019,  1019,  1021,  1020,
    1022,  1022,  1023,  1024,  1024,  1024,  1024,  1025,  1026,  1027,
    1027,  1028,  1029,  1029,  1030,  1030,  1031,  1031,  1032,  1033,
    1033,  1034,  1034,  1035,  1035,  1035,  1035,  1036,  1036,  1036,
    1036,  1036,  1037,  1037,  1037,  1037,  1037,  1038,  1038,  1039,
    1039,  1040,  1040,  1041,  1041,  1041,  1042,  1042,  1043,  1044,
    1045,  1045,  1046,  1046,  1047,  1047,  1048,  1048,  1049,  1049,
    1050,  1050,  1051,  1051,  1052,  1052,  1052,  1053,  1053,  1054,
    1054,  1054,  1054,  1054,  1054,  1055,  1055,  1056,  1057,  1057,
    1058,  1058,  1058,  1059,  1059,  1060,  1060,  1061,  1061,  1062,
    1062,  1063,  1063,  1065,  1066,  1064,  1067,  1064,  1064,  1068,
    1064,  1069,  1064,  1070,  1064,  1071,  1064,  1072,  1064,  1064,
    1064,  1064,  1064,  1073,  1064,  1074,  1074,  1074,  1074,  1075,
    1075,  1076,  1076,  1077,  1077,  1078,  1078,  1078,  1078,  1078,
    1078,  1078,  1078,  1078,  1078,  1079,  1078,  1078,  1080,  1078,
    1081,  1078,  1078,  1078,  1078,  1078,  1082,  1083,  1083,  1085,
    1084,  1086,  1086,  1086,  1088,  1087,  1089,  1090,  1089,  1091,
    1091,  1092,  1093,  1093,  1094,  1095,  1095,  1095,  1095,  1095,
    1095,  1095,  1095,  1095,  1095,  1095,  1095,  1095,  1095,  1095,
    1095,  1095,  1095,  1095,  1095,  1096,  1096,  1096,  1096,  1096,
    1097,  1097,  1098,  1098,  1099,  1099,  1100,  1100,  1102,  1101,
    1103,  1103,  1104,  1104,  1105,  1105,  1106,  1106,  1106,  1107,
    1107,  1107,  1108,  1108,  1108,  1108,  1110,  1109,  1111,  1109,
    1109,  1109,  1112,  1113,  1113,  1114,  1114,  1115,  1115,  1115,
    1117,  1116,  1118,  1118,  1119,  1119,  1119,  1120,  1120,  1120,
    1121,  1121,  1123,  1122,  1124,  1124,  1124,  1125,  1126,  1125,
    1128,  1127,  1129,  1129,  1130,  1130,  1131,  1131,  1131,  1132,
    1132,  1134,  1133,  1135,  1135,  1136,  1137,  1137,  1138,  1138,
    1139,  1140,  1139,  1141,  1142,  1141,  1143,  1143,  1143,  1144,
    1144,  1144,  1145,  1145,  1146,  1147,  1148,  1147,  1150,  1149,
    1151,  1151,  1152,  1152,  1153,  1153,  1153,  1153,  1153,  1153,
    1154,  1154,  1156,  1155,  1157,  1157,  1157,  1159,  1158,  1158,
    1160,  1160,  1161,  1161,  1162,  1164,  1163,  1165,  1165,  1166,
    1166,  1167,  1168,  1169,  1169,  1171,  1170,  1172,  1172,  1173,
    1173,  1174,  1175,  1177,  1176,  1179,  1178,  1180,  1180,  1181,
    1181,  1182,  1183,  1183,  1185,  1184,  1184,  1187,  1186,  1186,
    1189,  1188,  1190,  1190,  1190,  1192,  1191,  1193,  1194,  1195,
    1195,  1196,  1196,  1197,  1197,  1198,  1198,  1199,  1199,  1199,
    1200,  1200,  1200,  1201,  1201,  1201,  1202,  1202,  1203,  1204,
    1205,  1206,  1206,  1206,  1206,  1206,  1207,  1207,  1207,  1208,
    1208,  1208,  1209,  1209,  1210,  1210,  1210,  1210,  1210,  1210,
    1210,  1210,  1210,  1210,  1210,  1211,  1211,  1211,  1211,  1211,
    1211,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,
    1212,  1212,  1212,  1212,  1212,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1214,  1214,  1215,  1215,  1216,  1216,  1217,  1217,  1218,  1218,
    1218,  1218,  1218,  1218,  1219,  1219,  1220,  1220,  1221,  1221,
    1221,  1221,  1221,  1221,  1222,  1221,  1221,  1221,  1221,  1221,
    1223,  1224,  1224,  1225,  1225,  1225,  1225,  1225,  1225,  1225,
    1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,
    1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,
    1225,  1225,  1225,  1226,  1226,  1226,  1226,  1226,  1226,  1226,
    1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,
    1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,
    1226,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,
    1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,
    1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1228,  1228,
    1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1229,  1229,  1229,  1229,  1229,  1229,
    1229,  1229,  1231,  1230,  1230,  1232,  1232,  1233,  1233,  1234,
    1234,  1235,  1235,  1236,  1236,  1237,  1238,  1238,  1238,  1238,
    1238,  1238,  1238,  1239,  1240,  1238,  1238,  1238,  1238,  1238,
    1238,  1238,  1238,  1238,  1238,  1238,  1241,  1238,  1243,  1242,
    1244,  1244,  1244,  1245,  1245,  1246,  1246,  1247,  1248,  1247,
    1249,  1249,  1251,  1250,  1252,  1253,  1252,  1252,  1252,  1252,
    1252,  1252,  1252,  1252,  1252,  1252,  1252,  1254,  1252,  1255,
    1255,  1256,  1256,  1257,  1257,  1258,  1258,  1259,  1259,  1260,
    1260,  1261,  1261,  1262,  1262,  1263,  1264,  1264,  1265,  1265,
    1266,  1267,  1266,  1268,  1266,  1266,  1269,  1266,  1270,  1266,
    1266,  1271,  1266,  1272,  1266,  1266,  1273,  1273,  1273,  1274,
    1274,  1275,  1275,  1276,  1278,  1277,  1277,  1277,  1279,  1280,
    1279,  1281,  1283,  1282,  1285,  1284,  1287,  1288,  1286,  1289,
    1290,  1291,  1291,  1292,  1292,  1292,  1292,  1293,  1293,  1295,
    1294,  1296,  1294,  1297,  1297,  1298,  1299,  1298,  1301,  1300,
    1302,  1302,  1303,  1303,  1304,  1304,  1305,  1305,  1306,  1306,
    1306,  1306,  1306,  1306,  1306,  1306,  1306,  1306,  1306,  1306,
    1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,  1308,
    1308,  1308,  1308,  1309,  1309,  1309,  1310,  1310,  1311,  1311,
    1312,  1313,  1312,  1314,  1315,  1314,  1316,  1316,  1317,  1317,
    1318,  1318,  1319,  1319,  1319,  1320,  1321,  1321,  1322,  1323,
    1323,  1325,  1324,  1326,  1326,  1327,  1327,  1327,  1328,  1328,
    1329,  1330,  1330,  1330,  1331,  1331,  1331,  1332,  1332,  1332,
    1332,  1332,  1333,  1334,  1334,  1334,  1334,  1335,  1335,  1335,
    1336,  1336,  1336,  1336,  1336,  1336,  1337,  1337,  1337,  1337,
    1337,  1338,  1338,  1338,  1338,  1338,  1339,  1339,  1339,  1339,
    1339,  1340,  1341,  1341,  1342,  1342,  1343,  1344,  1343,  1345,
    1345,  1346,  1346,  1347,  1349,  1348,  1350,  1350,  1351,  1352,
    1352,  1353,  1353,  1355,  1354,  1357,  1358,  1356,  1356,  1356,
    1360,  1359,  1362,  1361,  1363,  1361,  1361,  1361,  1361,  1361,
    1361,  1361,  1364,  1361,  1361,  1361,  1361,  1361,  1361,  1365,
    1365,  1366,  1367,  1368,  1368,  1369,  1370,  1370,  1371,  1371,
    1372,  1372,  1374,  1375,  1373,  1377,  1378,  1376,  1379,  1379,
    1379,  1379,  1380,  1380,  1381,  1381,  1382,  1383,  1383,  1383,
    1384,  1383,  1385,  1385,  1386,  1386,  1387,  1386,  1388,  1386,
    1389,  1389,  1390,  1390,  1391,  1392,  1392,  1393,  1393,  1395,
    1394,  1396,  1396,  1397,  1397,  1398,  1398,  1399,  1400,  1399,
    1402,  1403,  1401,  1404,  1404,  1405,  1406,  1406,  1407,  1408,
    1408,  1410,  1409,  1412,  1413,  1411,  1414,  1411,  1415,  1411,
    1416,  1416,  1417,  1417,  1418,  1418,  1419,  1419,  1420,  1420,
    1421,  1421,  1421,  1423,  1422,  1424,  1424,  1425,  1425,  1426,
    1426,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1428,  1428,  1430,  1429,  1431,  1431,  1431,  1431,  1431,  1431,
    1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1432,  1431,
    1433,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,
    1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,
    1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,
    1431,  1431,  1431,  1431,  1431,  1431,  1431,  1434,  1434,  1434,
    1435,  1435,  1436,  1436,  1437,  1437,  1438,  1438,  1439,  1439,
    1440,  1440,  1441,  1441,  1442,  1442,  1442,  1444,  1443,  1445,
    1443,  1446,  1446,  1446,  1446,  1446,  1447,  1447,  1448,  1449,
    1449,  1449,  1450,  1450,  1451,  1451,  1451,  1453,  1452,  1455,
    1454,  1454,  1456,  1456,  1457,  1458,  1457,  1459,  1459,  1460,
    1460,  1460,  1460,  1460,  1460,  1460,  1460,  1460,  1460,  1460,
    1460,  1460,  1460,  1460,  1460,  1461,  1461,  1462,  1462,  1464,
    1463,  1465,  1465,  1467,  1466,  1468,  1466,  1466,  1469,  1469,
    1470,  1470,  1472,  1471,  1473,  1474,  1474,  1476,  1475,  1477,
    1477,  1477,  1478,  1478,  1478,  1478,  1479,  1479,  1480,  1481,
    1483,  1484,  1485,  1486,  1482,  1487,  1487,  1488,  1488,  1489,
    1489,  1489,  1490,  1490,  1490,  1491,  1491,  1492,  1492,  1493,
    1493,  1493,  1493,  1494,  1494,  1495,  1495,  1496,  1496,  1497,
    1497,  1498,  1498,  1499,  1499,  1500,  1500,  1500,  1501,  1501,
    1502,  1502,  1503,  1503,  1504,  1504,  1505,  1506,  1506,  1506,
    1506,  1507,  1507,  1508,  1508,  1508,  1509,  1510,  1510,  1510,
    1511,  1511,  1511,  1511,  1511,  1511,  1511,  1511,  1511,  1511,
    1512,  1512,  1512,  1512,  1512,  1513,  1513,  1513,  1514,  1514,
    1515,  1515,  1516,  1517,  1517,  1518,  1518,  1519,  1519,  1519,
    1520,  1520,  1520,  1520,  1521,  1521,  1521,  1522,  1522,  1523,
    1524,  1524,  1525,  1526,  1527,  1528,  1528,  1529,  1529,  1530,
    1530,  1530,  1531,  1531,  1531,  1532,  1532,  1533,  1534,  1534,
    1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,
    1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,
    1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,
    1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,
    1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,
    1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1534,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1537,  1536,
    1538,  1539,  1536,  1540,  1540,  1542,  1541,  1543,  1541,  1544,
    1541,  1546,  1545,  1545,  1547,  1547,  1549,  1548,  1550,  1548,
    1552,  1551,  1551,  1553,  1553,  1553,  1554,  1554,  1554,  1554,
    1555,  1555,  1555,  1555,  1556,  1557,  1557,  1557,  1557,  1557,
    1557,  1557,  1557,  1557,  1557,  1558,  1558,  1558,  1559,  1559,
    1559,  1559,  1560,  1561,  1562,  1562,  1563,  1563,  1563,  1563,
    1564,  1564,  1565,  1565,  1565,  1566,  1566,  1566,  1566,  1566,
    1568,  1567,  1569,  1569,  1570,  1570,  1571,  1572,  1572,  1572,
    1572,  1572,  1574,  1573,  1575,  1575,  1576,  1575,  1577,  1577,
    1578,  1578,  1579,  1579,  1579,  1579,  1580,  1579,  1581,  1581,
    1581,  1581,  1581,  1582,  1583,  1583,  1583,  1583,  1583,  1583,
    1584,  1584,  1585,  1586,  1586,  1586,  1586,  1586,  1587,  1587,
    1588,  1588,  1589,  1589,  1590,  1591,  1591,  1592,  1592,  1593,
    1593,  1594,  1594,  1595,  1595,  1597,  1596,  1598,  1596,  1599,
    1596,  1600,  1596,  1596,  1596,  1596,  1596,  1596,  1596,  1596,
    1596,  1596,  1596,  1596,  1596,  1596,  1596,  1596,  1596,  1596,
    1596,  1596,  1596,  1596,  1596,  1596,  1596,  1596,  1596,  1601,
    1601,  1602,  1602,  1603,  1603,  1603,  1604,  1604,  1604,  1604,
    1605,  1605,  1606,  1606,  1607,  1607,  1608,  1608,  1609,  1609,
    1610,  1610,  1610,  1610,  1610,  1611,  1611,  1612,  1612,  1613,
    1614,  1614,  1614,  1614,  1614,  1615,  1615,  1616,  1616,  1617,
    1617,  1618,  1618,  1618,  1618,  1618,  1618,  1620,  1619,  1621,
    1622,  1622,  1623,  1623,  1624,  1624,  1624,  1625,  1625,  1625,
    1626,  1626,  1627,  1628,  1628,  1629,  1630,  1631,  1631,  1633,
    1632,  1634,  1634,  1635,  1635,  1637,  1636,  1638,  1638,  1639,
    1639,  1639,  1640,  1640,  1641,  1642,  1641,  1643,  1644,  1645,
    1646,  1646,  1647,  1647,  1648,  1648,  1648,  1648,  1648,  1648,
    1648,  1648,  1649,  1649,  1649,  1650,  1650,  1650,  1650,  1650,
    1651,  1651,  1651,  1651,  1651,  1651,  1652,  1652,  1653,  1654,
    1655,  1655,  1655,  1656,  1656,  1656,  1658,  1657,  1659,  1659,
    1660,  1660,  1662,  1661,  1663,  1663,  1664,  1664,  1664,  1664,
    1666,  1667,  1668,  1669,  1665,  1670,  1670,  1671,  1673,  1674,
    1675,  1676,  1677,  1672,  1679,  1680,  1681,  1682,  1678,  1683,
    1683,  1683,  1683,  1683,  1683,  1684,  1684,  1684,  1685,  1685,
    1686,  1686,  1686,  1687,  1687,  1688,  1689,  1688,  1690,  1690,
    1691,  1691,  1692,  1692,  1693
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     1,     2,     0,     4,     0,     2,     3,     1,     2,
       0,     3,     0,     6,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     5,     5,     1,     0,     1,     3,     1,     0,
       1,     3,     1,     0,     1,     3,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     1,     0,     7,     0,
      14,     0,    13,     0,    13,     0,     6,     0,     3,     5,
       6,     4,     3,     0,     3,     0,    12,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     0,    13,     0,     6,
       2,     0,     1,     3,     1,     0,     2,     0,     2,     0,
       1,     4,     0,     2,     0,     2,     0,     3,     1,     0,
       2,     0,     2,     2,     2,     2,     2,     3,     3,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     2,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     5,     0,
       2,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     4,     0,     1,     1,     3,     1,     3,     3,     1,
       2,     1,     1,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       5,     0,     2,     0,     3,     2,     2,     2,     0,     6,
       2,     0,     2,     1,     1,     3,     0,     0,     0,     7,
       0,     2,     2,     0,     6,     0,     0,     4,     1,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     1,     0,     6,     0,     3,     0,     5,     0,
       4,     3,     0,     6,     0,     6,     1,     0,     0,     6,
       0,     6,     0,     6,     0,     4,     0,     4,     0,     4,
       1,     1,     1,     1,     1,     2,     4,     5,     0,     4,
       4,     4,     3,     3,     2,     2,     0,     2,     1,     2,
       3,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     4,
       0,     1,     1,     1,     1,     1,     0,     7,     3,     0,
       5,     1,     2,     4,     0,     0,     5,     0,     7,     1,
       0,     1,     0,     4,     0,     0,     3,     5,     6,     0,
       4,     2,     2,     2,     2,     0,     1,     0,     3,     0,
       1,     1,     3,     1,     4,     5,     5,     0,     2,     0,
       0,     7,     0,    10,     1,     3,     1,     1,     0,     2,
       0,     3,     1,     3,     0,     6,     1,     0,     0,     5,
       0,     4,     1,     1,     1,     3,     1,     3,     0,     0,
       5,     1,     3,     1,     1,     0,     3,     1,     3,     0,
       4,     1,     0,     1,     2,     1,     3,     4,     3,     3,
       3,     3,     4,     4,     3,     0,     0,     6,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     3,     0,     3,
       1,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     2,
       2,     0,     9,     0,    10,     0,     9,     0,     9,     0,
      10,     0,    11,     0,    10,     2,     0,     1,     4,     0,
       1,     2,     0,     0,     5,     1,     7,     0,     2,     0,
       1,     1,     0,     1,     2,     1,     1,     2,     2,     4,
       3,     3,     3,     3,     1,     2,     1,     1,     3,     2,
       3,     2,     2,     1,     3,     3,     2,     3,     1,     2,
       2,     2,     1,     2,     3,     1,     1,     2,     3,     2,
       3,     2,     2,     3,     3,     3,     5,     5,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     3,     0,     1,
       1,     5,     0,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     4,     1,     3,     2,     1,     2,
       2,     2,     3,     3,     3,     3,     2,     2,     1,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     0,     2,     1,     1,     0,     1,     2,     1,
       1,     0,     1,     2,     1,     2,     0,     1,     0,     4,
       1,     1,     1,     0,     1,     2,     1,     1,     2,     1,
       3,     3,     1,     1,     0,     2,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     2,     2,     1,
       1,     0,     1,     1,     1,     1,     0,     1,     1,     1,
       0,     1,     0,     1,     0,     1,     1,     2,     1,     2,
       1,     2,     0,     2,     0,     2,     2,     2,     2,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       1,     1,     1,     4,     2,     1,     4,     0,     1,     0,
       2,     1,     3,     0,     0,     7,     0,     5,     7,     0,
       5,     0,     5,     0,     5,     0,     4,     0,    11,     3,
       4,     3,     3,     0,     8,     0,     3,     1,     4,     0,
       3,     0,     2,     0,     1,     0,     2,     2,     2,     2,
       1,     1,     1,     4,     4,     0,     6,     4,     0,     5,
       0,     6,     4,     3,     1,     7,     2,     1,     1,     0,
       6,     0,     3,     2,     0,     5,     0,     0,     6,     1,
       3,     1,     1,     3,     3,     3,     2,     4,     6,     5,
       5,     5,     3,     4,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     2,
       0,     1,     2,     1,     1,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     0,     5,
       4,     4,     3,     0,     1,     1,     3,     3,     2,     2,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     4,
       1,     3,     0,     5,     0,     1,     1,     3,     0,     4,
       0,     4,     0,     1,     1,     2,     1,     1,     1,     0,
       2,     0,     5,     1,     3,     2,     0,     3,     1,     4,
       1,     0,     4,     1,     0,     4,     0,     1,     3,     0,
       1,     3,     1,     1,     2,     3,     0,     4,     0,     3,
       0,     1,     1,     2,     1,     1,     1,     1,     1,     2,
       0,     2,     0,     5,     0,     1,     1,     0,     4,     4,
       3,     5,     1,     3,     3,     0,     6,     1,     1,     1,
       3,     2,     3,     1,     1,     0,     6,     1,     1,     1,
       3,     3,     4,     0,     6,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     0,     3,     3,     0,     4,     3,
       0,     3,     4,     3,    11,     0,     3,     8,     2,     0,
       1,     1,     1,     0,     1,     2,     1,     1,     1,     1,
       0,     2,     4,     3,     1,     1,     3,     4,     0,     0,
       0,     0,     2,     2,     1,     1,     0,     2,     3,     0,
       2,     3,     0,     2,     3,     3,     3,     2,     3,     4,
       3,     4,     3,     4,     1,     3,     4,     3,     3,     6,
       1,     5,     6,     5,     7,     6,     8,     5,     6,     4,
       4,     5,     3,     4,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     2,     1,     2,
       1,     1,     1,     2,     0,     3,     1,     1,     2,     2,
       4,     1,     3,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     3,     2,     2,     2,     2,     3,     3,
       5,     6,     4,     4,     7,     2,     6,     5,     6,     6,
       4,     4,     5,     4,     6,     2,     2,     4,     4,     4,
      10,     6,     8,     6,     4,     4,     6,     4,     4,     4,
       6,     4,     7,     7,     7,     6,     6,     6,     6,     3,
       4,     6,     8,     2,     2,     8,     8,     6,     6,     2,
       6,     6,     8,     8,     6,     8,     6,     2,     8,     8,
       2,     2,     2,     6,     6,     4,     4,     8,     4,     4,
       4,     4,     3,     8,     6,     8,     4,     4,     6,     4,
       4,     4,     6,     8,     4,     3,     6,     4,     6,     5,
       8,     7,    10,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     0,     4,
       4,     2,     0,     3,     2,     0,     4,     2,     1,     1,
       2,     1,     2,     1,     2,     2,     2,     0,     3,     0,
       1,     1,     3,     1,     3,     1,     3,     0,     1,     0,
       2,     4,     5,     1,     1,     1,     1,     4,     1,     3,
       3,     0,     6,     0,     8,     4,     0,     8,     0,    10,
       6,     0,     8,     0,    10,     6,     1,     2,     1,     1,
       2,     0,     1,     5,     0,     5,     3,     5,     2,     0,
       5,     1,     0,     3,     0,     3,     0,     0,     5,     0,
       1,     0,     1,     0,     2,     3,     3,     1,     1,     0,
       7,     0,     7,     1,     2,     0,     0,     2,     0,     2,
       0,     1,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     2,     0,     1,
       0,     0,     3,     0,     0,     3,     2,     0,     0,     4,
       4,     2,     0,     1,     1,     3,     3,     1,     2,     0,
       1,     0,     4,     4,     2,     0,     1,     1,     0,     1,
       1,     2,     5,     4,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     0,     2,     3,     4,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     0,     6,     0,
       1,     3,     1,     3,     0,     2,     3,     1,     1,     2,
       1,     0,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     7,     0,     7,     4,     6,     4,     4,
       5,     5,     0,     6,     4,     4,     5,     6,     4,     1,
       3,     1,     2,     1,     3,     1,     0,     2,     0,     2,
       0,     1,     0,     0,     8,     0,     0,     6,     0,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     4,
       0,     3,     3,     1,     2,     2,     0,     3,     0,     5,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     0,     0,     6,
       0,     0,    11,     3,     1,     3,     3,     1,     3,     0,
       1,     0,     4,     0,     0,     9,     0,     5,     0,     6,
       0,     2,     1,     3,     2,     4,     0,     2,     0,     2,
       1,     1,     1,     0,     4,     0,     1,     0,     1,     1,
       3,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       0,     3,     0,     3,     2,     4,     4,     3,     4,     4,
       1,     3,     3,     3,     3,     6,     2,     2,     0,     6,
       0,     7,     5,     2,     1,     1,     1,     5,     5,     2,
       2,     1,     4,     3,     2,     3,     2,     2,     1,     4,
       4,     3,     3,     2,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     0,     1,     0,     2,     0,     1,     1,     1,
       0,     2,     0,     2,     0,     3,     3,     0,     4,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     0,     3,     0,     1,     1,     0,     4,     0,
       4,     1,     0,     1,     4,     0,     3,     3,     1,     2,
       2,     2,     2,     2,     3,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     2,     0,     1,     0,     3,     0,
       3,     3,     1,     0,     4,     0,     3,     2,     0,     1,
       0,     2,     0,     3,     3,     2,     2,     0,     5,     0,
       1,     1,     0,     1,     1,     2,     1,     2,     1,     2,
       0,     0,     0,     0,    22,     1,     1,     0,     1,     0,
       1,     1,     0,     1,     1,     0,     2,     2,     1,     3,
       4,     3,     3,     0,     2,     2,     1,     3,     3,     0,
       4,     0,     3,     1,     1,     0,     3,     2,     3,     1,
       1,     2,     0,     2,     3,     1,     5,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     2,     2,     2,     1,     1,
       3,     5,     1,     1,     1,     1,     1,     3,     4,     5,
       1,     5,     3,     2,     1,     3,     2,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       0,     0,     7,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     2,     0,     2,     0,     2,     0,     4,
       0,     3,     1,     1,     1,     1,     0,     1,     1,     1,
       0,     2,     2,     2,     3,     3,     4,     6,     2,     3,
       3,     3,     5,     2,     3,     1,     3,     3,     1,     1,
       3,     3,     1,     3,     2,     2,     2,     2,     2,     1,
       1,     3,     1,     4,     4,     1,     1,     1,     1,     1,
       0,     4,     1,     1,     1,     3,     3,     1,     1,     2,
       2,     2,     0,     3,     4,     3,     0,     7,     1,     2,
       1,     1,     1,     1,     1,     1,     0,     5,     1,     1,
       1,     1,     1,     3,     6,     6,     6,     7,     5,     3,
       4,     1,     3,     8,     8,     8,     6,     4,     0,     3,
       0,     3,     1,     3,     2,     1,     1,     0,     1,     1,
       2,     0,     1,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     0,
       1,     3,     1,     2,     2,     2,     1,     3,     3,     1,
       1,     3,     1,     3,     1,     3,     1,     1,     1,     1,
       4,     5,     4,     6,     1,     0,     3,     3,     1,     1,
       0,     2,     2,     2,     2,     0,     2,     0,     3,     2,
       1,     2,     2,     2,     2,     2,     2,     0,     3,     1,
       0,     1,     0,     1,     0,     3,     2,     0,     1,     2,
       0,     1,     4,     4,     5,     2,     3,     0,     1,     0,
       4,     1,     1,     0,     1,     0,     2,     2,     1,     0,
       1,     1,     3,     4,     1,     0,     5,     3,     0,     0,
       0,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       3,     3,     3,     0,     3,     3,     0,     8,     0,     3,
       1,     3,     0,     3,     2,     4,     0,     3,     4,     4,
       0,     0,     0,     0,    18,     2,     1,     7,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,    12,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   933,  1942,  2717,     0,     0,     0,   343,     0,     0,
    1128,  2722,   590,    68,  1811,  1936,  1937,  1720,  1750,     2,
       0,  1144,   272,   176,     0,    80,   319,  1752,     0,  1997,
       0,     0,   384,  1144,     0,   495,     0,  1992,     0,     0,
    1144,   388,  1755,  1979,   249,   176,  2722,     0,  1195,  2498,
    1852,  2008,     0,     0,     0,  1835,     0,  2582,  1800,     0,
     386,     0,  2854,  1184,     0,     3,     8,    21,     0,    43,
      26,    31,    16,    20,    15,    56,    50,    28,  2719,   315,
     316,   317,   318,    41,   137,    40,    11,    59,    60,    18,
      47,    12,    14,    17,    39,    46,    35,    42,    54,  1181,
      24,    25,    32,    48,    64,    22,    61,    57,    23,  1942,
      13,    27,    49,    44,    36,    58,    65,    37,    55,    38,
      63,    30,    51,    29,     9,    10,    19,    52,    53,    45,
      66,    33,    62,    34,     0,   963,     0,     0,     0,     0,
       0,     0,  1038,   945,  2786,  2787,  2788,     0,  1146,  1145,
       0,     0,  1285,  1284,     0,  2722,  2112,  1124,  1155,  2189,
    2191,  2190,  2192,  2193,  2194,  2195,  2196,  2197,  2129,  2198,
    2199,  2200,  2202,  2201,  2203,  2204,  2205,  2130,  2131,  2206,
    2207,  2208,  2210,  2209,  2211,  2132,  2133,  2212,  2213,  2214,
    2215,  2134,  2136,  2135,  2216,  2218,  2217,  2137,  2219,  2220,
    2221,  2223,  2138,  2139,  2140,  2141,  2142,  2222,  2143,  2224,
    2144,  2225,  2226,  2227,  2228,  2229,  2230,  2231,  2233,  2232,
    2145,  2234,  2235,  2237,  2238,  2239,  2236,  2240,  2242,  2241,
    2243,  2244,  2245,  2146,  2246,  2247,  2248,  2249,  2250,  2251,
    2252,  2253,  2147,  2254,  2255,  2256,  2275,  2148,  2257,  2260,
    2259,  2258,  2261,  2262,  2263,  2265,  2264,  2266,  2267,  2149,
    2150,  2268,  2269,  2270,  2271,  2273,  2272,  2277,  2278,  2279,
    2151,  2152,  2274,  2276,  2476,  2280,  2281,  2283,  2282,  2284,
    2153,  2286,  2285,  2154,  2288,  2287,  2155,  2156,  2289,  2290,
    2291,  2110,  2292,  2111,  2293,  2295,  2296,  2297,  2302,  2157,
    2294,  2298,  2299,  2300,  2301,  2303,  2158,  2305,  2304,  2306,
    2307,  2308,  2309,  2310,  2311,  2312,  2313,  2314,  2327,  2318,
    2319,  2321,  2322,  2325,  2320,  2326,  2330,  2329,  2331,  2332,
    2333,  2334,  2335,  2328,  2316,  2323,  2324,  2317,  2336,  2337,
    2315,  2338,  2340,  2339,  2341,  2342,  2343,  2344,  2345,  2346,
    2347,  2348,  2349,  2351,  2350,  2352,  2353,  2354,  2355,  2356,
    2357,  2358,  2360,  2359,  2361,  2362,  2364,  2363,  2366,  2367,
    2159,  2365,  2368,  2369,  2370,  2371,  2372,  2374,  2373,  2160,
    2162,  2161,  2163,  2375,  2376,  2164,  2377,  2379,  2378,  2380,
    2381,  2382,  2384,  2383,  2385,  2386,  2165,  2166,  2387,  2388,
    2389,  2390,  2391,  2392,  2393,  2394,  2395,  2396,  2397,  2398,
    2399,  2400,  2402,  2401,  2403,  2404,  2405,  2406,  2407,  2408,
    2409,  2167,  2410,  2168,  2411,  2412,  2169,  2413,  2170,  2414,
    2415,  2416,  2417,  2418,  2171,  2419,  2420,  2421,  2423,  2424,
    2422,  2425,  2172,  2426,  2427,  2428,  2173,  2430,  2429,  2431,
    2174,  2433,  2175,  2176,  2432,  2178,  2179,  2434,  2435,  2436,
    2177,  2437,  2180,  2438,  2439,  2441,  2440,  2442,  2443,  2444,
    2181,  2445,  2446,  2182,  2447,  2448,  2449,  2450,  2451,  2453,
    2452,  2454,  2455,  2456,  2457,  2459,  2461,  2460,  2458,  2462,
    2463,  2464,  2465,  2469,  2470,  2471,  2472,  2466,  2467,  2468,
    2183,  2473,  2474,  2475,  2477,  2478,  2480,  2479,  2184,  2185,
    2481,  2482,  2188,  2483,  2484,  2488,  2485,  2497,  2486,  2487,
    2490,  2489,  2491,  2492,  2493,  2186,  2494,  2187,  2495,  2496,
     194,  2115,   178,  2116,  2128,   345,   124,  2573,  2572,  1082,
       0,  2723,  2724,     0,     0,     0,  1828,     0,  1748,  1748,
    1748,  1746,     0,  1748,  1748,  1748,     0,  1751,  1748,  1748,
    1748,     0,    73,  1947,   273,     0,     0,     0,     0,     0,
    2109,     0,   336,  1758,     0,     0,  1999,  2015,     0,  2016,
    2010,  2570,   321,     0,  1219,     0,     0,     0,     0,   176,
    1147,  1090,   321,  1809,     0,   239,   248,   250,   251,   247,
       0,  2724,  2735,  1182,  1190,  1639,  1203,  2500,     0,  1916,
     251,     0,   124,  1063,     0,   124,  1836,  1833,     0,     0,
       0,  1809,  2009,     0,  2838,     0,     0,     0,  2834,     0,
    2839,     0,  1184,     0,     0,     1,     5,     0,     0,   588,
     888,   588,   889,   887,   588,  2788,     0,     0,     0,     0,
       0,  2270,  2152,  2379,  1929,  1941,  1927,  2104,     0,   936,
     964,     0,   941,     0,   939,  2121,  2120,  2119,   953,   952,
     951,   949,     0,   456,     0,  1040,  2793,     0,   943,     0,
    1101,  1931,  1932,  1933,  1934,  1935,  1938,   367,  2718,     0,
     196,     0,   356,   359,     0,   348,   351,     0,   125,   126,
       0,  1126,  1129,     0,     0,  2727,     0,   591,   142,     0,
    1832,  1831,  1830,     0,  1828,  2190,  2129,  2205,     0,  2078,
       0,     0,     0,  1507,     0,  2134,     0,  2219,  2221,  2138,
    2139,  2140,  2141,  2142,  2145,     0,     0,  1232,  1232,  1232,
    1229,     0,     0,     0,  2244,  2245,  2083,     0,     0,     0,
    2074,  2084,  2152,  2283,  2284,     0,  2076,  2077,  2290,     0,
       0,     0,  2304,     0,  2309,  2081,     0,     0,  2346,  2348,
       0,     0,  2352,  2353,  2354,  2355,  2058,  1287,     0,  1229,
    2073,  2080,  2371,  2066,  2380,  2385,  2386,     0,  2395,     0,
       0,  2417,     0,  2424,  2422,  2428,     0,     0,  2450,     0,
       0,  1229,  2057,  2469,  2470,  2471,  2472,     0,  2075,  2183,
    2082,     0,  2483,  1232,  1229,  1229,     0,     0,     0,  2491,
    2492,  2496,     0,     0,     0,  2758,  1286,     0,  1468,     0,
    1501,  1244,  1250,  1264,     0,  1279,  1314,  1315,  1317,  1423,
    1316,  1322,  1321,  1721,  2070,  1320,  1319,  2071,  2072,  1313,
    2094,  2115,  2093,     0,     0,     0,     0,     0,     0,     0,
       0,   176,     0,  1912,     0,   176,  1732,  1748,    75,     0,
       0,  2631,  2646,  2647,  1232,  2643,  2648,  2264,  2150,  2277,
       0,  2645,  2637,     0,  2390,  2394,  2641,  2409,  2412,  2635,
       0,  2175,  2454,  2667,  2639,  2644,  2625,  2612,  2626,     0,
       0,  2629,  2633,  2106,  1613,  2585,  2586,     0,    81,     0,
       0,  1760,  1761,  1759,  1036,     0,  2851,  2000,  2001,  2002,
       0,  2019,     0,   365,     0,   331,     0,     0,     0,   323,
     321,     0,   314,   304,     0,   305,   309,   310,   311,   312,
     313,   306,   307,   377,   308,  2117,     0,  2118,  1142,     0,
       0,   505,   496,     0,  1911,  1910,     0,  1993,  2736,     0,
       0,     0,   321,   377,  1763,  1810,     0,  1762,  1985,     0,
    1983,  1980,  1982,   240,     0,     0,   270,  2191,  2631,  2394,
    2603,     0,  2611,     0,  2730,  2727,  2737,  1713,     0,  1648,
    1640,     0,  1210,  2771,  2766,  2765,  2768,  2769,  1209,  2770,
    1208,  2767,  2764,  1219,  1204,  1206,  1207,     0,   810,     0,
       0,  2523,  2524,  2360,  2380,  2418,  2525,  2466,     0,     0,
    2545,  2499,  2509,  2505,     0,     0,  1874,     0,   810,  1924,
    1875,     0,     0,  1924,     0,  1648,  1914,  1917,     0,  2527,
    1888,   885,   884,   883,  2528,  1910,     0,  1860,  1876,     0,
    1837,  1881,   124,  2529,     0,  1913,     0,  1648,  1924,     0,
    1853,     0,     0,     0,     0,  1218,     0,   246,  1070,  1070,
       0,     0,  1062,  1064,  1065,  1070,  1070,     0,  2852,  2853,
    2583,  1036,   377,     0,  2065,  2063,  2064,  2113,  2835,  2062,
    2061,  2843,  2845,  2831,  2833,  2840,     0,  2743,  1195,     6,
      67,     0,     0,   176,   176,   138,  1219,  1219,  2788,   588,
     144,   588,   588,   588,   588,     0,  1944,  2791,  2792,  2790,
     826,     0,  1232,  2122,  2125,  2789,  2126,   179,   950,     0,
     457,   179,     0,     0,     0,     0,     0,   458,   459,   395,
       0,  1044,  1045,  1039,  1041,  1043,     0,     0,   946,     0,
    2793,  1943,     0,   369,     0,  1157,  1159,  1158,  1175,   198,
     195,   177,     0,   321,     0,   346,   352,    82,  1084,  1739,
    1741,     0,  1130,  2726,     0,     0,  2728,  2732,   141,     0,
       0,     0,  1812,  1816,  1822,  1826,  1829,     0,     0,  1618,
    1335,  1618,  1618,  1618,  1508,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1618,     0,
    1373,  1345,  1346,     0,  1374,     0,     0,     0,  2085,     0,
       0,     0,  2758,     0,     0,     0,     0,  1473,     0,     0,
       0,  2758,     0,     0,     0,     0,     0,     0,  1503,  1505,
    2093,  1618,     0,     0,  1618,     0,     0,     0,     0,     0,
    1237,  1379,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1618,  1618,     0,     0,  1618,
    1387,  2087,     0,     0,     0,  2086,     0,     0,     0,  2059,
    2079,     0,  1390,  1392,  1391,     0,  1618,  1618,     0,     0,
       0,  1325,  1324,  1326,     0,     0,     0,     0,     0,     0,
    1283,  1282,  1281,  1280,     0,     0,     0,     0,  1289,     0,
    1291,  1293,  1288,  1290,  1292,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1327,     0,     0,     0,  2060,  1432,
       0,  1749,  1726,  1734,  1728,  1747,     0,  1912,  1729,     0,
    1738,   470,     0,  1735,     0,     0,  1722,     0,    74,     0,
    1972,     0,     0,     0,  1966,  1968,  1971,  1967,     0,     0,
    1973,   124,     0,  1969,  1948,  1951,  1958,  1218,  1949,     0,
       0,   271,   274,   276,     0,   279,  2632,  2630,  2664,  2663,
    2668,     0,  2665,  2661,  2624,  2654,  2695,  2658,     0,  2695,
    2660,  2659,  2695,  2655,  2662,  2695,     0,  2627,     0,  1614,
    1615,     0,  2584,     0,  2105,     0,     0,  1037,     0,     0,
    2003,  2004,     0,  1165,  2020,  2021,  2017,  1613,  2571,  2574,
     369,   330,   333,     0,     0,   326,   325,   327,     0,     0,
       0,   219,   322,   385,     0,     0,   699,  1220,   506,     0,
       0,   517,     0,     0,    70,    71,     0,  1149,  2127,     0,
    1148,  1152,     0,  1088,  1091,     0,   374,   389,     0,  1766,
    1756,  1765,  1541,  1990,  1987,   124,     0,   238,   263,   258,
     266,   260,   262,   261,   267,   268,   269,   264,   259,   265,
     252,     0,     0,  2630,     0,     0,  2627,  2731,     0,  2733,
    2749,  1191,  2738,  1704,  1641,  1650,  1210,     0,  1649,  1544,
    1620,     0,     0,  1193,  1215,  1196,  1214,     0,  1205,     0,
    2501,  2503,     0,   809,     0,     0,   812,   814,  1786,  1785,
     813,   822,     0,   811,     0,  2560,     0,  2543,     0,  2530,
       0,   818,   820,   819,  2538,   817,     0,     0,  2514,     0,
       0,  1920,  1218,  1218,  1887,     0,   588,     0,     0,     0,
       0,     0,     0,  1854,     0,     0,   639,  1880,  1918,  1919,
    1924,     0,     0,  1924,     0,  1893,  1914,  1924,     0,  1924,
    1849,     0,     0,  1841,  1846,  1842,     0,  1848,  1847,  1850,
    1838,  1839,     0,  1867,  1895,     0,  1914,  1879,  1886,     0,
    1866,  1873,     0,  1884,  1914,  1914,     0,  1924,  1924,  1924,
    1058,  1074,  1056,  1068,  1069,     0,     0,  1061,  1060,  1834,
    1544,   387,   372,     0,     0,  2832,  2846,  2830,  2841,  2842,
    2829,  1186,  2742,  1183,  2741,  2744,     0,  1185,     7,     4,
       0,   135,     0,     0,     0,   588,   588,  1219,  2785,     0,
    2773,  2780,  2781,  2784,  2816,  2783,  2782,   588,  2779,  2772,
    2775,  2776,  2778,  2777,  2793,     0,     0,     0,     0,     0,
    1930,  1928,  1945,  1946,   827,   826,   582,   585,   584,     0,
       0,  2124,     0,   942,     0,  1912,   940,     0,     0,  1912,
     406,  1912,   460,   934,  1042,     0,   588,   947,   944,  1102,
    1103,  1106,   368,   221,     0,     0,   494,  1175,  1161,  1177,
       0,   199,   201,   357,   321,     0,     0,     0,  1086,  1085,
       0,  1083,  1140,  1138,  1137,  1135,     0,  1136,  1134,  1125,
    1131,  1132,  2725,  2729,  1912,   398,  1818,  1743,  1541,  1745,
    2104,     0,     0,     0,  1824,     0,     0,  1619,  1618,     0,
    1482,     0,     0,     0,     0,  1509,     0,     0,     0,     0,
       0,     0,     0,     0,  1311,     0,     0,     0,     0,     0,
    1453,     0,  1482,  1233,  1692,  1693,  1677,  1678,  1676,  1679,
    1230,     0,  1680,  1691,  1402,     0,     0,     0,     0,     0,
       0,  1589,  1590,  1591,  1592,  1600,  1593,  1594,  1595,  1602,
    1607,  1596,  1597,  1603,  1604,  1605,  1598,  1606,  1601,  1599,
    1608,     0,  1588,     0,     0,  1611,  1609,  1612,  1610,     0,
    1474,  1466,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1618,     0,     0,     0,  1618,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1415,     0,     0,     0,
       0,     0,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1369,     0,  2096,  2095,     0,     0,     0,
     854,     0,  1329,     0,  1328,  1552,  1187,  2754,  2759,     0,
    2530,  1469,  1471,     0,  1235,  1234,  1236,  1247,  1240,  1245,
    1238,  1242,     0,  1294,  2197,  1248,     0,     0,  1276,  2758,
    1627,  1277,  1262,  1267,  1268,     0,  1265,  1266,     0,  1270,
       0,  1269,  1273,  1274,  1275,  1278,     0,     0,     0,     0,
    1318,  1323,  1502,  1219,  2097,     0,     0,   470,  1731,  2622,
     473,   472,  1736,   471,  1787,  2680,  1730,  1046,     0,     0,
      76,    78,  1963,  1960,  1959,  1961,  1965,   124,  1970,  1962,
       0,  1974,  1975,  2244,  2469,  2472,   283,     0,   256,   255,
     257,   280,     0,     0,  2657,     0,  2638,     0,  2642,  2636,
    2640,  2125,  2694,     0,  2620,  2682,     0,     0,  2628,     0,
    2666,  2649,  2653,  2652,  2650,     0,  2651,  2656,  2634,  1617,
    2278,  2363,     0,  1620,  2588,   320,   337,  1753,  2850,  2005,
    2483,  2006,  1998,     0,  2018,     0,     0,     0,   366,   332,
       0,   324,   371,   220,   363,   378,   382,   380,  1143,   700,
       0,  1219,   504,   503,   502,   501,     0,   519,   499,   507,
      72,     0,     0,  1994,     0,     0,     0,     0,     0,  1092,
       0,  1764,     0,     0,  1742,  1542,     0,  1986,  1988,  1981,
       0,     0,     0,     0,     0,  2684,  2609,     0,     0,     0,
    2734,  2751,  2750,  2739,     0,     0,  1719,     0,  1714,     0,
    1192,  1660,  1661,  2421,  1659,  1651,  1654,  1658,  1657,  1202,
    1560,  1559,     0,  1198,  1516,  1201,  1518,  1515,  1514,  1513,
       0,  1559,  1621,  1628,  1211,     0,  1219,  1220,  1220,  2093,
       0,     0,     0,  2541,  2547,     0,  2540,  2539,     0,     0,
       0,  2562,  2544,     0,     0,  2508,  2548,  2549,  2552,     0,
       0,     0,     0,     0,  2546,  2466,  2510,  2511,  2516,  2506,
    2568,  2569,  2566,  2567,  2565,  2535,  1894,     0,  1922,     0,
       0,     0,     0,  1904,  1898,  1897,  1891,  1899,  1892,  1909,
    1908,  1907,  1864,  1863,  1857,  1915,  1903,  1901,   176,  1924,
    1862,  1861,  1902,  1900,  1843,  1844,  1845,     0,  1648,     0,
    1920,  1896,  1924,  1914,     0,  1924,  1924,  1905,  1906,  1883,
    1885,  1059,  1076,  1075,  1071,  1072,  1077,  1067,  1066,     0,
     321,  2836,  2844,  2848,  1648,  2748,  2746,   589,   826,  2618,
     139,   588,  2815,     0,     0,   588,   588,     0,  2774,   145,
     904,     0,     0,   127,   583,  1787,  1787,     0,  2123,     0,
       0,     0,     0,     0,     0,     0,   180,   189,     0,     0,
     404,   405,  1787,   403,   446,   447,   450,   451,   452,     0,
     453,  1787,  1787,   400,   426,   427,   430,   431,   432,   433,
     434,   396,     0,   401,   826,  2794,  2795,     0,   955,     0,
       0,  1105,   217,  1164,  1156,  1163,  1160,  1175,  1173,  1162,
     880,   879,     0,  1176,   197,     0,     0,   344,   353,   347,
     349,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    83,    84,   104,  1740,     0,  1127,
    1139,  1133,  1787,  1787,  1787,  1787,   402,   435,   436,   439,
     440,   441,   442,   445,   443,   444,     0,  1912,     0,     0,
    1813,     0,  2107,  1823,  1544,  1827,  1826,     0,  1398,     0,
    1446,     0,  1448,  1449,  1450,     0,     0,     0,     0,     0,
    1399,     0,  1343,  1400,  1401,     0,  1395,     0,  1396,     0,
       0,     0,     0,     0,     0,     0,  1452,     0,  1231,     0,
       0,  1347,  1348,  1340,  1332,     0,     0,  1425,     0,     0,
    1349,     0,     0,     0,     0,  1406,     0,  1426,  1504,     0,
    1506,  2097,     0,  1458,  1407,  1354,     0,  1456,     0,  1355,
    1427,  1428,  1429,  1409,  1410,     0,  1431,     0,  1411,     0,
       0,  1414,     0,     0,  1357,  1462,  1460,     0,     0,     0,
       0,  1464,  1359,     0,     0,     0,  1358,     0,     0,     0,
       0,     0,     0,     0,  1361,     0,  1341,  1461,  1463,  1417,
       0,     0,     0,     0,     0,  1370,     0,  1199,  1551,  2760,
    1187,     0,     0,  2749,  2757,  1333,     0,     0,  2098,  1241,
    1246,  1239,  1243,  2758,     0,     0,     0,     0,  1260,  1259,
       0,     0,     0,  2758,  1627,  1263,     0,     0,  1442,  1443,
    1499,     0,  1727,  1724,  1737,     0,  1788,     0,     0,  1048,
    1047,  1733,  1046,    79,     0,  1964,  1957,  1976,  1952,     0,
     275,   284,   277,   281,   282,   278,  2699,     0,  2698,     0,
       0,     0,     0,  2617,  2676,  2679,  2104,     0,     0,     0,
    2592,  2599,  2595,  2600,  2593,  2594,  2598,  2601,  2602,  2589,
    2596,  1648,   321,     0,  2007,  1166,  1168,  1169,  1167,  1175,
       0,     0,  2577,  2578,  2576,  2575,   328,   369,   321,   321,
       0,   509,     0,   518,     0,   530,     0,     0,     0,  1996,
    1995,     0,  1150,  1153,  1154,  1099,  1097,  1096,  1098,  1087,
    1093,  1094,     0,   575,  1770,     0,     0,     0,  1776,  1757,
    1767,     0,  1674,  1675,  1671,  1672,  1670,  1673,  1991,  1989,
    1984,     0,   253,  2610,     0,     0,     0,     0,     0,     0,
       0,  2114,  1718,  1715,     0,  1705,  1707,  1708,  1710,  2092,
    1642,  1645,     0,     0,     0,     0,  1559,  1544,     0,     0,
    1536,  1561,     0,  1561,  1538,  1539,  1544,  1544,  1541,  1556,
       0,     0,  1623,     0,  1213,  1221,  1216,     0,  2504,     0,
    2534,     0,   825,   824,   823,   821,  2561,     0,     0,     0,
    2554,  2555,     0,     0,  2531,  2532,  2533,     0,  2536,  2513,
    2514,  2515,     0,  1921,     0,  1868,  1925,  1926,     0,  1890,
    1889,  1859,     0,  1882,  1840,  1922,  1858,  1620,  1914,  1855,
    1856,  1074,     0,  1057,     0,   321,     0,     0,  2847,  2747,
     136,   826,     0,   140,     0,     0,   178,  2824,  2810,     0,
       0,     0,     0,     0,     0,     0,   592,     0,     0,   938,
     183,   186,   184,     0,   185,     0,     0,   455,   454,     0,
    1912,   448,     0,     0,     0,     0,     0,     0,     0,     0,
     147,     0,     0,  1912,   428,   407,   408,   411,   412,   413,
    1034,  1787,  1034,     0,  1787,  1787,  1034,  1787,     0,     0,
    1787,  1787,     0,     0,  1787,     0,     0,  1034,     0,  1787,
       0,  1021,     0,     0,  1787,  1787,  1787,  1787,  1787,  1034,
       0,     0,  1787,  1787,   494,  1787,     0,     0,  1052,     0,
       0,  1787,  1787,  1787,  1787,     0,     0,  1787,  1787,     0,
    1787,   971,  1020,   594,   621,   622,   935,   970,   972,   984,
     490,     0,  1002,  1023,  1024,  1022,     0,  2796,     0,   957,
     959,  1104,     0,     0,   321,     0,     0,  1580,   200,   321,
       0,   350,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1141,     0,     0,     0,
       0,  1912,   437,     0,  1787,   397,   414,   415,   418,   419,
     420,   421,   422,   425,   423,   424,  1744,  1826,  1544,  1620,
    2105,  1620,     0,  1825,     0,     0,  1447,  1483,     0,  1510,
       0,  1337,   783,   783,   783,  1493,   768,  1497,  1488,   783,
    1489,   783,  1491,     0,     0,     0,  1296,  1312,     0,     0,
       0,     0,     0,  1454,  1451,     0,     0,     0,     0,     0,
    1477,     0,     0,     0,  1342,     0,  1437,  1459,  1457,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1465,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   843,   849,   852,   853,   855,
     847,     0,  1419,  1330,  2752,  1200,  1620,  1219,  2761,  2763,
       0,  2743,  1552,  2755,   929,  1470,     0,  1257,  1253,     0,
    1251,  1626,  1272,  1271,     0,     0,     0,  1261,  1220,  1433,
    1219,     0,  1500,  2099,  1725,  2623,   469,   638,  2681,  1723,
      77,  1955,     0,  1950,  1953,     0,     0,  2696,     0,  2707,
       0,  2686,  2687,     0,     0,  2683,     0,     0,     0,     0,
       0,     0,  2587,   321,  1797,     0,  1175,  1179,  2011,  2580,
    2581,  2579,     0,   361,   361,   361,   361,     0,   510,   511,
     513,  1220,   527,   505,     0,   497,   500,     0,   509,     0,
       0,  1089,  1095,     0,  1203,     0,  1789,  1774,  1781,  1775,
       0,     0,     0,  1773,  2089,  2088,  2095,  2737,     0,  1586,
       0,     0,  2608,  2685,     0,     0,     0,  2740,   815,  1709,
       0,     0,  1646,  1647,  1644,  1662,  1653,     0,  1656,  1655,
       0,  2743,  1554,     0,  1540,  1537,  1562,     0,  1561,  1561,
    1544,     0,  1520,  1519,  1613,  1546,  1203,  1622,     0,  1624,
    1639,  1212,     0,  1217,  1225,  1224,  2090,  2097,  2502,  2542,
       0,     0,     0,     0,  2559,  2553,  2550,  2551,     0,  2512,
    2518,  2517,  2520,  2522,  1684,  1685,  1683,  1681,  1682,  1923,
    1648,  1878,  1877,  1851,  1870,  1872,  1924,  1073,     0,  1080,
    1078,  1801,  1804,     0,     0,  2837,  2849,     0,     0,  2818,
       0,     0,     0,   156,     0,   920,   922,   921,   906,   905,
       0,   131,   133,     0,   679,   128,   481,   490,   593,   596,
     637,   636,   188,   187,   192,   193,  1688,  1689,  1686,  1687,
     461,   474,  1690,   475,   449,   151,   150,   152,   153,   155,
     154,   149,   954,     0,   462,   463,   429,     0,   409,  1035,
     927,   588,  1006,     0,   680,   588,   881,   881,   586,     0,
       0,  1144,     0,     0,  1746,     0,     0,  1144,     0,     0,
       0,  1787,     0,  1014,   966,     0,  1748,     0,  1746,  1746,
    1015,     0,     0,   967,  1787,     0,     0,     0,     0,     0,
    1746,  1144,     0,     0,     0,   492,     0,  1144,   986,  1055,
    1053,  1054,     0,  1144,  1144,     0,     0,     0,     0,   627,
     628,   626,     0,     0,     0,   619,   595,   826,   968,   491,
     969,   679,     0,  1049,   676,   682,  2100,     0,  2798,  2720,
       0,     0,   161,  1108,     0,  1107,   232,   231,     0,   223,
     300,   370,     0,   222,     0,  1583,     0,  1584,  1581,  1582,
     321,   354,   109,   113,   105,    90,    86,   117,   118,    88,
      89,    93,    92,    94,    95,    98,    99,    96,    91,    97,
      87,   121,   123,   122,   100,   119,   120,    85,   468,   467,
     466,   465,   438,     0,     0,  1912,   416,     0,  1620,  1639,
    2108,  1817,     0,  1371,  1511,     0,     0,   784,  1484,  1485,
    1495,     0,  1496,   770,   769,   785,  1487,  1490,  1494,  1492,
    1336,  1344,  1393,     0,  1310,  1394,     0,  1424,  1339,  1338,
       0,     0,     0,  1377,  1404,     0,  1378,     0,  1475,     0,
       0,  1351,     0,  1353,     0,     0,  1439,  1408,  1430,  1380,
    1412,     0,  1356,  1331,     0,  1381,     0,  1386,  1384,     0,
    1360,     0,     0,  1367,     0,  1365,     0,  1366,     0,  1368,
    1416,  1418,     0,     0,   854,   840,   841,   842,     0,   844,
     846,   848,     0,     0,  1628,  1553,  2762,  1189,  2753,  1199,
       0,     0,  1472,  1249,     0,  1258,  1255,     0,  1252,  1221,
    1444,  1434,     0,     0,   292,   287,   295,   289,   291,   290,
     296,   297,   298,   299,   293,   288,   294,   286,   285,  2697,
       0,  2616,     0,  2690,  2692,  2621,  2678,  2677,  2700,  2700,
    2700,     0,   340,     0,  1754,  1170,  1175,  1179,     0,  1171,
    2022,   329,   334,   364,   362,   376,   379,   383,   381,   514,
       0,     0,     0,   534,     0,   532,   508,     0,  1151,  1100,
     375,  1219,  1771,  1783,     0,  1791,     0,     0,  1768,  1778,
       0,     0,     0,  1777,   494,     0,   254,     0,  2605,  2606,
    2604,     0,  1716,  1706,  1645,  1652,  2749,  1613,  1548,  1544,
    1517,  1544,     0,     0,  1525,  1544,  1521,  1523,  1578,  1219,
    1632,  1645,     0,  1648,  1223,  1222,     0,  2564,  2563,  2557,
    2556,  2558,  2537,     0,     0,  1869,  1648,  1865,     0,     0,
       0,  1620,     0,   373,  2619,   202,   652,   653,   651,   650,
       0,  2825,     0,     0,     0,   129,     0,     0,   482,     0,
       0,     0,   654,   655,   657,   658,  2022,   489,   826,   597,
     148,   410,   681,   928,  1144,     0,     0,     0,   881,   675,
     588,   927,   882,   588,   588,     0,  1004,  1030,  1031,     0,
       0,   605,   602,     0,   614,   987,   978,   988,   999,  1001,
       0,   604,   629,     0,     0,   617,  1746,     0,  1012,     0,
       0,   599,     0,     0,   648,   649,   647,   623,   630,  1032,
    1033,   600,   601,     0,     0,  1635,  1637,  1645,   607,   606,
    1695,  1694,   616,     0,   603,     0,  1018,   994,     0,   645,
     643,   640,   642,   641,   646,   644,   618,   609,   608,   611,
     610,   613,   612,   615,   631,   983,     0,  1034,  1034,  1003,
       0,  2103,     0,  1051,  1005,     0,   659,   677,   660,     0,
       0,   635,   634,   632,   633,     0,     0,  2721,     0,     0,
       0,   956,     0,   164,   162,   172,  1110,  1111,     0,     0,
       0,     0,     0,     0,   218,     0,  1178,     0,     0,     0,
     110,   112,     0,   114,   116,     0,   106,   108,   399,   464,
     417,  1826,  1819,  1663,     0,  1512,     0,     0,     0,     0,
     831,     0,     0,   786,  1498,   748,   783,  1307,   768,  1300,
    1302,  1298,     0,   749,  1301,   783,     0,  1304,  1306,  1297,
       0,  1455,     0,     0,     0,  1478,     0,     0,     0,     0,
       0,     0,     0,  1334,     0,  1435,     0,     0,     0,     0,
       0,     0,  1364,  1362,  1363,   838,  1421,     0,   851,   845,
     843,   850,     0,  1623,  1188,  2756,   930,  1254,     0,  1445,
    1956,  1977,     0,  2691,  2689,  2688,     0,     0,  2705,  2705,
    2705,  1796,  1795,     0,  1794,   321,   336,   339,  1798,  1172,
    1180,  2024,  2023,     0,     0,   512,   515,     0,   507,     0,
     531,     0,   498,   576,     0,     0,     0,  1792,  1780,  2743,
    1769,  1772,  2097,  1543,  1587,  2607,   816,  2025,  1643,  1549,
    1547,  1555,     0,  1513,  1544,  1544,     0,  1513,     0,     0,
    1545,  1575,  1557,  1633,  1634,     0,  1629,  1631,  1625,  1696,
    2091,  2519,  2521,  1871,  1079,  1081,  1803,  1639,  1805,     0,
     203,   205,   206,     0,   213,   391,   390,     0,     0,     0,
       0,     0,     0,     0,   479,   476,   679,   478,   578,   598,
     989,     0,   588,   877,   878,   927,   902,  2100,   927,   927,
       0,     0,     0,   977,     0,  1130,     0,   982,   822,   624,
       0,   973,  1013,  1046,     0,   625,  1049,   975,     0,  1638,
     493,   974,   996,   980,  1975,  1007,  1050,   859,   762,   713,
     704,   783,   707,   706,   783,   718,   768,   764,     0,   768,
     768,   741,   740,   758,   744,   726,   831,   831,   725,   761,
     831,   745,   743,   747,     0,   749,   768,   754,   742,   746,
     763,   739,     0,   760,   783,   783,   783,   722,   759,   831,
       0,   752,   783,   683,   768,   831,   836,     0,     0,   783,
     785,  2102,  2800,     0,  2802,   171,   160,     0,     0,   958,
     960,     0,     0,   961,  1116,     0,   226,   301,   822,   302,
       0,   229,  1174,  1585,   321,   102,     0,   103,     0,   101,
       0,     0,  1814,  1372,   781,   779,   782,   780,   829,   834,
     832,   830,     0,   836,  1486,     0,     0,  1309,  1303,   750,
    1308,  1299,   831,  1397,  1375,  1376,  1405,     0,  1476,  1467,
    1403,     0,  1352,  1436,     0,     0,  1413,  1382,  1385,  1383,
    1388,  1389,     0,  1420,     0,  1639,  1256,     0,  1954,  2708,
    2693,     0,     0,  2704,  2702,     0,  2703,  2701,  2669,     0,
    2614,  2615,  2613,  2597,     0,   321,   341,     0,     0,   335,
    1219,   520,     0,   537,   536,   533,  1199,  1782,  1784,  1790,
    1779,     0,  2033,     0,  1526,     0,  1530,  1535,  1531,     0,
    1522,     0,  1579,     0,  1199,  1645,     0,  1711,  1663,  2819,
       0,     0,  2817,   216,   214,   215,     0,   209,   211,     0,
     394,   392,   393,     0,     0,     0,     0,     0,  1645,   925,
       0,   483,  2743,   592,   656,   579,     0,   991,     0,   927,
     902,  2100,     0,   661,     0,   665,   667,   587,  1017,     0,
    1049,   979,  1000,  1019,  1011,  1010,     0,  1009,  1144,  1636,
     995,   997,  1092,     0,     0,   863,   712,   705,   723,   721,
     772,   765,     0,   772,   772,   732,   748,   727,     0,   831,
     738,   731,   750,   753,   755,   757,   772,     0,   831,   720,
     719,   729,   716,   772,   787,   766,   751,   831,   709,   837,
     836,   711,   831,   836,   772,   772,     0,  2799,     0,  2797,
       0,   158,   163,   173,   174,   948,     0,  1117,  1113,  1114,
    1109,     0,   806,     0,   224,   225,   237,   236,   228,     0,
     321,   111,   115,   107,  2421,  1664,  1820,   835,   828,   833,
       0,  1305,  1479,  1645,     0,  1438,  1440,   839,     0,  1648,
       0,  2675,  2674,  2673,  2670,     0,     0,     0,     0,     0,
       0,     0,  2706,  2710,  1793,     0,     0,     0,   528,     0,
       0,   562,   577,     0,     0,     0,     0,  2026,  2028,     0,
    1717,  1550,     0,     0,     0,     0,     0,  1567,  1568,     0,
       0,  1573,  1577,  1558,  1630,  1697,  1210,  1712,  1802,     0,
     204,   207,  2826,   213,   212,  1219,   169,     0,     0,   892,
       0,   924,     0,   894,   480,   490,     0,   485,     0,     0,
     990,   678,   673,   669,     0,   903,     0,   663,     0,     0,
       0,     0,     0,     0,     0,  1016,  2067,  1008,   494,   976,
       0,   981,   620,     0,   862,     0,   867,   776,   777,   778,
     733,   773,   775,     0,   931,   735,   703,   728,   756,   734,
       0,   730,   717,   795,     0,     0,     0,     0,   791,     0,
     857,     0,   798,   684,     0,   685,   788,   790,     0,     0,
       0,     0,   724,   708,   710,   714,   715,   701,   702,  2101,
    2801,  1195,  1184,  2806,   165,   962,   321,  1112,     0,  1119,
     245,   243,   321,   233,   241,   235,     0,   242,   303,   230,
    1665,     0,  1219,  1815,   771,     0,  1481,  1350,  1422,  1696,
    1978,  2671,  2711,  2714,  2712,  2713,  2716,  1667,     0,  2715,
    2709,     0,  1541,  1220,     0,   521,     0,   524,   526,   540,
       0,  1787,  1787,     0,     0,  1787,  1787,  1787,  1787,   555,
     563,   565,     0,     0,     0,     0,     0,  2027,     0,     0,
    2034,  2036,  1527,     0,  1532,     0,  1524,  1563,  1563,  1574,
       0,  1194,  2820,   181,   210,  2811,   161,   170,     0,   890,
       0,  1787,     0,  1025,   893,   918,   900,     0,  1645,     0,
    1025,   895,   917,   898,  2022,     0,  2737,   993,     0,     0,
       0,   671,     0,     0,     0,     0,  2069,  2068,   985,     0,
     860,     0,   864,   865,   866,     0,   858,   774,   831,     0,
     831,   801,   800,  1226,   793,   808,   688,     0,     0,   799,
       0,   789,   797,   792,     0,     0,  2804,     0,     0,  2803,
       0,   167,   175,  1118,  1123,     0,  1120,  1122,     0,   227,
     244,  1666,  1821,  1645,  1210,  1669,  1668,  1799,  1807,     0,
    2012,     0,   529,   522,     0,     0,   538,     0,     0,  1787,
    1787,     0,     0,     0,     0,     0,   535,   564,  1787,  2031,
    2032,     0,  2029,     0,     0,  2035,     0,     0,     0,  1571,
    1569,  1219,     0,  2827,     0,   172,     0,     0,     0,  1025,
     891,   916,   915,   896,   910,     0,     0,   132,  1027,  1026,
     901,     0,   923,   926,   134,   899,   477,   487,   486,   992,
       0,     0,     0,     0,     0,     0,     0,     0,   861,     0,
       0,   736,   932,   737,     0,   807,  1226,   796,  1219,   805,
     804,   802,   803,   767,  2743,     0,     0,     0,   166,     0,
     159,  1115,     0,   234,  1480,  1197,     0,     0,   815,   516,
     528,   525,   548,   541,   544,     0,   574,   568,     0,     0,
     570,   571,   569,   566,   559,     0,   557,     0,  2030,  2038,
    2037,  1529,  1534,     0,  1564,     0,     0,     0,     0,     0,
    1700,  1702,  2821,   190,   182,     0,   321,     0,     0,   146,
     908,   907,   130,   897,   909,   919,  1029,  1028,   914,   913,
     911,   912,  2743,     0,     0,     0,   890,     0,   892,   894,
       0,   873,     0,   872,     0,   869,   868,  1227,     0,   794,
       0,  2805,     0,  2807,     0,   168,  1121,  1806,  1808,  2013,
     523,   548,     0,   546,     0,   542,   539,   543,   572,   573,
       0,   556,     0,   567,  1566,  1565,  1580,     0,  1220,  1698,
    1219,   181,   191,  2828,  1219,   174,   488,     0,   890,     0,
     662,   890,   666,   668,   998,   875,   876,   874,     0,     0,
    1228,   689,  2808,  2809,  2039,   545,     0,   553,   549,   551,
     554,   562,   561,   558,     0,     0,  1703,  1701,  2822,  2812,
     157,   674,   670,   890,   664,     0,     0,   691,   690,   692,
       0,  2025,   547,     0,     0,   560,  1572,  1570,   321,     0,
     672,   871,   870,     0,   696,   686,   693,   695,     0,  2033,
     552,   550,  2823,     0,   698,   697,   694,     0,  2041,  2813,
    2040,     0,  2045,   321,     0,     0,  2052,  2814,  2043,  2044,
    2042,  2047,     0,     0,  2049,  2050,     0,  2014,  2051,  2046,
       0,  2053,  2055,     0,  2048,     0,  1219,  2054,     0,  1220,
    2056
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    64,   637,  1639,    65,    66,    67,    68,    69,  1454,
      70,   868,  1358,  1950,  1951,    71,   571,    72,  1717,  2314,
    2315,  3735,  3736,  3729,  3730,  3732,  3733,  2316,   697,   698,
      73,  2716,  3900,  3586,  3587,  2208,   645,   646,  1110,  2710,
    2739,  2740,  1648,  3583,  3711,  4414,  3715,  4561,  4670,  4496,
    2819,  4013,  4415,  4416,   566,  2705,  1683,  4613,  2236,  4714,
    2237,    74,   690,  1160,  1710,  1711,  3889,  3890,  3891,  4131,
    4136,  4137,  4138,  4139,  2824,   930,  2272,  2825,  3721,  4241,
    4248,  4249,  3298,  4422,  4423,  4424,  4246,   974,  4425,    75,
     597,   598,   976,  1490,  1966,  1491,    76,    77,   565,  1381,
    1382,  1383,  1384,  2515,  1967,  2510,  2511,  3467,  3299,  4244,
     931,   932,    79,   572,   933,   934,   935,  1438,   936,   937,
     938,   939,  3032,   940,  1434,  3491,   909,   910,  2542,  3482,
    3827,    80,   535,   693,   694,  1716,  2289,   695,  2290,  2830,
    3728,   696,  1162,  2286,  1164,  3495,   941,  2557,   942,  1430,
      81,  1153,  1702,  1703,   943,  1082,  2200,   963,  2050,  3496,
    1443,   944,  2558,  2560,  2559,    82,   582,   623,   592,  3897,
    4143,   669,   670,   708,  2337,   671,  1178,  1128,  1685,  2261,
    2262,  2745,  2746,  2865,  2866,  2867,  2253,  2254,  2255,  2326,
    2327,  2328,  2243,  2244,  2245,  1689,  2240,  2241,   672,  1129,
    1139,  2256,  2257,  2258,  2871,  2330,  2331,  2332,  2333,  2259,
    1942,  2260,  3190,  3175,  4153,  4152,  3176,  3907,  4516,  4732,
    3596,  3597,  3279,  3663,  2278,    83,   585,   952,  1451,  2566,
    1452,  2568,  3037,  3038,  3039,  2032,  2033,  4101,  2037,  2565,
    4288,  4680,  4456,  4457,  3041,  4455,  3045,  3504,  3505,  3839,
    4103,  4291,  4685,  4585,  4766,  4683,  4762,  4684,  4764,  4834,
    4808,  4809,  4596,  4695,  4696,  4770,  4811,  4469,  4470,  4471,
    2588,  3054,  4106,  4156,  2700,  1675,  1676,  3616,  1102,    84,
    3177,  2802,  3178,  3179,  3686,  2804,  2805,  2996,  1565,  3676,
    3647,  3580,  3591,  3592,  3593,  3594,  3595,  4346,  4523,  4348,
    4349,  4520,  4642,  4519,  3696,  3609,  3213,  3214,  3284,  3699,
    4214,  4393,  4394,  4829,  4845,  4846,  4847,    85,   949,  4018,
    3994,  3995,  3996,  3997,  3998,  3999,  4000,  4402,  3362,  3363,
    4370,  4371,  4372,  3357,  3358,  3754,  4395,  4396,  4397,  4019,
    4544,  4042,  1530,  1531,  3532,  1543,  1544,  2653,  2116,  2654,
    1679,  4043,  4044,  4221,  3423,  4072,  3429,  3430,  3431,  2955,
    2956,  2957,  2958,  2959,  2454,  4398,  3698,  4185,  4363,  4366,
    4536,  4745,  3610,  3215,  3613,  1059,   647,  3216,  3217,  4619,
    4503,  4510,  4620,  4511,  4504,  4163,  2713,  4621,  4622,  4623,
    4513,  4506,  3168,  4147,  4148,  3602,  3442,  4373,    86,   142,
    2264,  1120,  1131,  1127,  1150,   676,  2268,  1132,  2820,  3292,
    4235,   659,  2806,  4178,  3925,  4182,  2807,  3626,  2808,  4157,
    4340,  2809,  3942,  4180,  4360,  3627,  3628,  2810,  2811,  2812,
    4627,  4628,  4629,  3218,  1418,   674,   675,  1143,  1144,  1145,
    2501,  3694,  3262,    87,  2196,  2191,    88,  1072,  1073,  1074,
    1610,  1611,  2194,  2195,  2693,  3150,    89,   700,  1721,  1464,
    2048,    90,   961,  2579,  2580,  2581,  3051,    91,  1152,  1699,
    1700,  2271,  3295,  3718,  4014,  4240,  4419,  4236,  4565,  4566,
      92,   702,  1171,    93,   540,  1729,  1730,  1731,  2319,    94,
    1445,   150,    95,   960,  1457,  1460,  1461,    96,   689,  1154,
    1155,  1156,  1157,  2274,    97,  2013,  2545,  2546,  2547,  2548,
    1707,  2826,  1708,  1709,  2283,  3489,    98,    99,   633,   634,
    2461,  2462,   603,   986,   604,   605,   606,  2964,  2965,  2966,
    2093,  1003,  1004,  1005,  1513,  1515,  1516,  1607,  1517,  2029,
    3113,  4655,  1214,  1210,   830,   831,   832,   833,  1305,  1306,
    3707,   834,  1315,  1906,  3374,  3769,  4052,  1764,  1765,   835,
     836,   837,   838,   839,   840,  1933,  3395,  3396,  3785,  2487,
    2488,  2489,   841,  2375,  3380,  2389,   842,  1298,  1891,  1821,
    3777,  3388,  4057,  4262,  1749,  2351,  2903,  3750,  3365,  2991,
    2456,  1237,  1238,  1195,  2358,  1755,  2094,  2095,  2096,  2097,
    2098,  3868,  3869,  4302,  4115,  4304,  4119,  2635,  2636,  2054,
    2055,  2099,  2100,  3090,  4113,  2457,  2458,  2459,  3091,  3539,
    3105,  3106,  4124,  2626,  2101,  3097,  4609,  4310,  4311,  4707,
    4706,  4312,  4122,  4123,  3870,  3871,  3306,  3307,  3308,  3068,
    1811,  1812,  1819,  1411,  1412,  1750,  2103,  2640,  3110,  3552,
    2478,  2642,  3550,  3876,  2815,  3655,  3656,   989,   990,  2079,
    2620,  3084,  1506,  1507,  1508,  2085,  3085,  3086,  4032,  4449,
    4247,  2960,  3139,  3191,  1782,  1783,  3662,  4127,  4490,  4709,
    4710,  4711,  2076,  2077,  2615,  2616,  2617,   991,   992,  1503,
    2078,  3078,  3857,   100,   547,   101,  1948,  2994,  1355,  2507,
    1169,  1469,  1736,  1737,   858,   854,   561,   102,   573,  2543,
     103,   593,  2052,   914,   966,  1470,  1471,  2589,  3055,  3062,
    2590,  3067,  3849,  3057,  3512,  3513,  2496,  2497,  3058,  3515,
    3846,  3823,  3824,  3484,  4097,   104,   621,  3571,  3151,  3152,
    4577,  4578,   967,   105,   546,  1182,  2879,  4256,  1742,  2339,
    4433,  1183,  1184,  2342,   713,   714,   106,  1077,   617,  1589,
    1590,  1591,  2178,   107,   609,  1060,  3140,  3566,  2162,   956,
    1352,  1570,  1063,  1571,  2148,  2675,  1554,   108,  1116,  1115,
     686,   109,   110,   654,   151,  1671,   111,   869,  1374,  1962,
    3003,  3004,  3452,  1375,  1376,  2508,  4078,   112,   594,   971,
     972,  1475,  1473,  2600,  2057,   113,   587,   957,  2043,   114,
     576,   919,  1422,  2012,   115,   116,   117,   921,  3490,  4678,
    4804,   580,  2015,  1426,  3908,  4112,  4297,  4298,  4300,  4480,
    4481,  4831,  4862,  4870,  4866,  4873,  4874,  4877,  4881,  4882,
     844,  1088,  1089,   845,  4355,   846,   847,   848,  3063,  3064,
    2621,   849,  3065,   850,  3285,  1170,  1739,   569,   531,   666,
    1090,  2612,   852,   946,  1123,  1458,  1982,  1983,   533,   534,
     118,   608,  1007,  2111,  1520,  1021,  1548,  1538,  1547,  2136,
    2670,  2139,  2671,  2672,  3563,  3131,  3564,  3132,  1066,  2132,
    1521,  3133,  1522,  2125,  2126,  2127,  2128,  3125,  1536,  2122,
    2145,   119,   922,   539,  1428,  1429,  2554,   120,   620,   121,
    1413,  2003,  2004,  2539,  3021,  2540,   122,   980,   981,   123,
     897,  2703,  2523,  1938,  1126,  1939,  1989,   900,  1387,   901,
     902,  1402,  1396,  1405,  1399,  4275,  4087,  4088,  2527,  1946,
    1984,  2066,  3013,  3816,  1985,  1976,  2517,  2518,  3818,  4090,
    3471,  4282,  4283,   124,   155,   125,  4715,   542,   705,  1177,
    1498,   126,   127,   128,   129,  1501,  1632,  2610,  1633,  1634,
    1635,  1636,  2206,  2073,  1887,  1888,  3440,  1295,  1296,  2464,
    2967,  2968,  1006,  1105,  1659,  1650,   143,   144,   145,   146,
    1147,  1148,  3288,  3706,  4003,  4229,  4230,  4413,  4559,  1652,
    3162,  4614,  4839,  4863,  1653,  1654,  1655,  3575,  4319,  4612,
    4781,  4838,  1656,  3161,  3894,  4493,  4716,   130,  1091,   631,
    1630,  1625,  1627,  2203,  2698,   131,   132,   133
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4278
static const int yypact[] =
{
    6611,  2890,  1824,  1646,   411,   790, 57939, -4278,   728,   -88,
   -4278,   455,   923, -4278, -4278, -4278, -4278, -4278,  3725, -4278,
   57939,   999,  1176, -4278, 26127, -4278, -4278, -4278,   -23, -4278,
     109,   -88, -4278,   999,   479, -4278, 57939, -4278,   880,  1345,
     999, -4278, -4278, -4278, 50954, -4278,   455, 57939, -4278,   849,
   -4278, -4278, 50954,   385,   224,   886,   -19, -4278, -4278, 57939,
   -4278,  2544, -4278,   851,  1542,  1408, -4278, -4278,  1193, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,  3436, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, 26768,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,   950, 57939,   980, 57939,  1431, 57939,
   49049, 57939, -4278,  1506, -4278, -4278,  1516,  1040, -4278, -4278,
     -88,  1085, -4278, -4278,  1695,   455, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,  1117, -4278, -4278,  1191,   411, -4278, -4278, -4278,
    -132, -4278,  1790,  1616,  1406, 57939,   822, 12441,  1650,  1650,
    1650,  1677,  1708,  1650,  1650,  1650, 57939, -4278,  1650,  1650,
    1650,   -88, -4278, -4278, -4278,  1819, 37619, 57939,  1583,   219,
     -76, 49049, -4278,  1451, 57939,   411,    75, -4278,  1718, -4278,
   -4278, -4278, 64289,   -88, -4278,  1929,  1785,   355, 57939, -4278,
   -4278, -4278, 64289,   213,    52,  1386, -4278, -4278,  1540, -4278,
   38254,   188, -4278, -4278, -4278,   814,  2772, -4278, 28691,  4282,
    1540,  1533,   411,   -97,  1543,   411, -4278, -4278, 57939,   411,
     -88,  1757, -4278, 12441, -4278,   179,   179,   179, -4278,   179,
   -4278,   179,   851,  1403,  1582, -4278, -4278,  1412, 57939,  1850,
   -4278,  1850, -4278, -4278,  1850,  1238,  1579,  1848,  1865,  1868,
    1552,  1410,  1040,  2329, -4278, -4278, -4278,  1449,   -30, -4278,
    1512, 41429, -4278, 57939, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,  1372, -4278,  1565,   733,  1600,  1955, -4278, 49049,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, 26127,
    1488, 57939, -4278,  1992, 12441,  1191, -4278,  1578, -4278, -4278,
   26127, -4278, -4278, 26127,   231,    36, 57939, -4278, -4278,  2152,
   -4278, -4278, -4278, 51589,   822,  1508,  1518,  1520, 17721, -4278,
    1545,  1549,  1554, 12441,  1569,  1576,  1581,  1584,  1595,  1619,
    1626,  1631,  1636,  1639,  1641,  1653,  1665,  1669,  1669,  1669,
    1672,  1674,  1680,  1697,  -165,  1702, -4278,  1725,  1759,  1763,
   -4278, -4278,  1767,  1769,  1774,  1780, -4278, -4278,  1787,  1797,
    1799, 13101,  1805,  1807,  1813, -4278, 22910,  1821,  1823,  1831,
    1854,  1878,  1894,  1904,  1918,  1926, -4278, -4278, 12441,  1672,
   -4278, -4278,  1948, -4278,  1957,  1961,  1965,  1972,  1978,  1982,
    1993,  2000,  2011,  2014,  2031,  2036,  2039,  2045,  2057,  2060,
    2064,  1672, -4278,  1051,  2073,  2079,  1121,  2082, -4278,  2088,
   -4278,   189,  2093,  1669,  1672,  1672,  2095,  2097,  2103,  2110,
    2119,  2130, 17721, 17721, 17721, 12441, -4278, 57939, -4278, 57939,
    2018,  3096, -4278,  2696, 17721,   200, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278,  1563,  1721, -4278, -4278, -4278, -4278, -4278,
   -4278,  2133,  1585,  2128, 57939, 57939, 57939,  2261, 57939, 57939,
   57939, -4278, 49049,  1964, 57939, -4278, -4278,  1650,  1756,  5019,
   31891,  2101,  2056,  1893,  1669, -4278, -4278,   725,   746,   780,
    2169, -4278, -4278,  2222,   784,  2195, -4278,   820,   431, -4278,
     119,   829,   844, -4278, -4278, -4278, -4278, -4278, -4278,  1987,
    2395,  2146, -4278, -4278,   162, -4278, -4278, 57939, -4278,  2646,
   12441, -4278, -4278, -4278,  2573,  2300, -4278, -4278, -4278,   217,
    2761,   240, 26127,  1646, 57939,   158, 65559, 65559, 57939, -4278,
   61114,  2156, -4278, -4278,  5823, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,  2171, -4278, -4278,  2184,
   12441,  1365, -4278,  -157, -4278, -4278,  2538, -4278, -4278, 45874,
   26127,  1341, 64924, -4278, -4278, -4278, 23553, -4278, -4278,  2796,
   -4278,  2192, -4278, -4278,  1721,  3094, -4278,  2474,  2101,  2483,
   -4278,  2661, -4278,  2492,  2403,    36,  2288, -4278,  2846,  2627,
   -4278,  2708,  1599, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278,  2259,  2772, -4278, -4278, 52224,   680,  2424,
    -138,  1027,  1096, 36981,   752, 49049,  1127,   115, 29331, 42064,
    2262, -4278, -4278, -4278,   796,  2426, -4278,  2760, -4278,   -10,
   -4278,  2278,  2265,   -10, 46509,  2627,   203, -4278,   379, -4278,
    2753, -4278, -4278, -4278, -4278,  2416,  2400,  2450, -4278,   390,
    2802, -4278,   411, -4278,    56, -4278,  2431,  2627,   -10,   203,
   -4278,  2683,  2810,   627,  2779, -4278,   984, -4278, -4278, -4278,
     -71,  2886, -4278,  2325, -4278, -4278, -4278, 26127, -4278, -4278,
   -4278,  2573, -4278,   196, -4278, -4278, -4278, -4278,  2328, -4278,
   -4278,  2614,  2447, -4278, -4278,    73,  2344,     7, -4278,  2840,
   -4278,  1646, 57939, -4278, -4278, -4278,   835,  1703,  1516,  1850,
   -4278,  1850,  1850,  1850,  1850,  1085, 42699, -4278, -4278, -4278,
    2884,  2902,  1669,  2359, -4278, -4278, -4278, -4278, -4278,  3021,
   -4278, -4278,  2656,  2923,  2923,  2923,  3044, -4278, -4278, -4278,
   26127, -4278, -4278, -4278,   733, -4278,  2572,  2440, -4278, 57939,
    1600, -4278, 26127, -4278,  2805,  2415, -4278, -4278,  2676, 12441,
   -4278, -4278, 12441, 64289,  2918,  2018, -4278, -4278,    59, -4278,
   -4278, 26127,   299, -4278,  3023,  2643, -4278, -4278, -4278,  3021,
    2923, 26127, -4278,  2445, -4278,  2434, -4278, 12441, 12441,   356,
    3034,  3100,  3100,  3100,  2018,  2496, 12441, 12441, 12441, 12441,
   12441, 12441, 12441, 12441, 12441, 12441, 12441, 12441,   367,  2471,
   -4278, -4278, -4278,   307, -4278,  2476, 12441, 12441, -4278, 12441,
   12441, 27409, -4278,  4623, 12441, 12441,   375,  2993, 12441, 12441,
   12441, 12441,  4164, 12441, 12441, 12441, 27409,  3131,  2485, -4278,
    2484,  1081, 12441, 12441,  1170, 12441, 12441, 12441, 12441, 12441,
   -4278, -4278, 12441, 12441, 12441, 12441, 17721, 12441, 12441, 12441,
   12441, 12441, 12441,  2500, 12441,  3100,  3100, 12441, 12441,  1484,
   -4278, -4278, 12441,  2977,  2977, -4278, 12441,  9141, 12441, -4278,
   -4278,  2504, -4278, -4278, -4278, 27409,  3100,  3100, 12441, 12441,
   12441,  3034,  3034,  3034,   320,  2513,   580, 12441, 29971,  2510,
   -4278, -4278, -4278, -4278, 12441, 12441, 12441, 17721, -4278,  1448,
   -4278, -4278, -4278, -4278, -4278, 13761, 17721, 17721,  2497, 17721,
   17721, 17721, 17721, 17721,  2904, 17721, 17721, 18381, 19041, 17721,
   17721, 17721, 17721,  1158,  3034, 49049, 17721, 12441, -4278, -4278,
   57939, -4278, -4278, -4278,  2523, -4278,  2815,  1964, -4278, 47144,
   -4278,   -43,  3033, -4278, 45874, 26127, -4278,  2539, -4278,  2927,
   -4278,  2929,  2931,  2938, -4278, -4278, -4278, -4278,  3159,  2941,
   -4278,   411,  2945, -4278, -4278,  2563, -4278, -4278, -4278, 19701,
   49049, -4278,  2576, -4278,  2593, -4278, -4278, -4278, -4278, -4278,
   -4278,  2684, -4278, -4278, -4278, -4278,  2582, -4278, 45874,  2582,
   -4278, -4278,  2582, -4278, -4278,  2582, 41429,    37,  3643, -4278,
   -4278, 57939, -4278, 58574, -4278,  3006,  1509, -4278, 23553,   411,
   -4278,  3015, 14421, -4278, -4278, -4278,  2966,   451,  2594, -4278,
   -4278, -4278, -4278,  3053, 57939, -4278, -4278, -4278, 12441,  2964,
    2608, -4278, -4278, -4278,   211, 26127, -4278,  2018, -4278,   124,
     124,  2870,  1664, 49049, -4278, -4278,   184,  2616, -4278,  2703,
    2624, -4278,  2705, -4278, -4278, 26127,  2618, -4278, 26127, -4278,
   -4278, -4278,  2888,  2712, -4278,   411,    52, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
    2632,  2653,  3102,  2644, 45874, 41429,    96, -4278, 57939, -4278,
    1495, -4278, -4278,   974, -4278, -4278,   194, 43334, -4278,   592,
    2677,  2702,  3056, -4278, -4278,  2658, -4278, 12441, -4278,  2655,
    2662, -4278,   796, -4278, 47144, 57939, -4278, -4278, -4278, -4278,
   -4278,  3252, 12441, -4278, 45874, -4278,   -35, -4278,   786,    80,
     796, -4278, -4278, -4278, -4278, -4278, 57939, 52859,  2668,  9801,
    2795,  3079, -4278, -4278, -4278,  2687,  1850, 57939, 57939, 57939,
   26127, 57939, 26127, -4278,  1181,  1181, -4278, -4278, -4278, -4278,
     -10, 57939, 57939,   -10, 41429, -4278,   203,   763, 57939,   -10,
   -4278,  3080,  2798, -4278, -4278, -4278,  3166, -4278, -4278,  3158,
    2701, -4278,  3191, -4278, -4278,  2831,   203, -4278, -4278, 26127,
   -4278, -4278,   203, -4278,   203,   203, 12441,   -10,   -10,   -10,
   -4278,   -49, -4278, -4278, -4278,  2862,   -97, -4278, -4278, -4278,
     878, -4278, -4278,   179,  2967, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,  1107, -4278, -4278, -4278,
    3197, -4278, 47144, 41429,  3171,  1850,  1850, -4278, -4278,  3204,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278,  1850, -4278, -4278,
   -4278, -4278, -4278, -4278,  1600, 49049, 57939, 57939, 57939, 26127,
   -4278, -4278, -4278, -4278, -4278,   185, -4278, -4278, -4278,  2123,
    3238, -4278, 49049,  2207,   -80,  1047,  2207,  2730,   411,  1078,
   -4278,  1078, -4278, -4278, -4278,  1450,  1850, -4278, -4278,  2737,
   -4278,  2984, -4278, -4278, 53494, 26127, -4278, -4278, -4278,   197,
    2734,  2741,  2018,  2018, 61749,  3347,  2780,  4586, -4278, -4278,
   26127, -4278,    55, -4278, -4278, -4278,  2806, -4278, -4278, -4278,
   -4278,  1443, -4278, -4278,  1722,  2801,  2752, -4278,  2888, -4278,
    1460, 57939,  3211, 34441, -4278,   416,   198, -4278,  3100,  2756,
   -4278,  2757,  2764,  2765, 12441,   249,  1832,   229,  1294,  1434,
     313,   427,   648,   608, -4278,  1685,   792,   809,   816,   259,
   -4278,  2766,  2774, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278,  2770, -4278, -4278, -4278,   824,   855,  1308,  1418,  2773,
    2775, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278,  3229, -4278,   875,  1694, -4278, -4278, -4278, -4278,  2776,
   -4278, -4278,  1440,   930,   970,   324,  2783,  1699,   981,  1741,
    1788,  2789, 27409, 57939,  3100,  2791,  1459,  1463,  3100,  2792,
    1014,  1473,  1809,  1836,  1911,  1478,  1498,  1028,  1937,  2887,
    1660,  1034,  1036,  1692,  1115,  1124, -4278,  1705,  2793,  2794,
    1201,   205,  3100,  2799,   353,  2797,  2804,  1715, 10461, 11121,
   11781,   159,  1207, -4278,  2808, -4278,  2484,  2809,  2812,   361,
     242,  1726, -4278, 12441, -4278, -4278,  2811, -4278,  2876,   190,
      80, -4278,  2979, 57939,  2456,   168, -4278, -4278, -4278, -4278,
   -4278, -4278,    70, -4278,  2818, -4278,  2819,   288,  2824, 12441,
     253,  2824,  3154,  1758,  1758, 17721,  2240,  2788, 13101,  1686,
   13101,  1686,  2824,  2824,  2824, -4278, 17721,  2826, 17721, 17721,
   -4278,  3034,  2018,  2830,   573, 57939, 26127,   -43,  2823, -4278,
   -4278, -4278, -4278, -4278,   796, -4278,  2832,   138, 26127, 49049,
    2833, -4278, -4278, -4278, -4278, -4278, -4278,   411, -4278, -4278,
    3823, -4278, 26127,  2919,  2928,  2936, -4278, 32531, -4278, -4278,
   -4278, -4278, 32531,   801, -4278, 57939, -4278,  2935, -4278, -4278,
   -4278,  3270, -4278,  3271,  -211, -4278, 24194, 24194, -4278, 24194,
   -4278, -4278, -4278, -4278, -4278,   431, -4278, -4278, -4278, -4278,
      67,    68,  3376,  2677, -4278, -4278, -4278, -4278, -4278, -4278,
   33806,  2018, -4278, 26127, -4278,  3265,     1, 26127, -4278, -4278,
    3258,  2018, -4278, -4278, -4278, -4278, -4278, -4278,  2855, -4278,
    2858, -4278, -4278, -4278, -4278, -4278,  3114,  2970, -4278,  3506,
   -4278, 12441,   411, -4278, 45874, 45874, 26127, 26127, 26127,   867,
   12441, -4278,  1388,  2866, -4278, -4278,  3115, -4278,  3510, -4278,
    3094, 19701, 47144,  3315,  3329, -4278,  2872, 24194, 24194, 24194,
   -4278, -4278, -4278, -4278,  2969,  2969, -4278, 30611, -4278, 12441,
   -4278, -4278, -4278,  3367, -4278,  3070,   -69, -4278, -4278, -4278,
   -4278, -4278, 57939, -4278,  3007, -4278, -4278,  2889, -4278, -4278,
   26127, -4278, -4278,  3338, -4278,  3058, -4278,  2018, -4278,  2891,
   52224,  3357,  9801,  3359, -4278, 47779, -4278,  2018,   796,  2906,
    2911, -4278, -4278,  3286,   -66, -4278,  2912,  2913, -4278,  2908,
    2914,  2917, 52224, 12441, -4278,   786, -4278, -4278, -4278, -4278,
   -4278, 17721,  1725, -4278,  2018, -4278, -4278,   411,  3382,   411,
   12441,  2932, 57939, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,   -10,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278,  3162,  2627,  2802,
    3079, -4278,   -10,   203, 26127,   -10,   -10,  2018, -4278, -4278,
   -4278, -4278, -4278, -4278,  2926, -4278,  2996, -4278, -4278,  3101,
   64289,  2948, -4278,  3406,  2627, -4278, -4278, -4278,   218,  -209,
    2949,  1850, -4278, 57939, 57939,  1850,  1850, 57939, -4278, -4278,
    -155,  3235,  3239, -4278, -4278,   796,   796,  3264, -4278,   411,
    3097,  3099,  3107,  3111,  3118,  3141, -4278, -4278,   411,   411,
   -4278, -4278,   796, -4278,   558, -4278, -4278, -4278, -4278,  2813,
   -4278,   796,   796, -4278,   730, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,  1075, -4278,  5110, -4278, -4278, 26127,  3253, 26127,
    3442, -4278,  3509, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,  2989, -4278, -4278, 12441,  3082, -4278, -4278,  2780,
   -4278,  3002,  3009,  3011,  3019,  3022,  3025,  3026,  3027,  3030,
    3031,  3035,  3037,  3039,  3043,  3047,  3048,  3049,  3051,  3052,
    3054,  3060,  3061,  3063,  3020, -4278, -4278, -4278,  3062, -4278,
   -4278, -4278,   796,   796,   796,   796, -4278,  2552, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,  3380,  2540, 57939,  3069,
   -4278, 34441, -4278, -4278,   878, -4278,  3024, 15081, -4278,  3055,
   -4278, 12441, -4278, -4278, -4278,  2217, 12441, 12441,  3539,  2628,
   -4278, 48414, -4278, -4278, -4278, 12441, -4278, 12441, -4278, 12441,
   12441, 12441, 12441, 48414,  2628, 12441, -4278,  3065, -4278,  3459,
    3460, -4278, -4278, -4278, -4278, 12441, 12441, -4278, 12441, 12441,
   -4278, 12441, 12441, 12441, 12441, -4278, 12441, -4278, -4278, 17721,
   -4278,  3059,  3071, -4278, -4278, -4278,  3072, -4278, 12441, -4278,
   -4278, -4278, -4278, -4278, -4278, 12441, -4278, 12441, -4278, 12441,
   12441, -4278, 12441, 12441, -4278, -4278, -4278, 15741, 12441, 12441,
    3073, -4278, -4278, 12441, 12441, 12441, -4278, 12441,  2009, 12441,
    2284, 12441,  2305, 12441, -4278, 12441, -4278, -4278, -4278, -4278,
   12441,   421,  3114,  3115,  3076, -4278,  1939,  2708, -4278,  2392,
    2811,  3077,  3226,  1495, -4278, -4278, 49049, 12441, -4278, -4278,
   -4278, -4278, -4278, -4278, 17721,   377,  3081, 17721, -4278,  3154,
    4164,  4164,  1873, 12441,   253,  3154, 12441,  3086,  3068, -4278,
   12441, 57939, -4278, -4278, -4278, 47144, -4278, 49049, 45874, -4278,
   -4278, -4278,   138, -4278,  2539, -4278, -4278,  2855,    81,  3074,
    3088, -4278, -4278, -4278, -4278, -4278, -4278,  1949, -4278, 41429,
     144,  3713, 41429, -4278,  3095, -4278,  3098,  3175,  3185,  3186,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278,  2627, 64289,  1388, -4278, -4278,  3105, -4278, -4278,  2676,
    2969,  3129,  3483,  3679, -4278, -4278, -4278, -4278, 64289, 64289,
   12441, 57939, 17721, -4278,  3720,  3117,  3119,  3127,  3120,  2018,
   -4278,  3199, -4278, -4278, -4278,   187, -4278, -4278, -4278, -4278,
   -4278,    76,  2041, -4278, -4278,  3122,  3122, 21626, -4278, -4278,
   -4278, 57939, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278,  3139, -4278, -4278,  3398, 45874, 41429,  3584,  3585,  3590,
     606, -4278, -4278, -4278, 49049,  3138, -4278, -4278, -4278,  2018,
    3140,   346, 43969,  3619, 43969, 43969, -4278,   652,  3537,  3540,
   -4278,  3420,  2161,  3420, -4278, -4278,   652,   878,  2888, -4278,
   12441,  3760,  3592,  3473, -4278, 49684, -4278, 35076, -4278,  7218,
   -4278, 45874, -4278, -4278, -4278, -4278, -4278,  3248,  3250,  1335,
   -4278, -4278,  3560,  3390, -4278, -4278, -4278,   796,  2018, -4278,
    2668,  3164, 31251, -4278,   995, -4278, -4278,  2018,   304, -4278,
   -4278, -4278,  3454, -4278, -4278,  3382, -4278,  2677,   203, -4278,
   -4278,   -49,  2821, -4278, 27409, 62384,  3115,  3493, -4278, -4278,
   -4278,   234,  3818, -4278, 57939,  3173,  -122, -4278, -4278, 57939,
    3634,   968,   968,  3455, 26127, 26127,  4134, 47779, 44604, -4278,
   -4278, -4278, -4278,  3716, -4278,  3717,  1593, -4278, -4278,  2255,
    1047, -4278,   411,   411,   411,   411,  3115,   411,   411,  1995,
   -4278,  2255,  2255,  1078, -4278,   170, -4278, -4278, -4278, -4278,
    3196,   796,  3755,  3437,   796,   796,  3755,   796,  3439,  3444,
     796,   796,  3272,  3703,   796,  3588,  3295,  2048,  3591,   796,
    3453, -4278,  3298,  3714,   796,   796,   796,   796,   796,  3755,
    3457,  3808,   796,   796, -4278,   796,  3461,  3463,   167,  3466,
    3470,   796,   796,   796,   796,   206, 57939,   796,   796,  3476,
     796, -4278, -4278,  5068, -4278, -4278, -4278, -4278, -4278, -4278,
     -91, 24841, -4278, -4278, -4278, -4278,   796, -4278,   192, -4278,
    3428, -4278,  1684, 50319, 63019,  3216,  3223, 54129,  2018, 64289,
   12441, -4278,  3228,  3230,  3232,  3115,   411,   411,   995,   411,
    3115,   411,   411,   411,   411,   411,   411,   411,  3115,  3115,
     411,   164,  1129,   411,  3115,  4586, -4278,   411,  3114,  2255,
    2255,  1722, -4278,  3668,   796, -4278,  2468, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278,  3227,   878,  2677,
    1487,  2677,  3241, -4278, 13101,  1734, -4278,  2018, 12441,  2018,
    2330, -4278,  3243,  3243,  3243, -4278,  3246, -4278, -4278,  3243,
    3646,  3243,  3652,  3247,  3251,  1997,  2309, -4278,  2002,  2358,
    1777,  3254,  3257,  1563, -4278, 12441, 12441,  1783,   545,  1802,
     -84,  1214,  1216,   617, -4278,  1839,  3104, -4278, -4278,  1851,
    1858,  1860,  1862,  1250,  1892,  2004, 13101,  1896,   221,   718,
   -4278,  1901,  1295,  1315,  1906, 12441,  1908, 12441,  1915, 12441,
    1920,  1922,  1927,  3249,  3249,   181, -4278,  3259, -4278, -4278,
   -4278,  3261, -4278, -4278, -4278, -4278,  2677,  2259,  2392, -4278,
    3268,  1476, -4278, -4278,  3262,  2018,  3273, -4278, -4278, 12441,
   -4278,   200, -4278, -4278, 17721,   751,  3274, -4278,  2018, -4278,
   -4278,  3276,  1563, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,  3479, -4278, -4278,  3491, 32531, -4278, 57939,  -201,
     675, -4278, -4278, 49049,  3532, -4278,  3283, 35711, 41429, 41429,
   41429,  3266, -4278, 59209,  3563, 26127, -4278,  3704, -4278, -4278,
   -4278, -4278, 57939, 65559, 65559, 65559, 65559,  3285,  3289, -4278,
   -4278, -4278,  3154,  3665,  3544, -4278, -4278,  3114, 57939, 45874,
    3599, -4278, -4278,  3496,  2772, 27409, -4278,  3293, -4278,  3293,
    1134,  3296,  2016, -4278, -4278, -4278,  3291,  2288,  2020, -4278,
   19701,  3752,  2832, -4278, 41429, 41429, 41429, -4278,  2622, -4278,
   30611, 12441, -4278, -4278, -4278, -4278, -4278, 43969, -4278, -4278,
    -183,  1476, -4278,  1724, -4278, -4278, -4278,  3698,  3420,  3420,
     652,  3700,   772, -4278,  2732, -4278,  2772,  2018, 12441, -4278,
    3575, -4278, 54764, -4278, -4278, -4278, -4278,  1093, -4278, -4278,
    3306,  3307,   214,  3535, -4278, -4278, -4278, -4278,  9801, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
    2627, -4278, -4278, -4278, -4278, -4278,   -10, -4278,  3323, -4278,
    3310,  3311, -4278,   796,  3341, -4278, -4278, 41429,  3511, -4278,
     912,  3319, 57939, -4278,  3853, -4278, -4278, -4278, -4278, -4278,
   26127, -4278, -4278, 26127, 20344, -4278, -4278,  3578, -4278,  3654,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278,  2813, -4278, -4278, -4278,  1075, -4278, -4278,
   28050,  1850, -4278,   208, -4278,  1850,   197,   197,  3746, 55399,
   28050,   999,   995,  3115,  1677,  3115, 56034,   999,   411,   411,
    2622,   796,  3115, -4278, -4278,  3718,  1650,  3719,  1677,  1677,
   -4278, 49049, 57939, -4278,   796,   948,  3115, 56669,   995,   995,
    1677,   999, 27409,  2933,  3195, -4278,   411,   999, -4278, -4278,
   -4278, -4278, 26127,   999,   999,  2186,  3288,  3369,  3399, -4278,
   -4278, -4278,  3115,  3195, 56034, -4278, -4278,  7547, -4278, -4278,
   -4278, 20985, 57939,   311,   199, -4278,  3320, 39524,  3327,  1646,
    1399,  3410,  1816, -4278,   157, -4278, -4278, -4278,  3771,  3331,
    1186, -4278,  3328, -4278, 56034, -4278,  3342, -4278,  3340, -4278,
   59844,  2018,  3115,  3115,  3115, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, 57939,  2255,  2540, -4278, 34441,  2677,  3575,
   -4278, -4278,  4164, -4278,  2018, 12441,   992, -4278, -4278, -4278,
   -4278,  1094, -4278, -4278, -4278,  3344, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278,  2600, -4278, -4278,  2628, -4278, -4278, -4278,
    3345,  4164,  4164, -4278, -4278, 12441, -4278,  3951,  3516, 12441,
   12441, -4278, 12441, -4278,   267,  3348,  3379, -4278, -4278, -4278,
   -4278, 12441, -4278, -4278,  4164, -4278, 12441, -4278, -4278, 12441,
   -4278, 12441, 12441, -4278,  1931, -4278,  1975, -4278,  2001, -4278,
   -4278, -4278,  3114,  3358,  3740, -4278, -4278, -4278,  3114,  3550,
   -4278, -4278,  3114,  3115,  3338,  2658, -4278, -4278, -4278,  2708,
     580, 57939, -4278, -4278,  2049, -4278, -4278, 12441, -4278, 49684,
   -4278, -4278,  3837,  3733, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
    3811, -4278,  3462, -4278,   178, -4278, -4278, -4278,  -137,  -137,
    -137, 16401,  2567,  3870, -4278, -4278, -4278,  3704,  3757, -4278,
      99,  3371, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   57939,  3373,  1713, -4278,  2069, -4278, -4278,  3374, -4278, -4278,
   -4278,  2259,  3381, -4278,   796, 16401,  3122,  3547, -4278, -4278,
    1134, 27409, 35076, -4278, -4278, 57939, -4278, 41429,  2872,  2872,
    2872, 44604, -4278, -4278,   346, -4278,  1495,  3349, -4278,   878,
   -4278,   652,  3777,  3778, -4278,   652, -4278, -4278, -4278,  2259,
    1359,   346, 12441,  2627, -4278, -4278, 36346, -4278, -4278, -4278,
   -4278, -4278, -4278, 31251, 52224, -4278,  2627, -4278,   411,  2623,
   27409,  2677, 16401, -4278, -4278, 57939, -4278, -4278, -4278, -4278,
    3529, -4278,   419,  3667,  3411, -4278,  3388,  3394, -4278, 26127,
    3395,  3396,  3397, -4278, -4278, -4278,   125, -4278,  5451, -4278,
   -4278, -4278, -4278, -4278,   999,  3403,  3797,  3798,   197, -4278,
    1850, 28050, -4278,  1850,  1850,  1646, -4278, -4278, -4278,   129,
   56034, -4278, -4278, 28050, -4278, -4278, -4278,  3405, -4278, -4278,
    3114, -4278, -4278, 44604,   411, -4278,  1677, 57939, -4278, 28050,
   28050, -4278,  3434,   411, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, 28050, 56034,  3407, -4278,   346, -4278, -4278,
   -4278, -4278, -4278,  1929, -4278, 56034, -4278, -4278, 56034, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,  3412,  3116,   235, -4278,
    3409, -4278, 57939, -4278, -4278, 26127, -4278, -4278, -4278,  7663,
   57939, -4278, -4278, -4278, -4278, 57939,  4047, -4278,  3655, 12441,
   12441,  3694, 57939,  3695, -4278,  3989, -4278, -4278,  3834,  3877,
   57939,  7663,  3879,  3882, -4278,  3423, -4278, 54129,  3514,  2083,
   -4278, -4278,  2098, -4278, -4278,  2112, -4278, -4278, -4278, -4278,
   -4278,  3024, -4278,  3806,   528,  2018,  3427,  3429,  3430,  3431,
     220,  2116,  3715, -4278, -4278, -4278,  3243, -4278,  3246, -4278,
   -4278, -4278,  4026, -4278, -4278,  3243,  3840, -4278, -4278, -4278,
    3435, -4278,  3438,  3440,  2007, -4278,   179,  3443,  2032,  1376,
    2134,  3753,  3829, -4278,  3670, -4278,  2047,   924,  2115,  2121,
    2201,  2205, -4278, -4278, -4278, -4278, -4278,  3446, -4278, -4278,
     522, -4278,  3441,  3592, -4278, -4278, -4278, -4278,  2138, -4278,
   -4278,  4083,  3721, -4278, -4278, -4278,   411,  1252,  3475,  3475,
    3475,  1725,  2018,  2144, -4278, 64289, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278,  3856, 57939, -4278, -4278,  3451,  3506, 57939,
   -4278,  3544, -4278,  2658, 27409, 16401,  3452,  3450, -4278,     7,
   -4278, -4278,  3448, -4278, -4278,  2872, -4278,  4035, -4278, -4278,
   -4278,  2889,  3472,  3508,   652,   652,  3505,  3513, 12441,  3458,
   -4278,   401,  2658, -4278, -4278, 12441, -4278, -4278,  2018,  3699,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278,  3575, -4278,  3456,
    3464, -4278, -4278,   411,   287, -4278, -4278,   327,  3638, 49049,
    3467, 57939, 57939,  3468, -4278, -4278, 20985, -4278,  4099, -4278,
   -4278, 12441,  1850, -4278, -4278, 28050,  3518,  -177, 28050, 28050,
    3949,  3998,  3999, -4278, 28050,  1443, 57939, -4278,  3252, -4278,
   28050,  3405, -4278,   554,  3574, -4278,   311, -4278, 27409, -4278,
   -4278, -4278, 57939, -4278, 26127, -4278, -4278,  3478, -4278,  3243,
    3243,  3243, -4278, -4278,  3243, -4278,  3246,  3724,  3481,  3246,
    3246, -4278, -4278, -4278, -4278, -4278,   220,  2216, -4278, -4278,
     220, -4278, -4278, -4278,   166,  1171,  3246, -4278, -4278, -4278,
   -4278, -4278,  3488, -4278,  3243,  3243,  3243, -4278, -4278,   220,
    3243, -4278,  3243, -4278,  3246,   403,   163,  3243,  3243,  3243,
    3344,  3482, -4278,  2162, -4278, -4278,  2018,  4164,  4052, -4278,
   -4278,  3642,   411,  3997, 57939,   161, -4278, -4278,  3252,  4016,
    2825, -4278, -4278, -4278, 64289, -4278,  3115, -4278,  3115, -4278,
    3115, 45239, -4278, -4278, -4278, -4278, -4278, -4278, -4278,   265,
   -4278, -4278, 48414,  4112, -4278,  3780,  3494, -4278, -4278, -4278,
   -4278, -4278,   220, -4278, -4278, -4278, -4278, 12441, -4278, -4278,
   -4278, 12441, -4278, -4278,  3814,  3971, -4278, -4278, -4278, -4278,
   -4278, -4278,  3498, -4278,  3115,  3575, -4278,  4013, -4278, -4278,
   -4278,  3593,  3594, -4278, -4278,  3595, -4278, -4278,   160,  2219,
   -4278, -4278, -4278, -4278, 16401, 63654, -4278,  3897,  3607, -4278,
   -4278, -4278,  3512,  3554, -4278, -4278,  2708, -4278, -4278, -4278,
   -4278,   920,  3888,   580, -4278,  3564, -4278, -4278, -4278,  3565,
    2018, 57939, -4278,   834,  2708,   346, 57939,  3921,  3806, -4278,
   57939,  7663, -4278, -4278, -4278, -4278,  3517,  3519, -4278, 57939,
   -4278, -4278, -4278,  3799,  1399,  3794, 57939,  2167,   346,  3523,
    2176, -4278,     7,  5068, -4278, -4278,   682,   621,  2213, 28050,
    3518,  1120,   968, -4278,   968, -4278, -4278, -4278, -4278,  4187,
     311, -4278, -4278, -4278, -4278, -4278, 26127, -4278,   999, -4278,
   -4278,  3405,    76,  3526, 57939,  3864, -4278, -4278, -4278, -4278,
    1167, -4278,   179,  1167,  1167, -4278,  2424, -4278,  3567,   220,
   -4278, -4278,  3568, -4278, -4278, -4278,  1167,   179,   220, -4278,
   -4278, -4278, -4278,  1167,  2714,  3663, -4278,   220, -4278, -4278,
    4112, -4278,   220,  4112,  1167,  1167, 57939, -4278, 57939, -4278,
     741, -4278, -4278, -4278, -4278, -4278,  2181, -4278, -4278, -4278,
   -4278, 38889, -4278, 12441, -4278, -4278, -4278, -4278, -4278,   606,
   60479, -4278, -4278, -4278,  4015,  3726,  3728, -4278, -4278, -4278,
    3541, -4278,  3543,   346,  2224, -4278, -4278, -4278,  3545,  2627,
    4139, -4278, -4278, -4278, -4278,   183,  3821,  3115,  3115,  3115,
    1129,  -100,  2219, -4278, -4278,  3604, 26127, 17721,  3662, 57939,
    1133,  3697, -4278,  4159,  4161,  4054,  4165,   920, -4278,  -113,
   -4278, -4278, 12441,  3562, 12441,  3571,  2197, -4278, -4278,   197,
     197, -4278,   834, -4278, -4278, -4278,   194, -4278, -4278,  3754,
   -4278, -4278, -4278,  1304, -4278, -4278,  3694,  3572,  2241,   121,
   57939, -4278,  3851,  1605, -4278,  3578,  3547, -4278,  3114,  3544,
   -4278, -4278, -4278, -4278,   968, -4278,  3573, -4278,  3577,  3580,
    2919,  2928,  2936,  1129,  1129, -4278, -4278, -4278, -4278, -4278,
    3974, -4278, -4278,  2267, -4278,   789,  3854, -4278, -4278, -4278,
   -4278,  1167, -4278,  2281, -4278, -4278, -4278, -4278, -4278, -4278,
    2301, -4278, -4278, -4278, 49049,   411,  2814,  4216, -4278,  3632,
   -4278,  4106,  3978, -4278,  4222, -4278,  2733, -4278,  3980,  3875,
     796,  3602, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,   851,  3618,  3727, -4278, 64289, -4278, 57939, 57304,
   -4278, -4278, 33171, -4278, -4278, -4278,  4055, -4278,  2018, -4278,
   -4278,  4075,  2259, -4278, -4278, 12441, -4278, -4278, -4278,  3699,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,  1415, -4278,
   -4278, 27409,  2888, -4278,  3114, -4278,  2323, -4278, -4278, -4278,
    3689,   796,   796,  4114,  4116,   796,   796,   796,   796,  3603,
    3697, -4278,  4095,   179,   179,  4211,   179, -4278,  4212,  4213,
    -113, -4278,  2018, 57939,  2018, 57939, -4278,  4068,  4068, -4278,
    3611, -4278, -4278, -4278, -4278, -4278,  1816, -4278,  2813,  1026,
     411,   796,  3871,   291,   121, -4278, -4278,   796,   346,  3613,
     291,  1605, -4278, -4278,   125,  3615,  2288, -4278,  2336,  3617,
    3620, -4278, 57939,  3622, 57939, 57939, -4278, -4278, -4278,  3623,
   -4278, 57939, -4278, -4278, -4278,   312, -4278, -4278,   220,   179,
     220, -4278, -4278,  3628, -4278, -4278, -4278,  3909,  3680, -4278,
    3640, -4278, -4278, -4278, 40159,  3905, -4278,  3637,   255, -4278,
   12441,  4135, -4278, -4278, -4278,  2373, -4278, -4278, 38889, -4278,
   -4278, -4278,  2658,   346,   194, -4278, -4278,  3644, -4278,   796,
   -4278,  3641, -4278, -4278, 57939,  3645, -4278,   411,   411,   796,
     796,  3137,  3137,  3114, 49049,  3756, -4278, -4278,   796, -4278,
   -4278,   179, -4278,   179,   179, -4278,  2387,  2394,  1303, -4278,
   -4278,  3647,  7663,  2599, 26127,  3989,  2396,   968,   968,   291,
    1026, -4278, -4278, -4278, -4278,  3115,  1610, -4278,  4014,  4294,
   -4278, 40794, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   57939, 57939,  3651,  2414, 57939,  2430,  2437,  3544, -4278,   210,
     210, -4278, -4278, -4278,  2221, -4278,  3628, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,     7,  4245,  3930,  4248,  2018, 12441,
   -4278, -4278, 57304, -4278, -4278, -4278, 27409, 16401,  2622, -4278,
    3662, -4278,  3659, -4278, -4278,   -40, -4278, -4278,   411,   411,
   -4278, -4278, -4278, -4278, -4278,  2443, -4278, 49049, -4278, -4278,
   -4278, -4278, -4278,  4267, -4278,  4268,  3666,  3669, 12441,  3664,
    3673, -4278, -4278, -4278, -4278,  4183, 64289,  4131,  4182, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,     7,  2453,  2457, 57939,  1026,  2464,   121,  1605,
    2480, -4278,  4328, -4278,  1008,  3958,  3959, -4278,  3681, -4278,
    3682, -4278,  3953, -4278,  3957,  2018, -4278, -4278, -4278, -4278,
   -4278, -4278,  2489, -4278, 17061, -4278, -4278, -4278, -4278, -4278,
   49049, -4278,  3756, -4278, -4278, -4278, 54129, 54129,  2018, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278,  3902,  1026,  2502,
   -4278,  1026, -4278, -4278, -4278, -4278, -4278, -4278,  3741,  4206,
   -4278,   -65, -4278, -4278,  3873, -4278,  3659, -4278,  3690, -4278,
    3154,  3697, -4278, -4278,  3692,  2508, -4278, -4278,  2599, -4278,
   -4278, -4278, -4278,  1026, -4278,   210,   210, -4278, -4278,   128,
    4118,  4035, -4278, 17061,  3696, -4278, -4278, -4278, 64289,  4195,
   -4278, -4278, -4278,   411,  4089, -4278,   128, -4278,  4305,  3888,
   -4278, -4278, -4278,  3881, -4278, -4278, -4278,   179,  4122, -4278,
   -4278,  3990,  3705, 64289,    43, 22267,  3869, -4278, -4278, -4278,
   -4278, -4278, 49049,  2515, -4278, -4278, 27409, -4278, -4278, -4278,
   25484,  3706, -4278,   796, -4278, 27409, -4278, -4278, 16401, -4278,
   -4278
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4278, -4278, -4278, -4278,  1717,  3449, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,  1859, -4278, -4278, -4278, -4278, -4278,
    1514, -4278,   340, -4278,   345, -4278,   347, -2542,  -496,  3322,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
    -125,  1174,  3278, -4278,   236, -4278,  -109, -4278, -4278, -4278,
   -3523,  -227,  -396, -4278,    26,    19,  3269,  -386, -4277, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -2116, -4278,
   -4278, -4278,    74, -4278, -4278,  -556, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,  -169,   381,  1884, -4278, -4278, -4278,
    4350, -4278,  3793, -4278, -1925,  2345, -4278, -4278, -4278, -4278,
   -4278,  2432, -1830, -4278, -4278, -4278,  1400, -4278, -4278, -4278,
    -917,    27, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,   581, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,  2122, -4278,
   -4278,  3722, -4278, -4278, -4278,  1381, -4278, -4278, -4278, -4278,
   -4278, -4278, -1306, -4278,  1863,  1856, -4278,  1864, -4278,   -94,
     633, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,  3245, -4278,
   -4278, -4278, -2323, -4278, -4278, -2446,  2727, -4278, -1993, -4278,
   -4278, -2095, -4278, -4278, -1869,   947, -4278, -4278,   873,   386,
   -4278, -1538, -2134, -2132, -4278, -4278, -4278, -2175, -2174,  -714,
    2488, -1258, -2474, -4278, -4278, -4278, -4278,   -92, -4278, -4278,
      91,  1617,  2164, -4278, -2706, -4278, -4278,   766, -4278, -4278,
    1387,   593,  1384, -4278,   933,  2985, -1325, -4278, -4278, -4278,
   -4278, -4278, -4278,  -150,   149,  -243, -4278, -3984,   599, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -2974, -4278, -4278,
   -4278,  -395, -4278, -4278,  -331, -4278, -4278,  -369, -4278,   -27,
   -2514, -4278, -4278, -4278, -4278,  2236, -1548, -4278,  -589, -4278,
     295,  1647, -2625, -2123, -4278, -1046, -1019, -3137, -4278, -4278,
   -4278, -4278,  1168, -4278,   546,  1644, -2604, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278,  1172, -4278, -4278, -3353, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,  -389, -4278,  -200,   760,
   -4278, -3184,  1087,   494, -4278, -4278, -4278, -4278, -1532, -3175,
    -736, -4278,    93, -2695, -2645,   462, -4278, -4278,    69, -3898,
   -4278,  -603, -2277, -2573,  -212, -4278, -4278,    83, -3539,  1752,
   -4278,   432, -1167, -2656,  1521, -4278, -4278,  1044, -4278, -2986,
    1042, -4278, -4278, -4278,  1052, -4278,  -307, -4278, -4278, -4278,
   -4278, -3289, -4278, -1667, -2571, -4278, -4278,  4397,  4398, -2144,
    -254,  -253, -4278, -4278, -4278,   328, -4278, -4278,  -661,  -131,
     -21,   -13, -2640, -3731,   172, -3367, -4278,   285, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,  1688, -1844, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -3284, -3069, -4278, -4278,  1217,
   -2748, -2215, -2210, -2584,  3415, -4278, -4278, -4278, -4278,  3360,
   -2402, -3625, -4278, -4278, -4278, -4278, -4278, -4278, -4278,  2893,
    1065, -4278, -4278,  1812, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278,   323,  1930, -4278, -4278, -4278, -4278, -4278,
    2238, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,  -162,
   -4278, -4278, -4278, -4278, -4278,   587,  2800, -4278, -4278, -4278,
   -4278,    -9, -4278, -4278, -4278, -4278,  2478, -4278, -4278, -4278,
   -4278,  2827, -4278, -4278, -4278, -4278, -4278, -4278,  1489, -4278,
    1971, -4278, -1647, -4278, -4278,  1039,  -147,  1923,  -625, -4278,
    2068, -4278,   123, -4278,  3447, -4278, -4278, -3286,  3548, -4278,
   -4278, -2637, -4278,  3531, -1489, -2888,  2435,    98,  -141, -2057,
    1089,  -120,  1519,   597,  4545, -4278, -1205, -1240, -4278, -4278,
      -2, -4278, -4278, -4278, -4278, -4278, -4278,  2175,  2182,  -643,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278,  1550, -4278, -4278, -4278, -4278, -1282, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,  -972, -4278, -2232, -4278, -4278, -4278,
    -477, -4278,  3314, -4278, -4278, -4278, -2452, -1508,  1909,  1012,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278,  1921, -4278, -1719,
   -4278, -2941, -4278, -4278, -4278, -4278,  1586, -4278, -4278, -4278,
   -4278, -4278, -4278, -1889, -4278, -2195,    66, -4278,   243, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278,  -217,   833,  -216, -3459,
   -1209,  1714, -4278, -4278, -1383,  3355, -1905, -4278,   761, -4278,
    2087,  1138, -4278, -4278, -4278, -4278,   635, -2967,  2939, -4278,
   -4278, -3394, -1009, -4278,  2940, -4278, -1467,  1490,   446, -4278,
   -1498, -1193, -1797, -3165, -2634, -4278,  1307,   142, -4278, -4278,
   -4278,  -198, -4278, -4278, -4278,  1503, -4278,   458,   459, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,  -580,
    -959, -4278, -4278,  2249, -1500,  -491,  4507,     3, -4278, -4278,
       4, -4278, -4278, -4278, -4278,  3174,  3125,  2052, -4278, -4278,
   -2588, -4278, -4278,  2010, -4278,   753, -1003,  -594,  1082, -4278,
   -4278,  1086, -3455, -4278, -4278,    13, -4278, -4278, -4278,  1030,
   -4278,   -74,  3982,    16, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278,  2863, -1138,  3891, -4278, -4278, -4278, -4278, -4278,
   -4278,  2427, -4278, -4278, -4278, -4278, -4278, -4278,  3042,  4001,
    -606, -1444, -4278,  -825,  2433,  1934,  -889, -4278, -4278, -4278,
    3497,  4002, -4278, -4278,  4506, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,  2660,   672, -4278, -4278, -4278, -4278,
    3145, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278,  1132,  -208, -4278,   329,  -225, -4278,
     147, -4278, -4278, -4278, -4278, -4278,  -252, -4278, -4278,  -256,
   -4278, -1108,  3819, -1475,   245, -1357, -2737, -4278,  1111,  3123,
   -2970,  -709, -1224, -1257, -2924,   -15, -4278, -4278,  3745,    30,
    -479, -1661,    -6,  -821,  -107,  -618,  -624,  -893, -4278,  -553,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278,  1963, -4278, -4278, -4278,  1073, -4278,  4029, -4278,  2751,
   -1491,  4034,  -573,  2509,  1985,  1983, -4278, -4278, -4278, -4278,
   -1973, -4278, -4278,   212, -4278,  2633, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278,
   -4278, -4278, -4278,  3010,  -452,  -501,  3153,  4051,  3675, -4278,
    3256, -4278, -4278, -4278, -4278, -4278,   382, -4278,  -152,  2051,
   -1534, -2566, -4278, -4278,  2132,   969, -4278,  1651,  -294,  -588,
   -4278, -4278,   376, -4278, -4278, -4278,  1371,  1737,  4064,  3688,
   -4278, -4278, -4278, -4278, -4278, -2954,  -971, -4278, -3684, -1927,
   -4278, -4278, -4278, -2337, -3274, -4278, -4278, -1101, -4278, -4278,
   -4278, -4278, -2235, -4278, -4278, -4278,     5,  4031,  4032,  4033,
   -4278,  -897, -4278, -4278, -4278, -4278, -4278, -4278, -4278,  3576,
   -4278, -4278, -4278, -4278, -4278,  3036,  3579, -4278, -4278, -4278,
   -4278, -4278,  3582, -4278, -4278, -4278, -4278, -4278,  1629, -4278,
   -4278, -4278, -4278, -4278, -4278, -4278, -4278, -4278
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2794
static const yytype_int16 yytable[] =
{
     532,   154,   677,  1062,   681,  1019,  1058,  1096,  1672,   568,
    1532,  1535,   563,  1440,   562,  1502,  1849,  2080,   570,  2340,
    1781,  1549,  1969,  1826,   583,   530,  1567,    78,  1875,   947,
     586,   591,  2087,   668,   157,  1024,   962,  1125,   599,   947,
    2086,   602,  2282,  1124,  2016,  1440,   599,  1744,  1597,  2813,
    2645,  2646,  1103,   622,  2814,  1104,  2137,  1239,   855,   856,
    2279,  1874,   860,   861,   862,   899,  1459,   864,   865,   866,
     843,   600,  3169,  3061,  1677,  1190,  1907,  1908,  3255,  3435,
    1911,  1912,  1913,  1914,  2904,  1916,  1917,  1919,  1921,  1922,
    1923,  1924,  1925,  1943,   656,  3192,  2911,  1968,  2541,   982,
    2999,  1678,  1897,   657,  3641,  1435,  1436,  3192,  3192,  2210,
    1905,  3534,  2199,  3523,   898,  3334,  1069,  3888,  1619,  1076,
    1168,  1790,  3702,  1172,  2018,  2035,  2973,  2224,  2748,   660,
    2749,   532,  2169,   532,   667,   673,  2602,  2509,  3551,  2650,
    3858,  2803,  2912,  3553,  1563,  3181,  3212,  2246,   898,  1351,
    3149,   678,  2182,  3804,   682,   683,   662,  3877,   664,  3544,
    2185,  2186,  2872,  2873,   684,  4110,  3805,   685,  3220,  1598,
    3716,  4150,  3224,  3642,  4238,  3093,  1300,  1301,  4274,  1291,
    1292,  1293,  1409,  3239,  3102,  1300,  1301,  3259,  4009,  3767,
    3753,  1334,  2499,  1701,  3010,  3250,  2329,  2251,  3814,  2030,
    4219,  3364,  3425,  2869,  4500,  2870,   704,  1300,  1301,  1651,
    1660,  4843,  2639,  1300,  1301,  1300,  1301,  2041,  1084,  1751,
    1752,  1753,  1300,  1301,  2969,  3192,  3192,   577,  1084,  4202,
   -2590, -2591,  2862,  4321,  1599,  1403,  1771,   614,  1300,  1301,
    1986,  1718,  4038,   581,  3916,  2024,  1300,  1301,  3359,  3360,
    4081,   590,  2318,  1698,  3366,  2469,  3368,  4039,  2576,  1300,
    1301,  2744,  2451,  3939,  4741,  3605,  1552,  3204,  3205,  1835,
    4447,  4040,  1839,  1335,  3605,  3331,  1300,  1301,  3001,  3289,
    3921,  1593,  1028,  1009, -2745,  4765,  3603,  4038,  -484,   905,
    1173,  2129,   917,  1858,  1859,  2551,  3619,  1863,  3559,  2067,
    3936,  1117,  3387,  2751, -2104,  2624,  2474,  1613,  1420,  2784,
    4665,  4177,  2660,  3781,  1877,  1878,  3209,  1674,  3426,  3817,
    3692,  4666,  4868, -2672,  1940, -1616,  1335,  1028,  1009,  1424,
    1300,  1301,  1524,  1628,  1070,  3831,  4713,  1300,  1301,  4827,
    2119,  1300,  1301,  3160, -2590, -2591,  1622,   964,  -937,   578,
    1674,  3269,   291,  3931,   293,  4518,  2238,  2787,  1432,  2443,
    1723,  3831,   680,  2130,   968,  1338,  1674,  3082,  2120,  1747,
    1300,  1301, -2507,   947,   947,  2731,  1356,   947,  1300,  1301,
    1747,  -580,  3743,  4501,   574,  3340,  3341,  3050,   618,  4173,
    4108,  1511,   954, -2745,  1300,  1301,  2192,  -581,   611,  1218,
    1085,  1086,  1175,  1568,  3606,  2428,  2356,   156,  4164,   947,
    1085,  1086,  2242,  3536,  2613,  4328,  4478,  3511,  3406,  2521,
    3346,  2702,  3208,   537,  2477,  4038,   538,  2248,  3895,  3470,
    2711,  3235,  2552,  1300,  1301,  1317,  1774,  2280,  3101,  2470,
    4039,  4082,  3798,   950,  1300,  1301,  3800,  2522,  4649,  2495,
    4479,  1572,  3896,  2712,  4040,  1987,  1569,  2522,  2953,   896,
    2281,  1945,  1578,  4140,   908,  1028,  1009,   537,  4334,  3549,
     538,  1409,  3518,  3141,  3537,  2280,  2335,  2193,   969,  4242,
    1512,  1724,  1176,  3083,  2954,  1725,  1719,  3700,   575,   701,
    2252,  1219,   619,   896,  1815,  1477,  1726,  1816,  2281,  1775,
    1400,  3693,  1748,  2577,  2025,  1977,  1453,   965,  3528,  3529,
    3530,  2239,  1789,  1770,  2068,  2201,  2452,  4869,  1433,  2112,
    1665,  2522,  1666,  1667,  1668,  1669,  1525,  1239,  1776,  2121,
    3332,  4133,  1118,  1071,  1425,  1629,  3270,  2133,  4667,   673,
    4134,  4713,   691,  3425,  1302,  4357, -2507,  1303,  4160,  4448,
     673,  4165,  4166,  3832,  3599,   970,  1592,  4828,  2598,  1119,
     667,   903,  1300,  1301,  1614,   667,   699,  3277,   915,  2661,
    2131,  4170,  1151,  4141,  1337,  1302,  4742,  2776,  1303,  3832,
    1941,  1302,   958,  1302,  1303,   918,  1303,  1336,   907,  2625,
    1302,  1722,  1594,  1303,   667,  1988, -1576,  1174,  1777,  2500,
    3863,  2064,  1020,  1500,  3867,   916,  1302,  1714,  2499,  1303,
     947,  2748,  1078,  2749,  1302,   959,  4761,  1303,  1553,  2648,
     156,  3782,  3922,  3843,  3607,  1300,  1301,  1302,  1727,  1677,
    1303,  1320,  1100,  1937,  1300,  1301,  2553, -1576,  3695,  4284,
    1336,  2118,   699,  1421,  1302,   699,  3614,  1303,  3427,  1079,
     906,  3237,  2471,  3192,  1988,   667,  1678,  1130,  4181,  3426,
    3590,  3872,  4306,  4740,  2026,  1300,  1301,   955,  2472,  3333,
    1970,  4743,  3290,   667,  1158,  2479,  1910,  1778,  4135,  1943,
    2803,  2164,  2578,   657,  2167,  1161,  2482,  3603,  2170,  2485,
    2173,  2872,  2873,  1931,   657, -2590, -2591,   657,  1302,  3924,
    1130,  1303,  1602,  4744,  1969,  1302,  2246,  1185,  1303,  1302,
    3192,  3002,  1303,  1720,  4712,  3932,  3933,  1720,  2188,  2189,
    2190,  1758,  1759, -1912,  2747,  4844,  1728,   615,  4085, -2590,
   -2591,  4314,  2869,  3436,  2870,  1300,  1301,  3092,  1302,  2687,
    1404,  1303,  3260,  1087,  2089, -1616,  1302,   579,  1814,  1303,
    3206,  4502,   703,  1279,  4331,  1350,  1827,  2251,  1829,  2042,
    1240,  2317,  1302,   984,  3011,  1303,  3342,  2218,  1300,  1301,
    1842,  1843,  1844,   867,  3012,  1947,  2349,  2184,  1848,  1968,
    2031,  4203,  3145,  4198,  1322,  1323,  3815,  -484,  1981,  2329,
   -2672,  4643,  4342,  4645,  4646,   948,  1720,  1440,  1304,  2868,
    2242,  1302,  3560,  4497,  1303,  3608,  1410,  1304,  2476,  1300,
    1301,  3261,  1302,  3717,  4041,  1303,  2444,  4239,  3853,  3356,
    4292,  1297, -2672,  1299, -1616,  3753,  1300,  1301,  3207,  1304,
    3428,  1333,  1080,  1300,  1301,  1304,  2881,  1304,  4313,  4301,
    2027,  1300,  1301,  2563,  1304,  1720,  1644,  -937,  1342,   532,
    1344,  2465,  1346,  1130,   532,  2348,   667,  4172,   532,  4041,
    1304,  3194,  2402,  2429,  1385,  2028,  2406,  2373,  1304,  4436,
    3739,  2065,  1300,  1301,  1343,  1958,  2357,  1124,  3407,  1348,
    -580,  1304, -1616,  1353,  3601,  2049,  2360,  1349,   612,  3028,
    2430,  1354,  1300,  1301,  1779, -1912,  -581,   898,  1304,  3740,
    2453,  1414,  3027,  3542,  3543,  4125,  1533,  1427,  1537,  4733,
    4734,  1540,  1545,  4737,  4650,  1573,   657,  2374,  1431,  3104,
    4128,   154,  1437,  4116,  4117,  1940,  1579,  1566,  3142,  4142,
    1302,  3449,  3850,  1303,  1401,  1325,  1326,  1327,  1328,  1329,
    1330,  1331,  1332,  1817,  -208,  1462,  1818,  1300,  1301,  1534,
    2168,  1472,  1304,   667,   657,  2961,  1124,  1720,  3856,  1304,
     657,  3855,   613,  1304,  1780,  1649,  1649,  2152,   681,  1141,
    2364,  2247,  2242,  3909,  3349,   156,  3351,  1882,  1883,  2058,
    4751,  1882,  2393,  1455,  3501,  3009,  2248,  1300,  1301,  3427,
    4532,  3603,  1304,  1302,  3603,  3603,  1303,  4041,  1300,  1301,
    1304,  1020,  1302,  3061,  4789,  1303,  4174,   667, -1576,   667,
    2432,  2433,   667,   667, -1711,  2500,  1304,  3165,  2449,  2450,
    2334,  4216,  4338,  2113,  4606,  1981,  4607,  3885,   667,  4307,
     158,  1300,  1301,  1302,  2978,  2979,  1303,  3914,  1645,  1552,
     536,  3318,  3576,  2123,  3438,  1300,  1301,  1603,  4786,  2576,
    2252,  1300,  1301,  1300,  1301,  1304,  2213,  2214,   710,  3356,
    3928,  3434,  2813,  3364,   987,  1885,  1304,  2814,  2217,  2335,
    4308,   657,   898,  2748,  2347,  2749,  2226,  2090,  3472,  2875,
    4293,  1378,   699,  3212,   699,  2365, -1616,  4263,   541,  3862,
    4294,    48,  1179,  3866,  1747,  1410,  1641,  1940,  1055,  1640,
    3238, -2666,  2251,  1302,  3239,  2251,  1303,  2267,  4269,  4500,
    1673,  4047,  1142,  1664,  4632,  2656,   711,  2544,   682,   683,
    4050,  3746, -2649,  2400,  3134,  1693,  2632,  2074,   684,  1642,
    1643,   685,  1300,  1301,   657,   584,  1302,  2090,  3644,  1303,
    4796,  1300,  1301,   532,  3770,  3526,   657,  2087,  3546,  2087,
    2087,  2571,  2572,  2224,  2803,  3562, -2653,  3088,  3089,  2926,
   -2652,   947,  1677,  3577,  3538,   657,  1738,  2583,  1697,  2683,
    2872,  2873,  2513,  1465, -2134,  1740,  2509,  1302,  2394,  4674,
    1303,  1941,  1604,  1747,  1304,  4033,  3166,  3135,  4533,  1678,
     898,  1892,  2246,  1926,  1302,  2699, -2650,  1303,  3155,  3859,
     988,  1302,  3384,  3385,  1303, -2651,  1605,  2747,  2883,  1302,
     543,  2869,  1303,  2870,  3645,  1240,  2730,  2124,  1300,  1301,
   -2656,    14,  4758,  3746,  1300,  1301,  4411,  1834,  1930,  2490,
    1240,  1300,  1301,  1300,  1301,  3603,  1886,  2491,  3199,  3473,
    1302,  3046,   896,  1303,  3146,  1347,  1528,  1304,  2091,   712,
     134,  3033,  2092,  1646,  4186,  4187,  1304,   291,   746,   293,
    1302,  3364,    63,  1303,  3364,  3364,  2367,  1300,  1301,  2977,
    1055,  2982,  2983,  1971,  3391,  3392,  3722,  4339,  2514,  1876,
    2681,  3364,   148,  3747,   564,  2484,  3136,  1304,  4501,  2242,
    1528,  4534,   667,  2686,  2577,  4212,  2689,  2690,  3723,  3364,
    4217,  4220,  4222,  4223,  4295,  2366,  4188,  1902,  2091,  4189,
    1701,   544,  1300,  1301,  3646,  1302,  1838,  2242,  1303,  4081,
    2242,   751,  3042,  2329, -2134,  1300,  1301,   156,  2868,   667,
    1875,    27,  1300,  1301,  1934,  1211,  1212,  3315,  4336,  4208,
    4209,  4210,  3320,   667, -2134,  3578,  2040,  4213,   667,   657,
    3328,  3329,  1970,  1941,  4224,  1302,  3336,  1304,  1303,   588,
    1146,  4746,  3748,  2090,  2075,  3137,  1302,   149,  2502,  1303,
    3348,   136,  2976,  1240,   667,  3408,  3409,  4797,  1133,  3487,
    3547,   607,  2986, -2666,  1505,  3747,  4459,  4259,  2743,  4660,
    1304,  1553,   667,  1300,  1301,  2252,  1529,  4412,  2252,  1302,
     667,   699,  1303,  1472, -2649,  1999,  4460,  2002,  3446,  3447,
    1282,  1927,   657,  1302,  1940,  1647,  1303,   896,   709,  1302,
     765,  1302,  1303,  3709,  1303,  3621,  4690,  4691,  2020,   863,
    3685,  1304,  1134,  4889,  1928,  1300,  1301,  1875, -2653,   657,
    1529,  4309, -2652,  3742,   616,  1940,  3167,   667,  1304,  2008,
    2370,  3651,  3652,  1472,  3579,  1304, -2793,  1300,  1301,   657,
    3725,  2505,   657,  1304,  3751,  4573,  4729,  2371,  2575,  2159,
    3153,  1394,  2248,  2578,  2372,  1961,  1300,  1301, -2650,   545,
    1300,  1301,  2379,  4296,  3478,  3479,  3480, -2651,   667,   667,
    1300,  1301,  2070,   988,  1304,  1300,  1301,  1747,  1190,   781,
    1302,  2088, -2656,  1303,  1723,   699,  2215,   632,  2071,  1302,
    4082,  2109,  1303,  2380,  1304,  1300,  1301,  4703,   667,  2114,
    1608, -2286,  4345,  1135,  4347,  1720,  1300,  1301,   667,  2160,
    2247,  4175,  3022,  2386,  2091,   896,  4841,  4842,  2092,    42,
    2134,  1020,   635,  4446,  4572,  2156, -1939,  2158,  4133,  3612,
    3612,   532,   532,   532,   657,   532,   657,  4134,  2219,  2667,
    4773,  2603,  4638,  4704,  4404,  2165,   532,  4406,   667,  1304,
      48,   636,   532,  3710,  2394,  2228,  2153,  2154,  2155,  3749,
    2157,  4067,  3138,  2265,  2183,   911,  1302,  1055,  2391,  1303,
   -2311,  2166,  1302,   657,   658,  1303,  1467,  2172,  1929,  1302,
    1609,  1302,  1303,  2335,  1303,  2998,   638,  2171,  2875,  1304,
     898,  4617,  2087,  2334,  4083,  1271,  4526,  4527,  1055,  2583,
    1304, -2431,  2704,  2874,   661,  1724,  2708,  2709,  2392,  1725,
    1862,  2717,  2718,  1898,  4618,  1302,   667,   667,  1303,  2396,
    1726,  2072,  4337,  1448,  2695,   663,  1449,   947,  2729,   136,
    2149,  2150,  4528,  1304,  2223,  1677, -1939,  2741,  2742,   667,
    2220,  2221,  2222,   657,  3128,  3339,  3887,  1304,  4367,  2747,
    1941, -2286,  2408,  1304,   912,  1304,   667,  1300,  1301, -1219,
    1302,  3749,  1678,  1303,   679,  1275,  2415,    58,  4500,  4705,
    2277, -2286,  2419,  1302,  2420,  4135,  1303,  3293,  2275,   657,
    1302,  1941,  2266,  1303,  4521,  4344,  4575,  1272,  4763,  1300,
    1301,  4767,  1945,  1969,   657,  1621,   810,  2161,  2250,  1681,
     687,  3548,  1300,  1301,  3623,  3622,  3184,  3624,  2857,  2858,
    2859,  2860,  1300,  1301,  3635,  1185,  1136,  2346,  3639,  3640,
   -2311,    63,  3350,  1300,  1301,   913,  2585,  2586,  3648,  2490,
    3653,  1300,  1301, -2745,  1304,  3659,  3661,  3556,  3119,  3294,
   -2311,  1302,  4634,  1304,  1303,  4258,  3122,  4368,  3678,  3680,
    3682, -2431,  1727,  2422,  3683,  3661,  3923,  1276,  1440,  3445,
    4084,   691,  2423,   601,  3700,  4576,  4204,  3123,  1968,  4205,
    3517, -2431,  2486,  1450,  1300,  1301,  1511,  4085,  1875, -1712,
    1300,  1301,  1137,  1302,  1138,  2322,  1303,  2868,   704,  4369,
    3937,   152,   153,  3287,  3731,  3734,  3737,  1899,   692,  1300,
    1301,  3941,  4515,  3124,  3943,  1302,  1240,  2401,  1303,  2628,
     706,  3514,  4832,  1317,  2981,  2528,   291,  2529,   293,  3027,
    1304,   291,  2503,   293,  1302,  3185,  1304,  1303,  1302,  1300,
    1301,  1303,  2359,  1304,  3506,  1304,  1300,  1301,  1302,  2427,
     707,  1303, -2745,  1302, -1939,  2445,  1303,  4501,  1300,  1301,
    1728,  4722,  3389,  2583,  3390,  1300,  1301,  1300,  1301,  1300,
    1301,  2584,  2038,  1302,   853,  1512,  1303,  2468,  4086,  1304,
    2562,  2984,   688,  2908,  1302, -1939,   537,  1303,  2913,   538,
     537,  1981,  2361,   538,  1981,  1317,  1657,  3302,  3401,  1300,
    1301,   857,  2920,  1300,  1301,  2607,  2608,  2609,  1300,  1301,
    3192,  2493,   859,  1300,  1301,  1300,  1301,  2039,   596,  2492,
     657,  3837,  1300,  1301,  1304,  3802,   596,  1300,  1301,  1300,
    1301,  3612,   657,   667,  1300,  1301,  2935,  1304,  1300,  1301,
     589,  2362,  1337,  3411,  1304,   896,   657,  3192,  3192,  3713,
     870,  1385,  1463,   904,  2242,  2381,  1385,  2629,   920,  2516,
    2618,  2525,  2525,  3412,  2525,  3714,  3838,  4720,  4721,   951,
    2526,  2526,  3073,  2526,  2630,   953,  3023,   699,  1124,   947,
    3873,  3874,  1300,  1301,  2995,  1875,  2631,  3192,  2549,   973,
    2585,  2586,  1427,   962,   667,   947,   947,   657,  2655,   152,
     153,   657, -1939,  2992,  4320,  1304,  2247,  3875,  1300,  1301,
    1317,  3238,   147,  4324,  1300,  1301,  1300,  1301,  3657,  1320,
    1900,  1462,  2574,   975,  4061,  1300,  1301,  1068,   667,   667,
     657,   657,   657,   898,  2587,  1302,  1901,  1075,  1303,  1300,
    1301,   965,  2525,  2525,  2525,  1240,   667,  1304,  1300,  1301,
    1097,  2526,  2526,  2526,  1300,  1301, -1939,  1098, -1826,  1019,
    1109,   667,  2570,  3882,  1099,  2382,  2006,  1302,  2632,  1304,
    1303,  1690,  1691,  2323,  1101,  2638,  2627,  2875,  1111,  1940,
    1302,  2363,  1337,  1303,   657, -1826,  1502,  2390,  1304,  1024,
    1302,  1320,  1304,  1303,  1020,  1112,  1440,   148,  1113,   667,
    1114,  1302,  1304,   907,  1303,  1121,  2404,  1304, -1826,  1302,
    2405,  1646,  1303,  1140,  2341,  1146,  1020,  1735,  1149,  3209,
    2409,  3565,  1300,  1301,  1612,  2413,  3930,  1304,  1300,  1301,
    1617,  1618,   947,  3744,  1159, -1826,  2679,  2334,  1304,  1163,
    3572,  2882,  2874,  1167,  3860,  2414,  3508,  3219,  1180,  2324,
    3222,  3223,  1302,  3225,  1187,  1303,  3228,  3229,  1302,  2688,
    3232,  1303,  3772,  3773,  1188,  3241,  1189,  2673,   657,  2676,
    3245,  3246,  3247,  3248,  3249,  1028,  1009,  1302,  3253,  3254,
    1303,  3256,   149,  2633,  2680,  3787,  2225,  3265,  3266,  3267,
    3268,  1191,  3053,  3272,  3273,  1192,  3275,  2706,   532,  2945,
    1193,   532,  3494,  3494,  3494,  3494,  1320,  1302,  1300,  1301,
    1303,  1337,  1300,  1301,  1302,  1196,  4048,  1303,  1146,  3795,
    1300,  1301,  1197,  2707,  1300,  1301,  1302,  1198,  4038,  1303,
    1199,  1300,  1301,  1302,  3235,  1302,  1303,  1302,  1303,  1340,
    1303,  1200,  2817,  4039,  1533,  1092,  1093,  3567,  1094,  2720,
    1095,   657,  1055,   657,  1875,  2634,  1533,  4040,  2727,  2728,
    3344,   947,  3669,  3310,  3670,  1201,   947,  1302,  1028,  4196,
    1303,  1302,  1202,  1647,  1303,  1087,  1302,  1203,  2280,  1303,
    2229,  1302,  1204,  1302,  1303,  1205,  1303,  1206,  1251,  1304,
    1302,  1300,  1301,  1303,  2230,  1302,  1341,  1302,  1303,  1207,
    1303,  2281,  1302,  1875,  2325,  1303,  1302,  2418,  3671,  1303,
    1270,  1208,  1300,  1301, -2793,  1209,  1300,  1301,  1213,  3373,
    1215,  1304,  2877,  1283,  1284,  2880,  1216,  1329,  1330,  1331,
    1332,  3672,  2368,  2369,  1304,  1941,  3153,  1300,  1301,  2421,
    1774,  2387,  1337,  1217,  1304,   667,  2395,  1337,  1220,  2974,
    1302,  1970,  2424,  1303,  1357,  1304,  1389,   667,  1978,  1322,
    1323,  1979,  2436,  1304,  1980,  1300,  1301,  3673,  3376, -1144,
    1556,  1221, -1144,  2455,  1774,  3540,  1302,  1317,   896,  1303,
    2997,  3353,  1302,  1440,  1302,  1303,  4581,  1303,  2397,  1337,
    1981,  1981,  1981,  1302,  2629,   993,  1303,  1327,  1328,  1329,
    1330,  1331,  1332,  1775,  4727,  1222,  1304,  1302,  4726,  1223,
    1303,  2630,  1304,  1224,  4190,  1225,  1302,  4193,  4194,  1303,
    1226,  4276,  1302,  3098,  3377,  1303,  1227,  3927,  1557,  1345,
    3383,  1304,  1776,  1228,  4206,  2398,  1832,  1775,  3236,  1390,
    2065,  2065,  2065,  1229,  1391,  1230,  1124,  1124,  1124,  3386,
     667,  1233,  4215,  1234,  3237, -1940,  2410,  1337,  1558,  1235,
     947,  1304,  2231,  1300,  1301,  3531,  3186,  1241,  1304,  1242,
     947,   947,   947,   947,  2947,  2993,   291,  1243,   293,   667,
    1304,   667,   667,  2411,  1337,  2251,  3393,  1304,  1392,  1304,
    1302,  1304,  3444,  1303,  1055,  2949,  1302,  3079,  3397,  1303,
    1244,  3845,  1777,   667,  1393,  3398,   667,  3399,  1386,  3400,
    1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  3731,  1388,
    3734,  1304,  3737,  3574,  1245,  1304,  4277,  4278,   994,  1124,
    1304,  4279,  4280,  4281,  3879,  1304,  3187,  1304,  2232,  3402,
    1246,  2322,  1395,  3405,  1304,  3040,  2087,  3883,  3410,  1304,
    1247,  1304,  1406,  3413,  4255,  3415,  1304,  2251,  2412,  1337,
    1304,  1398,  3417,  2233,  1248, -1940,  4268,  3419,   624,  3420,
    3674,  3066,  1249,  1320,  3421,  3069,  1302,  1875,  3792,  1303,
    1302,  1778,  4790,  1303,  2416,  1337,  2963,  1337,  1302,   667,
     667,  1303,  1302,  3350,  1252,  1303,  3007,  3008,   667,  1302,
    2655,  1533,  1303,  1253,  1304,   995,  2088,  1254,  2088,  2088,
    3514,  1255,  3604,  2322,  3675,  3188,  3611,  3633,  1256,   625,
    3099,  2874,  3793, -1912,  1257,  2322,  2234,  3634,  1258,  3115,
    1304,  3117,  4487,  4488,  4822,   667,  1304,  4824,  1304,  1259,
    3643,  2864,  3202,  3203,  3372,  2369,  1260,  1304,  3794,  3375,
    1337,  3403,  1337,  3755,  4056,  2892,  1020,  1261,  4058,  1302,
    1262,  1304,  1303,  3520,  3521,  3114,    78,  3524,  3525,  4840,
    1304,  1875,  2229,  1559,  1028,  1009,  1304,  1263,  1876,  4060,
    1302,  2893,  1264,  1303,  1302,  1265,  2230,  1303,  3158,  3171,
    3172,  1266,  2634,   532,  4066,   626,  3807,  1337,   657,   657,
    2242,   667,   667,  1267,  3657,  1302,  1268, -1912,  1303,  3756,
    1269,  4816,  3757,  2864,  3825,  3826,  3840,  3841,  3163,  1273,
    3758,  1316,  2235,  4580,  -687,  1274,  1322,  1323,  1277, -2720,
    4025,  4026,  4383,  1302,  1278,  3637,  1303,  2894,  3759,  1281,
    2895,  1285,  1409,  1286,  1304,  4027,  4028,   947,  2896,  1287,
    1304,  4383,  3195,  3196,  3197,  3198,  1288,  3200,  3201,  4029,
    4030,  1407,  4068,  4036,  4045,  1289,  2897,  1397,  4069,  4443,
    4444,  4445,  2242, -1940,  2888,   993,  1290,  4384,  2252,  1339,
    3271,  4062,  1337,  3760,  2242,  4076,  1337,  4385,  4231,  4195,
    4200,  4093,  4094,  4201,  1408,  3286,  4384,  1415,  1779,  1417,
    4041,  1419,  4356,  1423, -1940,  1580,  4385,  3300,  1441,  4227,
    4228,  3309,  4211,  1560,  4329,  4330,  1456,  4491,  4218,  2323,
    4197,  3991,  4890,  4333,  4330,  1940,  1444, -1616,  4417,  4418,
    1304,  1446,  3189,  1317,  1304,  1561,  4386,  1581,  1474,  2486,
    1476,  3761,  1304,   719,  4486,  3525,  1304,  1492,  4070,  1494,
    2252,  1495,  4071,  1304,  2231,  4386,  3316,  3317,  1496,  3319,
    4341,  3321,  3322,  3323,  3324,  3325,  3326,  3327,  4747,  2898,
    3330,  4437,  1497,  3335,  1500,  4261,  1562,  3338,  1326,  1327,
    1328,  1329,  1330,  1331,  1332, -1616,  1504,  3355,  4499,  4330,
    1582,  2323,   134,  2065,  1505,  1583,  3474,  1940,  1509,  1124,
    1514,   996,   997,  2323,   999,  3780,  1001,  1523,   994,  1940,
    4387,  2296,  2297,  1304,  4530,  4531,  1546, -1616,  2732, -1616,
    1550, -1940,  1551,  1002,  1555,  1317,  4350,  2310,  4538,  4539,
    2232,  3497,  3498,   746,  1304,   291, -1616,   293,  1304,  1318,
    1574, -1616,  1575,  3762,  2592,  1576,  3763,   627,  4540,  4539,
    1019,  1577,   152,   153,   291,  2233,   293,  1596, -1616,  1304,
    3808,  1600,  1319,  2618,  1601, -1616,  1606,  -856,  1615,   628,
    4583,  4584, -1616,  1616,  2899, -1940,  1623,  1865,  1866,  2324,
    1024,  1624, -1616,  4639,  3841,   995,  -856,  1304,  1626,   750,
    1385,  1631,  2516,  1638, -1616,   135,   751,   667,  1055, -1616,
    3486,  1414,   667,   667,   667,   629,  1674,  2593, -1616,   657,
    1680,  3915,  1682,   136,  3918,  3919,  3492,  1684,  2234,  4356,
    4671,  4672,  4377,  3764,  1317,   756,   757,  2733,  1687,  1320,
    1688,  4381,  3040,   667,  4701,  3525,  2594,  3042,  1692,  1876,
    4403,  4702,  3525,  4719,  3203,  4405,  1695,  1584,  1704,   152,
     153,  1696,  2592, -2788,  1240,  3658,  2312,  2313,   667,   667,
     667,  4736,  4330,  1705,   667,   630,  1706,   152,   153,  1715,
    1055,  2088,  1732,  4388,  4374,  4675, -1616,  4738,  4330,  1733,
    4389,  1941,  1055,   137,  4739,  4330,   152,   153,  1743,  4374,
    4771,  4772,  4388,  1741,  1795,   765,  3555,  1335, -1616,  4389,
    4787,  4330,  2628,  1747,  4788,  4330,  2595,  3148, -1616,  2296,
    2297,  4791,  4330,  1754,  2235,  2593,  3345,  4724,  1773,  2900,
    4390,  1320,  1585,  1784,  2997,  2310,  1321,  4794,  3841,  1820,
    2417,  1831,  3554,  1832,  2325,  4517,  4805,  4806,  1833,  4390,
   -1616,   667,  1478,  1909,  2594,  3585,   532,  1856,  3588,  4823,
    4330,  1873,  1479,  1941,   657,  4837,  3727,   657,  3286,   776,
    1884,  3765,  4879,  4880,  1893,  1941,  1480,   138,  1440,  4543,
    1915,  3582,  -679,   780,   781,  3819,  3820,  1935,  1481,  1482,
    1483,  1936,  1322,  1323,  1875,  2596,  1586,  3209,  1944,  2901,
    3766, -1616,  1949,  4391,  3286,  2734,  1799,  1484,  1324,  3210,
    2861,  1956,  3620,  3618,  3286,  1952,  2735,  1953,  3630,  1954,
    3629,  1960,  4391,  2736,  2595, -1616,  1955,  4579,  2902,  1957,
    1320,  4091,  4092,  1959,  1972,   667,  3629,  1973,  1975,  1974,
    2005,  3650,  3654,  1774,  2592,  2009,  1876,  3666,  3665,  2014,
    2629,  1317,  2017,  2019,  3667,  3668,   657,  2022,  3631,  3632,
    4439,  4582,  -679,  1307,  2312,  2313,  1774,  2630,  3629,  4095,
    2023,  2036,   947, -1616,  2044,  3286,  3691,  3209,  2045,  2631,
    2047,  3704,  2046, -2482,  1322,  1323,  3664,  2056,  2053,  3210,
    2060,   996,   997,   998,   999,  1000,  1001,  2061,  3629,  2062,
    1308,  1317,  2063,  2596,  2104,  2102,  1775,  2593,   139,  2105,
    1800,  4392,  -679,  1002,  1803,  1587,  2106,  3703,   640,  1525,
    2110,  1804,  2737,  4159,  2592,  2115,  2138,  3660, -1616,  1775,
    4392,  2146,  2147,  1440,  2174,  1776,  2594,  3738,  2151, -1616,
   -1616,  3741,   595,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
    1332,  2175,  1309,  2176,  1588,  2177,  2280,  3394,  3186,  2179,
   -1616,  2632, -1616,  2180,  1310,  4599,  4600,  2181,  4602,  1409,
    2197,  4651,  2202,  4653,  2211,  2207,  1410,  2216,   802,  2281,
    2227,   140,  4351,  1322,  1323,  4352,  2249,  2593,  2270, -1616,
   -1616,  2284,  -679, -1616, -1616,  2269,   808,  4554,   640,  2285,
    4692,   810,  1805,  2287,   811,  1777,  2595,  2288,  2336,  2320,
    2338,  2344,  2597,  2350,  2352, -2788,  2594,  2592,  2738,  1875,
    3677,  2353,  2354,  2376,  1533,  2377,  1485,  2378,  3187,  2385,
    2383,  4652,  2384,  2394,  2388,  3806,  2280,  1327,  1328,  1329,
    1330,  1331,  1332,  3115,  1486,  2399,   141,  1320,  2403,  2407,
    2425,  2426,  4579,  1311, -1616,  2434,  2431,  4375,  4376,  2281,
    1807,  4748,  2435,  4353,  4354,  2446,  2447,  2460,  4250,  2448,
    4379,   947,  2463,  2467, -1295,  2473,  2633,  4382,  1332,  3114,
    2593,  2495,  2483,  1218,  1778,  2596,  2595, -1441,  4407,  4408,
    2498,  2504,  1271,  4698,  3040,  4699,  4700,  1320,  2592,  4562,
    1275,  3679, -2127,  2520,  4631,  4569,  2550,  3188,  2556,  2594,
    2519, -2788, -1616,  1720,  2561,  3066,  3852,  2564,  2567,  3854,
    2597,   667,  2591,  2599,  4810,   667,  1533,  2604,  2592,  2605,
    2606,  3681,  -679,  2611,  1325,  1326,  1327,  1328,  1329,  1330,
    1331,  1332,   947,  2622,  2623,  1502, -1616,  2637,  2634,  3454,
    2993,   639,  2641,  2643,  2649,  2647,  2651,  1020,  1020,  3455,
    2659,  2593,  2657, -1616,  1876,  2596,  2530,  2658, -1616,  3892,
    2662,  2663,  2664,  3456,  3903,  1487,  4677,  2628,  2665,  2595,
    2531,  2666,  2674,   657,  2691,  3457,  3458,  3459,  2682,  2678,
    2594,  2593, -1616,  4810,  2694,  3910,  3211,  2692,  3884, -1616,
    1322,  1323,  1808,  2697,  3460,  3917,  2696,  2522,  1875, -1616,
    2628,  2714,  -679,  3920,  3629,  2715,  2719,  3286,  1810,  1875,
    2594, -1616,  2721,  1875,  2722,  2726, -1616,   667,  1875,  2818,
     642,  3629,  2723,  3286,  3286, -1616,  2724,  1488,   640,  2822,
    2823,  4875,  2532,  2725,  2533,  2827,  2832,  3286,  3629,  2829,
    1322,  1323,  4883,  2833,  1489,  2834,  4875,   872,  2596,  3629,
    2595,  4883,  3629,  2835,  3929,  2856,  2836,  2863,  4505,  2837,
    2838,  2839,  4512,  3935,  2840,  2841,  -886,  2878,  2855,  2842,
    3947,  2843,  2754,  2844,  2755,  4472,  3946,  2845,  2882,   657,
    2595,  2846,  2847,  2848,  4001,  2849,  2850,   947,  2851,  4002,
    2891,  1779,  2597, -1616,  2852,  2853,   532,  2854,  2915,  2916,
     642,  2972,  2886,  -679,  4017,  2629,  -826,  -826,  3005,  2757,
    3014,  3309,  2914,  2491,  3189, -1616,  2990,  -826,  2927,  2928,
    2940,  4010,  2630,  2962,  2971, -1616,  2534,  2760,  2980,  2596,
    1312,  1313,  1314,  2989,  2631,  2761,  3006,   873,  2629,  4860,
    3018,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  3016,
    3019,  3020,  3017,  3025,  3029,  2630,  3030, -1616,  3031,  2596,
    3043,  3047,  2763,  3044,  3049,  2031,  3048,  2631,  3056,   875,
    4461,  3071,  2597,  3070,  3074,  3075,  1674,  4557,  4462,  2764,
    3076,  2535,  4145,  -679,   876,  3087,  3080,  3094,  3081,  4783,
    3095,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  3096,
    3108,  3109,  3120,  3111,  3121,  4463,  1990,  2123, -1616,  2769,
    1991,  2124,  3130,  3461,  3143,  3157,  2632,  3156,  4099,  3159,
    3164,  3170,  1992,  4104,  3182,  3183,  3209,  3221,  1876,  3226,
     548,  3462, -1616,  4505,  3227,  3231,  4080,  3230,  4114,  3233,
    4512,  3234,  3240,  3242,  3243,   880,  3244,  3251,  3252,  2632,
    1359,  3257, -1912,   947,  4472,  3258,  3263,  4587,  4588,   947,
    3264,  4591,  4592,  4593,  4594,  2597,  3274,  3291,  3303,  3304,
    4886,  4118,  3343,   881,  3312,   291,  3313,   293,  3314,   882,
   -1616,  3347,  2345,   667,  2773,  4149,  4149,  3367,   549,  3356,
    3286,  2774,  3361,  3369,  3370,  3422,   641,  4625,  3371,  4161,
    3453,  3378,  3286,  3286,  3379,  3475,  2775,  3432,  3286,  3433,
    3629,  4852,  3481,  4132,  3286,  3437,  3441,  -143,   550,   883,
    3443,  3448,  1876,  3451,  3476,  1533,  3629,  4464,   657,  3483,
    3488,  2633,  3499,  1448,  3503, -1616,  4867,  3500,  3509,  3510,
     642,  3516,  3527,  3519,  3463,  3522,  2597, -1616,  3541,  4287,
    3545,   988,  1360,  3557,  3558,   551,  3561,  3568,  3569,  3570,
    3573,  3584,  3464,  2777,  2633,  3581,  3160, -1616,  2784, -1616,
    3615,  3636,  3638,  3705,  3700,  3712,  2597,  3719,  1361,  3720,
    3724,  1362,  2778,  1410, -1750,  4688,  4689,   557,  3727,  3726,
    3752,  3775,  3771,  3776,  4697,  3783, -1616, -1616,  4237,  3784,
   -1616, -1616,   552,  2634,  2452,  3796,  4465,  3427,  3810,  3811,
    2536,  2537,  2538,  3812,  3828,  2088,  3813,  3830,  1363,  3834,
    3836,  3842,  2583,   643,  3465,  4466,   667,  3864,  3865,  3844,
    3893,   644,  4233,  3898,  3901,  3899,  2634,  2782,  1364,  2783,
    3902,  3466,  3904,  3905,   291,  3906,   293,  2785,  4467,  3911,
    3912,  3913,  1993,  3926,  3934,  3938,  3945,  4004,  3944,  4005,
    4008,  4011,  4012,  4015,  4016,  3531,  4020,  4505,  4512,  4021,
    4022,  4024,   886,  4031,  4034,  4046,  4035,  4036,  4037,  4049,
    1994,  4051,  4053,  4063,  4064,  4054,  4065,  4055,  1995,  4074,
    4059,  4077,  4429,  4073,  4079,  4089,  4098,  4100,  4094,  4109,
    4111,  1365,  3556,  4129,  4121,  3069, -1528,  4126,  4144,  4155,
    4315, -1533,  4130,  4146,  3892,  4151,  4162,  4167,   889,  2791,
    4168,  4169,  4176,  3892,  4184,  1366,  4191,  4192,   -69,  3289,
    4149,   890,  1996,   553,  4207,  4232,  4226,  4234,  4243,  4219,
    4260,  4266,  4045,  3286,  4265,  4267,  4270,  4271,  4272,  4273,
    4285,  4358,  2754,   947,  2755,  4286,  4290,  4299,  4289,  4359,
     657,   987,  4303,  4305,  4322,  4325,  4327,  4323,  4364,  4332,
    4365,  1300,  1301,  4362,  4495,  4216,  4378,  2792,  2793,  2794,
    4401,  4430,  4432,  1997,  2795,   554,  -826,  -826,  4434,  2757,
    4431,  4435,  4438,  4440,  4442,  4472,  4451,  -826,  4454,  4473,
    2796,  4474,  4399,  2797,  4475,  4476,   555,  2760,  4483,  4492,
    4409,  4509,  4410,   893,  4529,  2761,   719,  4485,  4498,  4522,
    4535,  4546,  2798,  4524,  4547,  4427,  4525,  1055,  4548,  4426,
    1367,  4549,  4550,  4552,  4553,   894,  4555,   895,  4558,  1368,
    2800,  4571,  2763,  4468,  4570,  4586,  4589,  4560,  4590,  4595,
    4598,  4601,  4603,  4604,  1369,  4608,  1674,  4611,  4626,  2764,
    4633,  4452,  4637,  4640,  4656,  4663,  4641,  2655,  4644,  4647,
     657,   556,  1370,  4458,  4654,   947,   557,  1791,  1792,  1793,
    1794,  1795,   851,  4657,  4664,  1025,  4658,  4669,  4679,  2769,
    2776,  4682,  4676,  4694, -1699,   558,  2751,  4735,  1026,  4350,
     947,  4752,  3598,  4753,  4754,  4761,   746,  4774,  4775,   954,
    1027,  4779,  4776,  4782,  4149,  4777,  1371,   945,  4784,  1372,
     559,  4780,  4785,  4795,  4798,  4799,  4802,   945,  4800,  4801,
    4803,  3695,  4826,  4825,  1028,  1009,   560,  4830,  4833,  4836,
    4848,  4853,  4855,  4851,  1065,  4857,  1029,  4859,  4861,  1373,
    4864,  4865,  4876,  3000,  4885,   291,  3118,   293,   851,  3337,
    4253,  4251,   750,  4616,  2773,  4252,  1595,  3600,   667,   751,
    4326,  2774,  1030,  1442,  1031,  1658,  1032,  4615,  4718,  4820,
    1796,  1797,  1798,  1799,  4399,  4818,  2775,  4494,  1033,  4673,
    1686,  4245,   610,  1067,  2512,  2601,  3468,  4096,   756,   757,
    3173,  2831,  4563,  4567,  3493,  4542,  3036,  1166,  2263,    15,
      16,  3034,  4636,  3035,  1734,  2494,  4514,  3278,  2801,  3940,
    3502,  4102,  3507,  3835,  4681,  2034,  4453,  4760,  4850,   851,
    4105,  4813,  4835,  4597,  2701,  1876, -1912,  1034,  4335,  3690,
    3276,  1035,  4154,  2777,  1036,  3283,  3697,  4856,  4750,  3993,
    3768,  4199,  4225,   851,  4537,  4551,  4759,  4541,   851,  3180,
    4708,  4257,  2778,  3799,  3801,  3424,  3797,  3069,   765,  3069,
    4821,   648,   649,  1037,  4792,  1038,  4793,  4693,  4343,  4723,
    4635,  4630,  4380,  1039,  3689,  1040,  1620,  1800,  3280,  1801,
    1802,  1803,  4508,  3147,  1694,  4361,   851,  2821,  1804,  2198,
    4756,  3052,  4171,   291,  3485,   293,  4149,   950,  4149,  4149,
    3026,  1041,  1042,   851,  2573,  4648,  3829,  2782,  2970,  2783,
    4624,  2321,  2276,  3077,  4556,  1518,  4749,  2785,  3809,  1510,
    3450,  2644,   776,  1043,  2907,  1637,  3103,  2905,  4662,  1302,
    1830,  3861,  1303,  3100,  4610,  4489,   780,   781,  3439,  4814,
    4023,  4815,  4427,  1772,  4075,  1044,  4426,   851,   851,   851,
     851,  2987,  3803,  4179,  4318,  2204,  2205,  3535,  4458,   851,
    3684,  4574,  4817,  3533,  4661,  4316,  4317,  2876,   667,  1805,
    2997,   650,  2007,  2051,  1045,  3024,  3059,  4107,  3848,  4717,
    3886,  3847,  4757,  1081,  2343,  1186,  2684,  2163,   657,  2791,
    1061,  1064,  1670,  2685,  1377,   655,  4183,  4686,  4687,  3144,
    2506,  2059,  3833,  4849,  4858,  4731,  4477,  4605,  4884,  4887,
    1280,  4545,  3851,  3129,  4149,  4149,  3881,  1022,  4149,  4708,
    2108,  2466,  1023,  4819,  2669,  3126,  1806,  1807,  3127,  2069,
    2555,   983,  2209,  1493,  3015,   851,  3072,  4441,  4450,  3469,
    3708,  4730,  1046,  4812,  1998,   985,  4567,  2792,  2793,  2794,
    1876,   945,   945,  1499,  2795,   945,  1106,  1107,  1108,     0,
    2212,     0,     0,  1661,     0,     0,  1662,     0,  1047,  1663,
    2796,   667,     0,  2797,     0,   851,     0,     0,     0,  1048,
    1049,     0,     0,  1050,  1051,     0,     0,   945,     0,     0,
       0,     0,  2798,     0,     0,     0,     0,     0,  4768,  4769,
       0,     0,     0,     0,  1052,     0,     0,     0,     0,  4149,
    2800,     0,     0,     0,     0,  2291,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4888,  1791,  1792,  1793,  1794,
    1795,   802,     0,     0,     0,  4351,     0,     0,  4352,     0,
       0,     0,     0,     0,   667,  4878,     0,     0,     0,   808,
    3309,  3309,  1053,     0,   810,     0,     0,   811,     0,     0,
       0,     0,     0,     0,     0,  1054,     0,     0,     0,  1808,
    3174,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1304,  1809,  1810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2526,     0,
       0,  2292,  1055,  2293,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4353,  4354,     0,     0,
    1056,     0,     0,     0,     0,     0,     0,     0,     0,  1796,
    1797,  1798,  1799,     0,     0,     0,     0,     0,     0,  1876,
       0,     0,     0,     0,     0,     0,   667,     0,     0,     0,
    1876,     0,     0,  4854,  1876,     0,     0,     0,     0,  1876,
       0,  2294,     0,  2295,  2296,  2297,  2298,  2299,     0,  2300,
    2301,  2302,  2303,  2304,  2305,  2306,  2307,  2308, -2526,  2309,
    2310,  2311,     0,     0,   851,     0,  1057,   851,   945,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   851,   851,     0,     0,     0,     0,     0,     0,
       0,   851,   851,   851,   851,   851,   851,   851,   851,   851,
     851,   851,   851,     0,     0,     0,  1800,     0,  1801,  1802,
    1803,   851,   851,     0,   851,   851,     0,  1804,     0,   851,
     851,     0,     0,   851,   851,   851,   851,     0,   851,   851,
     851,     0,     0,     0,     0,     0,     0,   851,   851,     0,
     851,   851,   851,   851,   851,     0,     0,   851,   851,   851,
     851,   851,   851,   851,   851,   851,   851,   851,     0,   851,
       0,     0,   851,   851,     0,     0,     0,   851,     0,     0,
       0,   851,   851,   851,     0,     0,     0,     0,     0,  2312,
    2313,     0,     0,   851,   851,   851,     0,     0,     0,     0,
       0,     0,   851,     0,     0,     0,     0,     0,  1805,   851,
     851,   851,   851,     0,     0,     0,  1359,     0,     0,     0,
     851,   851,   851,     0,   851,   851,   851,   851,   851,     0,
     851,   851,   851,   851,   851,   851,   851,   851,     0,     0,
       0,   851,   851,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2754,     0,  2755,     0,
       0,     0,     0,     0,     0,  1806,  1807,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2750,     0,     0,     0,
       0,     0,  2751,     0,  2752,     0,  2753,     0,     0,     0,
    -826,  -826,     0,  2757,     0,     0,     0,     0,  2754,     0,
    2755,  -826,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2760,     0,     0,     0,     0,     0,     0,  1360,  2761,
       0,     0,     0,     0,     0,     0,     0,   851,  1083,     0,
    2756,     0,     0,     0,     0,  2757,  2758,     0,     0,     0,
       0,  2759,     0,   851,  1361,     0,  2763,  1362,     0,     0,
       0,     0,     0,  2760,     0,     0,     0,     0,     0,     0,
    1674,  2761,     0,  2764,     0,     0,     0,     0,     0,     0,
       0,  2762,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1363,     0,     0,     0,  2763,     0,
       0,     0,     0,  2769,     0,     0,     0,     0,     0,  1165,
       0,     0,  1674,     0,  1364,  2764,     0,     0,  1808,     0,
     291,     0,   293,  2765,  2766,     0,     0,     0,     0,     0,
       0,  2767,   851,  1809,  1810,     0,     0,     0,  1194,  2768,
       0,     0,     0,  -965,     0,  2769,     0,   851,     0,     0,
       0,     0,     0,     0,     0,  2770,     0,     0,     0,     0,
       0,     0,     0,     0,   851,     0,     0,     0,     0,   291,
       0,   293,     0,     0,     0,  2771,  1232,  1365,  2773,     0,
       0,     0,     0,     0,     0,  2774,     0,     0,     0,     0,
       0,     0,     0,  1250,     0,     0,     0,     0,     0,     0,
    2775,  1366,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   291,     0,   293,     0,     0,     0,     0,  2772,     0,
    2773,   851,     0,     0,     0,     0,     0,  2774,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1294,     0,  2775,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2777,     0,     0,
       0,     0,     0,     0,     0,     0,  2776,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2778,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2777,
       0,     0,     0,     0,     0,     0,  1367,     0,     0,     0,
       0,     0,     0,     0,     0,  1368,     0,     0,  2778,     0,
       0,     0,  2779,     0,     0,  1416,     0,     0,     0,   945,
    1369,  2782,     0,  2783,     0,     0,     0,     0,     0,     0,
       0,  2785,     0,     0,     0,     0,     0,     0,  1370,  2754,
       0,  2755,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2780,     0,     0,     0,  1447,  2781,     0,     0,   851,
       0,     0,     0,  2782,     0,  2783,     0,     0,     0,     0,
    2784,     0,     0,  2785,     0,     0,  2757,     0,     0,     0,
       0,     0,  1371,     0,     0,  1372,     0,     0,     0,     0,
       0,     0,     0,     0,  2760,     0,     0,     0,     0,     0,
       0,     0,  2761,  2791,  2786,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1373,     0,     0,  2787,  2788,
    2789,  2790,     0,     0,     0,     0,     0,     0,     0,  2763,
       0,     0,     0,     0,   537,     0,     0,   538,     0,     0,
       0,     0,     0,  1674,     0,  2791,  2764,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2792,  2793,  2794,     0,     0,     0,     0,  2795,     0,
       0,     0,     0,   851,   851,   851,  2769,     0,     0,     0,
       0,     0,     0,     0,  2796,     0,     0,  2797,   851,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2792,  2793,  2794,  2798,     0,     0,     0,
    2795,     0,     0,     0,   851,     0,     0,     0,     0,     0,
     851,     0,     0,   851,  2800,   851,  2796,     0,     0,  2797,
       0,   851,     0,   851,   851,     0,     0,     0,     0,     0,
       0,     0,   291,     0,   293,     0,     0,     0,  2798,     0,
       0,  2773,     0,  2799,     0,     0,     0,     0,  2774,     0,
       0,     0,     0,     0,  1712,  1377,  2800,  1713,     0,     0,
       0,     0,     0,  2775,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1745,  1746,     0,     0,     0,     0,     0,     0,
       0,  1756,  1757,     0,     0,  1760,  1761,  1762,  1763,  1766,
    1767,  1768,  1769,     0,     0,     0,     0,     0,     0,     0,
       0,  1785,  1786,     0,  1787,  1788,     0,     0,     0,  1813,
    2777,     0,  -965,  1822,  1823,  1824,  1825,     0,     0,  1828,
       0,     0,     0,     0,     0,     0,   851,  1836,  1837,  2778,
    1840,  1841,     0,     0,     0,   851,     0,  1845,  1846,  1847,
       0,     0,  1850,  1851,  1852,  1853,  1854,  1855,     0,  1857,
       0,     0,  1860,  1861,     0,     0,     0,  1864,     0,     0,
       0,  1867,  1871,  1872,   851,     0,     0,     0,     0,     0,
       0,     0,     0,  1879,  1880,  1881,     0,     1,     0,     2,
       0,     0,  1889,     0,  2782,     0,  2783,     0,     0,  1894,
    1895,  1896,     0,     0,  2785,     0,     0,   851,     0,     0,
       0,     4,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     5,     6,     0,   851,     0,
       0,     0,  1932,     8,     0,     0,   851,     0,     9,    10,
       0,     0,     0,     0,     0,   851,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2791,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   945,     0,     0,     0,     0,
       0,    13,     0,     0,     0,     0,     0,     0,     0,    14,
      15,    16,     0,     0,     0,     0,     0,  2011,     0,     0,
       0,     0,     0,    17,    18,     0,     0,     0,     0,     0,
       0,     0,     0,  2021,  2792,  2793,  2794,     0,     0,     0,
       0,  2795,     0,     0,     0,     0,     0,     0,     0,     0,
      20,     0,     0,     0,     0,     0,     0,  2796,     0,  2816,
    2797,     0,     0,     0,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2798,
     851,     0,     0,    22,     0,    23,     0,     0,     0,    24,
       0,     0,     0,    25,     0,     0,     0,  2800,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2107,     0,     0,     0,     0,     0,     0,    27,
       0,    28,     0,     0,     0,     0,     0,  2117,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,   851,     0,  2144,     0,   851,     0,     0,     0,
       0,   851,   851,     0,     0,    30,     0,     0,     0,    31,
     851,     0,   851,     0,   851,   851,   851,   851,     0,     0,
     851,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,   851,     0,   851,   851,     0,   851,   851,   851,   851,
       0,   851,     0,     0,   851,     0,     0,     0,     0,     0,
       0,  2187,     0,   851,     0,     0,     0,     0,     0,     0,
     851,     0,   851,     0,   851,   851,     0,   851,   851,     0,
       0,     0,   851,   851,   851,     0,     0,     0,   851,   851,
     851,     0,   851,     0,   851,     0,   851,     0,   851,     0,
     851,     0,     0,     0,     0,   851,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,   851,     0,     0,     0,     0,     0,     0,   851,
       0,    34,   851,    35,     0,     0,     0,     0,   851,     0,
       0,   851,     0,     0,     0,   851,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,    39,     0,    40,     0,     0,    42,     0,     0,
      43,    44,     0,     0,     0,     0,     0,   945,     0,     0,
       0,    45,     0,     0,    46,     0,     0,     0,     0,  2355,
       0,     0,    47,   945,   945,   851,     0,   851,    48,     0,
       0,     0,     0,     0,     0,     0,    49,     0,     0,     0,
       0,    50,    51,    52,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   851,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,     0,     0,
       0,     0,     0,  2438,  2440,  2442,     0,     0,    56,     0,
       0,     0,    57,     0,     0,    58,     0,     0,     0,     0,
      59,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     945,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2475,     0,     0,     0,     0,     0,
      61,  2816,     0,  2480,     0,  2481,    62,     0,     0,     0,
       0,     0,     0,     0,  3193,     0,     0,     0,     0,    63,
       0,     0,     0,     0,     0,     0,  3193,  3193,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2816,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   945,
       0,     0,     0,     0,   945,   851,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2569,     0,     0,     0,
       0,     0,     0,     0,     0,  2582,     0,     0,     0,     0,
       0,     0,     0,     0,  3193,  3193,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2619,     1,     0,     2,     0,   851,
       0,     0,     0,   851,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     3,     0,     0,     0,     4,
       0,     0,     0,     0,     0,     0,     0,  2144,     0,     0,
     851,   851,     0,     5,     6,     0,     0,     7,     0,     0,
       0,     8,     0,     0,     0,     0,     9,    10,  2668,     0,
       0,   851,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,   851,     0,   851,  2677,    11,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,   851,     0,     0,     0,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
       0,     0,     0,     0,     0,     0,     0,    14,    15,    16,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,    18,     0,     0,     0,     0,     0,   945,     0,
       0,     0,     0,     0,    19,     0,     0,     0,   945,   945,
     945,   945,     0,     0,     0,     0,     0,     0,    20,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    22,     0,    23,     0,     0,   851,    24,     0,     0,
    2828,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,     0,     0,     0,     0,
       0,     0,     0,   851,     0,     0,     0,    27,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   851,     0,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2885,    30,     0,     0,  2887,    31,     0,     0,
       0,  2889,  2890,     0,    32,     0,     0,     0,     0,     0,
    1763,     0,  2906,     0,  1763,     0,  2909,  2910,     0,     0,
       0,     0,     0,     0,  2816,     0,     0,     0,     0,     0,
    2917,  2918,     0,  2919,     0,     0,  2921,  2922,  2923,  2924,
       0,  2925,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2929,     0,     0,     0,     0,     0,     0,
    2930,     0,  2931,     0,  2932,  2933,     0,  2934,     0,     0,
       0,     0,  2937,  2938,  2939,     0,     0,     0,  2941,  2942,
    2943,     0,  2944,     0,  2946,     0,  2948,     0,  2950,     0,
    2951,     0,    33,     0,     0,  2952,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
       0,    35,  2975,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2816,     0,    36,     0,     0,     0,  2985,     0,
       0,  2988,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   945,     0,    38,     0,     0,
      39,     0,    40,     0,    41,    42,     0,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,    46,     0,     0,     0,     0,     0,     0,  3193,
      47,     0,     0,     0,     0,     0,    48,     0,     0,     0,
     851,     0,     0,     0,    49,  1083,     0,     0,     0,    50,
      51,    52,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,     0,     0,   851,   851,     0,   851,     0,     0,
       0,     0,    53,     0,     0,     0,   851,     0,     0,     0,
      54,   851,     0,     0,   851,     0,   851,   851,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3107,     0,     0,     0,     0,
       0,     0,   851,     0,    55,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,     0,
      57,     0,     0,    58,     0,     0,     0,     0,    59,     0,
       0,     0,     0,     0,     0,     0,   851,     0,     0,     0,
       0,     0,     1,     0,     2,     0,     0,     0,     0,     0,
      60,     0,     0,     0,     0,     0,     0,     0,    61,     0,
       0,     0,     3,     0,    62,     0,     4,     0,     0,     0,
     851,     0,     0,     0,     0,     0,     0,    63,     0,     0,
       5,     6,     0,     0,     7,     0,     0,     0,     8,     0,
       0,     0,     0,     9,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   851,     0,     0,
       0,     0,     0,    11,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   851,     0,     0,
       0,     0,    12,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2816,     0,     0,    13,     0,     0,     0,
       0,     0,     0,     0,    14,    15,    16,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
       0,     0,     0,     0,     0,  3311,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    20,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    22,  3352,
      23,     0,     0,  3354,    24,     0,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,     0,   851,   851,     0,     0,     0,     0,
    3381,  3382,     0,     0,    27,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3404,    29,     0,     0,     0,     0,     0,     0,     0,
    3414,     0,  3416,     0,  3418,     0,     0,     0,     0,     0,
      30,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3687,     0,     0,     0,     0,     0,  2751,
       0,  2752,     0,     0,     0,     0,     0,     0,     0,     0,
     945,     0,     0,     0,     0,  2754,     0,  2755,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,     0,     0,     0,  2756,     0,     0,
       0,     0,  2757,   851,     0,     0,    34,     0,    35,     0,
     851,     0,     0,     0,     0,     0,  2619,     0,     0,     0,
    2760,    36,     0,     0,     0,     0,     0,     0,  2761,     0,
       0,     0,    37,     0,     0,     0,     0,     0,  2762,     0,
       0,     0,     0,  2619,     0,     0,   851,     0,     0,     0,
       0,     0,     0,     0,    38,  2763,     0,    39,     0,    40,
       0,    41,    42,  2144,     0,    43,    44,     0,     0,  1674,
       0,     0,  2764,     0,     0,     0,    45,     0,     0,    46,
    2765,     0,     0,     0,     0,     0,     0,    47,  3688,  3948,
    3949,     0,     0,    48,     0,  3950,  2768,  3951,     0,  3952,
    3953,    49,  2769,     0,     0,     0,    50,    51,    52,     0,
       0,     0,     0,     0,     0,     0,  3755,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2771,     0,     0,     0,     0,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,    54,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   945,
       0,     0,     0,     0,     0,     0,     0,     0,   291,     0,
     293,     0,  3954,     0,     0,  3955,     0,  2773,     0,     0,
       0,     0,     0,  3956,  2774,     0,     0,     0,     0,     0,
       0,    55,   851,     0,     0,     0,   851,     0,     0,  2775,
       0,  3957,     0,    56,     0,     0,     0,    57,     0,     0,
      58,     0,     0,     0,     0,    59,     0,     0,     0,  3958,
       0,     0,     0,  2776,     0,     0,     0,     0,     0,   851,
     945,     0,     0,     0,     0,     0,     0,    60,     0,     0,
       0,     0,     0,     0,  3959,    61,  3960,     0,     0,     0,
       0,    62,     0,     0,     0,     0,  2777,     0,     0,     0,
    3961,  3962,     0,     0,    63,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2778,     0,     0,     0,  2779,
       0,     0,     0,     0,     0,     0,     0,     0,  2816,     0,
    3745,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3963,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3774,     0,     0,  2781,  3778,  3779,     0,     0,     0,     0,
    2782,     0,  2783,  3964,     0,     0,  3786,     0,     0,     0,
    2785,  3788,  3965,  3966,  3789,  3967,  3790,  3791,     0,  4400,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   851,  3968,
    3969,  3970,     0,     0,     0,   945,  2788,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3971,  3972,
    3973,     0,     0,     0,     0,     0,  3974,     0,     0,  3975,
       0,     0,  2791,     0,     0,     0,  3822,     0,     0,     0,
       0,     0,   851,     0,     0,  3976,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   851,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3822,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3978,  3979,     0,  4507,     0,     0,     0,  4507,     0,
    2792,  2793,  2794,     0,     0,     0,     0,  2795,     0,     0,
       0,     0,     0,     0,     0,     0,  3980,  3878,     0,     0,
       0,     0,     0,  2796,     0,     0,  2797,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3822,     0,     0,
       0,     0,     0,     0,     0,  2798,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4400,     0,  2800,     0,     0,     0,     0,     0,     0,
       0,     0,  3981,     0,     0,     0,  3982,     0,     0,     0,
       0,   945,     0,     0,     0,     0,     0,   945,     0,     0,
    3983,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3984,     0,
       0,  3985,     0,     0,  3986,  3987,  3988,  3989,     0,     0,
       0,     0,     0,     0,  4507,     0,     0,     0,     0,  4507,
       0,     0,     0,     0,  4006,  4007,  4507,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3990,  3991,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3992,   851,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4507,     0,     0,     0,     0,
       0,  4725,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3822,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4120,   851,     0,     0,     0,     0,     0,
    2619,     0,   851,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   851,     0,     0,  4158,     0,     0,     0,
       0,   945,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4507,     0,  4507,  4507,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4507,     0,     0,  4507,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4507,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   851,     0,
       0,     0,     0,   945,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2619,     0,     0,     0,  4264,     0,   945,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   851,     0,     0,     0,     0,     0,  3822,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4428,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4482,     0,  4484,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2619,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4668,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,  1868,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,  4755,   728,   201,   729,   730,   731,
     732,   733,  3822,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,  4778,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
    1869,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,  3822,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,  1870,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,  2140,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,  2141,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,  2142,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,  2143,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,  2437,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,  2439,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,  2441,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,  1231,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,  1903,     0,   166,     0,     0,     0,
    1904,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,     0,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,  2010,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
    2884,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
    2936,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,  3821,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,  4807,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,     0,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,     0,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
    1918,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,     0,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,   747,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
    1920,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,     0,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
     719,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,  1963,     0,     0,     0,     0,   232,   233,
     746,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,  1964,
     494,   495,  1965,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,   808,   500,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,     0,     0,     0,   159,
       0,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,   828,   829,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,  3210,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,   640,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,  2280,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,  2281,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
    3589,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,  2583,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,   642,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,     0,   529,     0,     0,     0,     0,
     159,     0,   160,   161,   162,   163,   164,   165,     0,     0,
     166,     0,     0,     0,   167,     0,     0,   168,  3282,   169,
     170,   171,   172,   173,   174,   175,   176,   177,     0,   178,
       0,     0,     0,   179,     0,     0,     0,   180,     0,     0,
     181,   182,   183,     0,   184,     0,   185,   186,     0,     0,
     187,     0,     0,   188,   189,     0,   190,   191,     0,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,   200,
     201,   202,   203,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,   216,  3210,   217,
     218,   219,   220,   221,     0,   222,     0,     0,   223,     0,
       0,   224,     0,   225,     0,     0,   226,     0,   227,     0,
       0,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,     0,   232,   233,     0,     0,     0,     0,   234,     0,
     235,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,   640,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,  2280,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,  2281,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,   642,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   529,     0,     0,     0,
       0,   159,     0,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,  3282,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,     0,   267,   268,   269,     0,     0,
     270,     0,     0,     0,   271,   272,     0,   273,     0,   274,
       0,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,     0,   283,   284,   285,     0,   286,     0,     0,     0,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,     0,   298,   299,     0,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   308,     0,     0,   309,     0,     0,   310,
     311,     0,     0,     0,     0,     0,   312,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,     0,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   349,
     350,     0,     0,   351,   352,     0,   353,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,     0,     0,   366,   367,   368,   369,     0,
       0,     0,   370,   371,     0,     0,     0,   372,     0,   373,
     374,   375,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,     0,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,     0,
       0,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,     0,   445,
     446,  2583,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,   479,   480,     0,     0,   481,   482,   483,   484,
       0,   485,   486,     0,     0,   487,   488,   489,   490,     0,
       0,   491,   492,     0,   493,   494,   495,   496,     0,     0,
       0,     0,     0,   497,   498,   499,     0,     0,     0,   500,
     501,   502,   503,     0,   504,   505,     0,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   513,   514,     0,     0,     0,     0,     0,     0,   515,
       0,     0,   516,     0,     0,     0,   517,   518,   519,   520,
     521,   522,   523,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,     0,   529,     0,     0,
       0,     0,   159,     0,   160,   161,   162,   163,   164,   165,
       0,     0,   166,  3060,     0,     0,   167,     0,     0,   168,
     829,   169,   170,   171,   172,   173,   174,   175,   176,   177,
       0,   178,     0,     0,     0,   179,     0,     0,     0,   180,
       0,     0,   181,   182,   183,     0,   184,     0,   185,   186,
       0,     0,   187,     0,     0,   188,   189,     0,   190,   191,
       0,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,   200,   201,   202,   203,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,   216,
       0,   217,   218,   219,   220,   221,     0,   222,     0,     0,
     223,     0,     0,   224,     0,   225,     0,     0,   226,     0,
     227,     0,     0,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,     0,   232,   233,     0,     0,     0,     0,
     234,     0,   235,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   529,     0,
       0,     0,     0,     0,     0,   159,     0,   160,   161,   162,
     163,   164,   165,     0,  4871,   166,     0,     0,     0,   167,
    4872,   829,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     242,     0,     0,   243,   244,   245,     0,     0,     0,   246,
       0,   247,   248,     0,   249,   250,   251,     0,   252,   253,
       0,   254,   255,   256,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,     0,   267,
     268,   269,     0,     0,   270,     0,     0,     0,   271,   272,
       0,   273,     0,   274,     0,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,     0,   283,   284,   285,     0,
     286,     0,     0,     0,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,     0,   294,   295,   296,
       0,     0,   297,     0,     0,     0,     0,   298,   299,     0,
       0,     0,   300,     0,   301,   302,     0,   303,   304,     0,
       0,     0,   305,     0,     0,   306,   307,   308,     0,     0,
     309,     0,     0,   310,   311,     0,     0,     0,     0,     0,
     312,   313,     0,   314,     0,   315,     0,   316,   317,     0,
       0,     0,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,   334,   335,   336,   337,     0,   338,   339,   340,
     341,     0,   342,   343,   344,     0,     0,     0,     0,   345,
     346,   347,   348,   349,   350,     0,     0,   351,   352,     0,
     353,     0,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,     0,     0,   366,
     367,   368,   369,     0,     0,     0,   370,   371,     0,     0,
       0,   372,     0,   373,   374,   375,     0,   376,   377,   378,
     379,     0,   380,   381,     0,     0,     0,     0,     0,     0,
       0,     0,   382,   383,   384,     0,     0,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,     0,   400,     0,   401,
     402,   403,   404,   405,     0,   406,   407,   408,     0,     0,
     409,     0,     0,     0,   410,   411,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
     422,   423,   424,     0,     0,   425,     0,   426,     0,   427,
     428,     0,   429,   430,     0,   431,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,     0,   445,   446,     0,     0,     0,   447,   448,
     449,   450,     0,     0,     0,   451,     0,     0,     0,   452,
       0,   453,   454,   455,   456,   457,   458,     0,   459,   460,
     461,   462,   463,   464,     0,     0,     0,     0,     0,     0,
     465,   466,     0,   467,     0,     0,   468,     0,     0,     0,
     469,   470,   471,     0,     0,     0,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,   479,   480,     0,     0,
     481,   482,   483,   484,     0,   485,   486,     0,     0,   487,
     488,   489,   490,     0,     0,   491,   492,     0,   493,   494,
     495,   496,     0,     0,     0,     0,     0,   497,   498,   499,
       0,     0,     0,   500,   501,   502,   503,     0,   504,   505,
       0,   506,   507,     0,   508,   509,     0,     0,   510,     0,
       0,   511,     0,   512,     0,   513,   514,     0,     0,     0,
       0,     0,     0,   515,     0,     0,   516,     0,     0,     0,
     517,   518,   519,   520,   521,   522,   523,     0,     0,     0,
       0,     0,     0,   524,   525,     0,   526,   527,   528,     0,
       0,   529,     0,     0,     0,     0,     0,     0,   159,     0,
     160,   161,   162,   163,   164,   165,  1236,     0,   166,     0,
       0,     0,   167,     0,   829,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,     0,   178,     0,     0,
       0,   179,     0,     0,     0,   180,     0,     0,   181,   182,
     183,     0,   184,     0,   185,   186,     0,     0,   187,     0,
       0,   188,   189,     0,   190,   191,     0,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,   200,   201,   202,
     203,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,   222,     0,     0,   223,     0,     0,   224,
       0,   225,     0,     0,   226,     0,   227,     0,     0,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,     0,
     232,   233,     0,     0,     0,     0,   234,     0,   235,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,  1468,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,     0,   529,     0,     0,     0,     0,   159,
       0,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,   567,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,     0,   529,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2524,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,   567,     0,
     167,     0,     0,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,     0,     0,     0,   159,
       0,   160,   161,   162,   163,   164,   165,  3281,     0,   166,
       0,     0,     0,   167,     0,  3282,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,     0,   529,     0,     0,     0,     0,
       0,     0,   159,     0,   160,   161,   162,   163,   164,   165,
       0,     0,   166,     0,     0,     0,   167,  4872,   829,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
       0,   178,     0,     0,     0,   179,     0,     0,     0,   180,
       0,     0,   181,   182,   183,     0,   184,     0,   185,   186,
       0,     0,   187,     0,     0,   188,   189,     0,   190,   191,
       0,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,   200,   201,   202,   203,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,   216,
       0,   217,   218,   219,   220,   221,     0,   222,     0,     0,
     223,     0,     0,   224,     0,   225,     0,     0,   226,     0,
     227,     0,     0,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,     0,   232,   233,     0,     0,     0,     0,
     234,     0,   235,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   529,     0,
       0,     0,     0,   159,     0,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,   567,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,   236,     0,   237,
     238,   239,   240,   241,     0,     0,     0,     0,   242,     0,
       0,   243,   244,   245,     0,     0,     0,   246,     0,   247,
     248,     0,   249,   250,   251,     0,   252,   253,     0,   254,
     255,   256,   257,   258,   259,   260,     0,     0,   261,   262,
     651,   264,     0,     0,   265,   266,     0,   267,   268,   269,
       0,     0,   270,     0,     0,     0,   652,   272,     0,   273,
       0,   274,     0,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,     0,   283,   284,   285,     0,   286,     0,
       0,     0,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,     0,   294,   295,   296,     0,     0,
     297,     0,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,     0,     0,     0,
     305,     0,     0,   306,   307,   308,     0,     0,   309,     0,
       0,   310,   311,     0,     0,     0,     0,     0,   312,   313,
       0,   314,     0,   315,     0,   316,   317,     0,     0,     0,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     334,   335,   336,   337,     0,   338,   339,   340,   341,     0,
     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,
     348,   349,   350,     0,     0,   351,   352,     0,   353,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,     0,     0,   366,   367,   368,
     369,     0,     0,     0,   370,   371,     0,     0,     0,   372,
       0,   373,   374,   375,     0,   376,   377,   378,   379,     0,
     380,   381,     0,     0,     0,     0,     0,     0,     0,     0,
     382,   383,   384,     0,     0,   385,     0,   386,     0,   653,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,     0,   400,     0,   401,   402,   403,
     404,   405,     0,   406,   407,   408,     0,     0,   409,     0,
       0,     0,   410,   411,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,     0,   420,   421,     0,   422,   423,
     424,     0,     0,   425,     0,   426,     0,   427,   428,     0,
     429,   430,     0,   431,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
       0,   445,   446,     0,     0,     0,   447,   448,   449,   450,
       0,     0,     0,   451,     0,     0,     0,   452,     0,   453,
     454,   455,   456,   457,   458,     0,   459,   460,   461,   462,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,     0,     0,   468,     0,     0,     0,   469,   470,
     471,     0,     0,     0,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,   479,   480,     0,     0,   481,   482,
     483,   484,     0,   485,   486,     0,     0,   487,   488,   489,
     490,     0,     0,   491,   492,     0,   493,   494,   495,   496,
       0,     0,     0,     0,     0,   497,   498,   499,     0,     0,
       0,   500,   501,   502,   503,     0,   504,   505,     0,   506,
     507,     0,   508,   509,     0,     0,   510,     0,     0,   511,
       0,   512,     0,   513,   514,     0,     0,     0,     0,     0,
       0,   515,     0,     0,   516,     0,     0,     0,   517,   518,
     519,   520,   521,   522,   523,     0,     0,     0,     0,     0,
       0,   524,   525,     0,   526,   527,   528,     0,     0,   529,
       0,     0,     0,     0,   159,     0,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,   567,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,     0,
     529,     0,     0,     0,     0,   159,     0,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,   829,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     242,     0,     0,   243,   244,   245,     0,     0,     0,   246,
       0,   247,   248,     0,   249,   250,   251,     0,   252,   253,
       0,   254,   255,   256,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,     0,   267,
     268,   269,     0,     0,   270,     0,     0,     0,   271,   272,
       0,   273,     0,   274,     0,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,     0,   283,   284,   285,     0,
     286,     0,     0,     0,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,     0,   294,   295,   296,
       0,     0,   297,     0,     0,     0,     0,   298,   299,     0,
       0,     0,   300,     0,   301,   302,     0,   303,   304,     0,
       0,     0,   305,     0,     0,   306,   307,   308,     0,     0,
     309,     0,     0,   310,   311,     0,     0,     0,     0,     0,
     312,   313,     0,   314,     0,   315,     0,   316,   317,     0,
       0,     0,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,   334,   335,   336,   337,     0,   338,   339,   340,
     341,     0,   342,   343,   344,     0,     0,     0,     0,   345,
     346,   347,   348,   349,   350,     0,     0,   351,   352,     0,
     353,     0,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,     0,     0,   366,
     367,   368,   369,     0,     0,     0,   370,   371,     0,     0,
       0,   372,     0,   373,   374,   375,     0,   376,   377,   378,
     379,     0,   380,   381,     0,     0,     0,     0,     0,     0,
       0,     0,   382,   383,   384,     0,     0,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,     0,   400,     0,   401,
     402,   403,   404,   405,     0,   406,   407,   408,     0,     0,
     409,     0,     0,     0,   410,   411,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
     422,   423,   424,     0,     0,   425,     0,   426,     0,   427,
     428,     0,   429,   430,     0,   431,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,     0,   445,   446,     0,     0,     0,   447,   448,
     449,   450,     0,     0,     0,   451,     0,     0,     0,   452,
       0,   453,   454,   455,   456,   457,   458,     0,   459,   460,
     461,   462,   463,   464,     0,     0,     0,     0,     0,     0,
     465,   466,     0,   467,     0,     0,   468,     0,     0,     0,
     469,   470,   471,     0,     0,     0,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,   479,   480,     0,     0,
     481,   482,   483,   484,     0,   485,   486,     0,     0,   487,
     488,   489,   490,     0,     0,   491,   492,     0,   493,   494,
     495,   496,     0,     0,     0,     0,     0,   497,   498,   499,
       0,     0,     0,   500,   501,   502,   503,     0,   504,   505,
       0,   506,   507,     0,   508,   509,     0,     0,   510,     0,
       0,   511,     0,   512,     0,   513,   514,     0,     0,     0,
       0,     0,     0,   515,     0,     0,   516,     0,     0,     0,
     517,   518,   519,   520,   521,   522,   523,     0,     0,     0,
       0,     0,     0,   524,   525,     0,   526,   527,   528,     0,
       0,   529,     0,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  3282,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,  1008,  1009,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,  1010,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,  1011,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,  1012,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,  1013,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,  1014,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,  1015,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,  1016,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,  1017,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  1018,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,   665,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   156,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  1539,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,   665,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   156,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  1890,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,   665,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   156,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  2614,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,  1008,  1009,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,  1010,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,  1011,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,  1012,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,  1013,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,  1014,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,  1015,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,  1016,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  1018,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,  1379,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  1380,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,     0,  1380,   169,   170,   171,   172,   173,
     174,   175,   176,     0,     0,   923,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,     0,     0,     0,     0,   187,     7,     0,   188,
     189,     0,   190,     0,     0,     0,     0,     0,   194,   195,
     196,   924,   198,   199,     0,   200,   201,     0,     0,     0,
       0,     0,     0,   207,     0,   209,     0,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,     0,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,     0,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,     0,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,     0,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,     0,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   925,
     267,   268,   269,     0,     0,     0,     0,     0,     0,     0,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,     0,   281,     0,   282,     0,     0,     0,   284,   285,
       0,     0,     0,     0,     0,     0,   288,     0,     0,     0,
     289,   290,   291,   292,   293,    26,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,     0,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
     926,     0,     0,   305,     0,     0,     0,   307,   308,     0,
       0,   309,   927,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,    32,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,     0,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   928,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,     0,     0,     0,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,     0,     0,     0,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,     0,
       0,   422,     0,   424,    41,     0,   425,     0,     0,     0,
     427,     0,     0,   429,   430,     0,   431,   929,   432,     0,
       0,   433,     0,   435,   436,   437,   438,   439,   440,   441,
       0,   443,   444,     0,   445,     0,     0,     0,     0,   447,
     448,   449,     0,     0,     0,     0,   451,     0,     0,     0,
       0,     0,     0,   454,     0,     0,   457,   458,     0,   459,
       0,   461,     0,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,     0,   471,     0,     0,     0,   472,     0,     0,
       0,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,     0,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,     0,     0,     0,     0,   510,
       0,     0,   511,     0,     0,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
      60,     0,     0,     0,   524,     0,     0,   526,     0,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,  4568,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,  1122,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,     0,   267,   268,   269,     0,     0,
     270,     0,     0,     0,   271,   272,     0,   273,     0,   274,
       0,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,     0,   283,   284,   285,     0,   286,     0,     0,     0,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,     0,   298,   299,     0,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   308,     0,     0,   309,     0,     0,   310,
     311,   665,     0,     0,     0,     0,   312,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,     0,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   349,
     350,     0,     0,   351,   352,     0,   353,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,     0,     0,   366,   367,   368,   369,     0,
       0,     0,   370,   371,     0,     0,     0,   372,     0,   373,
     374,   375,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,     0,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,     0,
       0,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,     0,   445,
     446,     0,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,   479,   480,     0,     0,   481,   482,   483,   484,
       0,   485,   486,     0,     0,   487,   488,   489,   490,     0,
     156,   491,   492,     0,   493,   494,   495,   496,     0,     0,
       0,     0,     0,   497,   498,   499,     0,     0,     0,   500,
     501,   502,   503,     0,   504,   505,     0,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   513,   514,     0,     0,     0,     0,     0,     0,   515,
       0,     0,   516,     0,     0,     0,   517,   518,   519,   520,
     521,   522,   523,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,   159,   529,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,  1281,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,  2345,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,     0,   267,   268,   269,     0,     0,
     270,     0,     0,     0,   271,   272,     0,   273,     0,   274,
       0,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,     0,   283,   284,   285,     0,   286,     0,     0,     0,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,     0,   298,   299,     0,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   308,     0,     0,   309,     0,     0,   310,
     311,     0,     0,     0,     0,     0,   312,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,     0,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   349,
     350,     0,     0,   351,   352,     0,   353,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,     0,     0,   366,   367,   368,   369,     0,
       0,     0,   370,   371,     0,     0,     0,   372,     0,   373,
     374,   375,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,     0,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,     0,
       0,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,     0,   445,
     446,     0,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,   479,   480,     0,     0,   481,   482,   483,   484,
       0,   485,   486,     0,     0,   487,   488,   489,   490,     0,
       0,   491,   492,     0,   493,   494,   495,   496,     0,     0,
       0,     0,     0,   497,   498,   499,     0,     0,     0,   500,
     501,   502,   503,     0,   504,   505,     0,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   513,   514,     0,     0,     0,     0,     0,     0,   515,
       0,     0,   516,     0,     0,     0,   517,   518,   519,   520,
     521,   522,   523,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,   159,   529,   160,   161,
     162,   163,   164,   165,     0,     0,   166,  3116,     0,     0,
     167,     0,     0,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,  3477,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,     0,   267,   268,   269,     0,     0,
     270,     0,     0,     0,   271,   272,     0,   273,     0,   274,
       0,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,     0,   283,   284,   285,     0,   286,     0,     0,     0,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,     0,   298,   299,     0,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   308,     0,     0,   309,     0,     0,   310,
     311,     0,     0,     0,     0,     0,   312,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,     0,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   349,
     350,     0,     0,   351,   352,     0,   353,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,     0,     0,   366,   367,   368,   369,     0,
       0,     0,   370,   371,     0,     0,     0,   372,     0,   373,
     374,   375,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,     0,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,     0,
       0,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,     0,   445,
     446,     0,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,   479,   480,     0,     0,   481,   482,   483,   484,
       0,   485,   486,     0,     0,   487,   488,   489,   490,     0,
       0,   491,   492,     0,   493,   494,   495,   496,     0,     0,
       0,     0,     0,   497,   498,   499,     0,     0,     0,   500,
     501,   502,   503,     0,   504,   505,     0,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   513,   514,     0,     0,     0,     0,     0,     0,   515,
       0,     0,   516,     0,     0,     0,   517,   518,   519,   520,
     521,   522,   523,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,   159,   529,   160,   161,
     162,   163,   164,   165,     0,     0,   166,  3880,     0,     0,
     167,     0,     0,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,  1526,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,  1527,   234,     0,   235,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,   665,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,  1528,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   156,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,   159,  1529,   160,   161,   162,   163,
     164,   165,   871,   872,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,   873,     0,   224,     0,   225,     0,   874,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,   875,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
     876,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   877,   257,   258,   259,   878,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   879,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,   880,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,   881,
       0,   297,     0,     0,     0,   882,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,   883,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   884,   402,
     403,   404,   885,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,   886,     0,
     415,   416,   417,   418,   419,     0,   887,   421,     0,   422,
     423,   424,     0,     0,   888,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,   889,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,   890,   891,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   892,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,   893,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,   894,   512,   895,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   977,   161,   162,   163,   164,   165,   978,   872,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,   873,     0,
     224,     0,   225,     0,   874,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
     875,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,   876,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   877,   257,   258,
     259,   878,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   879,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,   880,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,   881,     0,   297,     0,     0,     0,
     882,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
     883,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   884,   402,   403,   404,   979,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,   886,     0,   415,   416,   417,   418,   419,
       0,   887,   421,     0,   422,   423,   424,     0,     0,   888,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,   889,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,   890,   891,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   892,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,   893,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,   894,   512,   895,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,  2592,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,  2593,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
    2594,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
    2595,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,   152,   153,     0,   370,   371,     0,     0,  2596,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,  4420,   595,  4421,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,  2597,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,  1774,     0,     0,  3701,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,  1775,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,  3186,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,  3187,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,  3188,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,  3189,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,  1774,     0,
       0,  4659,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,  1775,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
    3186,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
    3187,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,  3188,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,  3189,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,  1774,     0,     0,  4728,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,  1775,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,  3186,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,  3187,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,  3188,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,  3189,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,  1122,   874,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,  1541,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,  1542,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,  1084,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
    1085,  1086,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,  1087,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,  2081,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,  2082,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
     783,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,  2083,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,  2084,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
    2081,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,  2082,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,   783,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,  2084,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,  1526,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,  1527,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
    2081,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,  2082,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,   783,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,  4254,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,  2084,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,  1122,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,  1564,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,   874,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,  2652,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,  1526,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,  3112,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,  3296,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,  3297,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,   595,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,  1181,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,  1519,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,  1519,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,  2135,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,  2273,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,  3305,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,  3617,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,  3625,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,  3649,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
    4564,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,  2000,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,  2001,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   169,   170,   171,   172,   173,   174,   175,
     176,     0,     0,   923,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
       0,     0,     0,     0,   187,     7,     0,   188,   189,     0,
     190,     0,     0,     0,     0,     0,   194,   195,   196,   924,
     198,   199,     0,   200,   201,     0,     0,     0,     0,     0,
       0,   207,     0,   209,     0,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,     0,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,     0,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,  -338,  -338,   246,     0,
    -338,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   925,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,    26,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,   926,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
     927,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,    32,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,    41,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,   929,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,    60,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,   170,
     171,   172,   173,   174,   175,   176,     0,     0,   923,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,     0,     0,     0,     0,   187,
       7,     0,   188,   189,     0,   190,     0,     0,     0,     0,
       0,   194,   195,   196,   924,   198,   199,     0,   200,   201,
       0,     0,     0,     0,     0,     0,   207,     0,   209,     0,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,     0,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,     0,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   243,   244,   245,
       0,  -358,     0,   246,     0,  -358,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
       0,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   925,   267,   268,   269,     0,     0,     0,     0,
       0,     0,     0,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,     0,   281,     0,   282,     0,     0,
       0,   284,   285,     0,     0,     0,     0,     0,     0,   288,
       0,     0,     0,   289,   290,   291,   292,   293,    26,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,     0,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,   926,     0,     0,   305,     0,     0,     0,
     307,   308,     0,     0,   309,   927,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,    32,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
       0,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   928,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   383,   384,     0,
       0,     0,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,     0,     0,     0,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,     0,     0,   422,     0,   424,    41,     0,   425,
       0,     0,     0,   427,     0,     0,   429,   430,     0,   431,
     929,   432,     0,     0,   433,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   443,   444,     0,   445,     0,     0,
       0,     0,   447,   448,   449,     0,     0,     0,     0,   451,
       0,     0,     0,     0,     0,     0,   454,     0,     0,   457,
     458,     0,   459,     0,   461,     0,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,     0,   471,     0,     0,     0,
     472,     0,     0,     0,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,     0,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,     0,     0,
       0,     0,   510,     0,     0,   511,     0,     0,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,  -358,     0,    60,     0,     0,     0,   524,     0,     0,
     526,     0,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   169,   170,   171,   172,   173,   174,   175,
     176,     0,     0,   923,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
       0,     0,     0,     0,   187,     7,     0,   188,   189,     0,
     190,     0,     0,     0,     0,     0,   194,   195,   196,   924,
     198,   199,     0,   200,   201,     0,     0,     0,     0,     0,
       0,   207,     0,   209,     0,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,     0,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,     0,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,  -355,     0,   246,     0,
    -355,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   925,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,    26,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,   926,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
     927,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,    32,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,    41,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,   929,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,  -355,     0,    60,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,   170,
     171,   172,   173,   174,   175,   176,     0,     0,   923,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,     0,     0,     0,     0,   187,
       7,     0,   188,   189,     0,   190,     0,     0,     0,     0,
       0,   194,   195,   196,   924,   198,   199,     0,   200,   201,
       0,     0,     0,     0,     0,     0,   207,     0,   209,     0,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,     0,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,     0,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,  1439,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
       0,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   925,   267,   268,   269,     0,     0,     0,     0,
       0,     0,     0,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,     0,   281,     0,   282,     0,     0,
       0,   284,   285,     0,     0,     0,     0,     0,     0,   288,
       0,     0,     0,   289,   290,   291,   292,   293,    26,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,     0,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,   926,     0,     0,   305,     0,     0,     0,
     307,   308,     0,     0,   309,   927,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,    32,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
       0,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   928,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   383,   384,     0,
       0,     0,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,     0,     0,     0,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,     0,     0,   422,     0,   424,    41,     0,   425,
       0,     0,     0,   427,     0,     0,   429,   430,     0,   431,
     929,   432,     0,     0,   433,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   443,   444,     0,   445,     0,     0,
       0,     0,   447,   448,   449,     0,     0,     0,     0,   451,
       0,     0,     0,     0,     0,     0,   454,     0,     0,   457,
     458,     0,   459,     0,   461,     0,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,     0,   471,     0,     0,     0,
     472,     0,     0,     0,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,     0,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,     0,     0,
       0,     0,   510,     0,     0,   511,     0,     0,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,    60,     0,     0,     0,   524,     0,     0,
     526,     0,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   169,   170,   171,   172,   173,   174,   175,
     176,     0,     0,   923,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
       0,     0,     0,     0,   187,     7,     0,   188,   189,     0,
     190,     0,     0,     0,     0,     0,   194,   195,   196,   924,
     198,   199,     0,   200,   201,     0,     0,     0,     0,     0,
       0,   207,     0,   209,     0,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,     0,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,     0,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
    -360,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   925,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,    26,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,   926,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
     927,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,    32,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,    41,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,   929,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,    60,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,   170,
     171,   172,   173,   174,   175,   176,     0,     0,   923,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,     0,     0,     0,     0,   187,
       7,     0,   188,   189,     0,   190,     0,     0,     0,     0,
       0,   194,   195,   196,   924,   198,   199,     0,   200,   201,
       0,     0,     0,     0,     0,     0,   207,     0,   209,     0,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,     0,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,     0,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,  3154,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
       0,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   925,   267,   268,   269,     0,     0,     0,     0,
       0,     0,     0,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,     0,   281,     0,   282,     0,     0,
       0,   284,   285,     0,     0,     0,     0,     0,     0,   288,
       0,     0,     0,   289,   290,   291,   292,   293,    26,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,     0,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,   926,     0,     0,   305,     0,     0,     0,
     307,   308,     0,     0,   309,   927,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,    32,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
       0,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   928,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   383,   384,     0,
       0,     0,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,     0,     0,     0,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,     0,     0,   422,     0,   424,    41,     0,   425,
       0,     0,     0,   427,     0,     0,   429,   430,     0,   431,
     929,   432,     0,     0,   433,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   443,   444,     0,   445,     0,     0,
       0,     0,   447,   448,   449,     0,     0,     0,     0,   451,
       0,     0,     0,     0,     0,     0,   454,     0,     0,   457,
     458,     0,   459,     0,   461,     0,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,     0,   471,     0,     0,     0,
     472,     0,     0,     0,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,     0,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,     0,     0,
       0,     0,   510,     0,     0,   511,     0,     0,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,    60,     0,     0,     0,   524,     0,     0,
     526,     0,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   169,   170,   171,   172,   173,   174,   175,
     176,     0,     0,   923,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
       0,     0,     0,     0,   187,     7,     0,   188,   189,     0,
     190,     0,     0,     0,     0,     0,   194,   195,   196,   924,
     198,   199,     0,   200,   201,     0,     0,     0,     0,     0,
       0,   207,     0,   209,     0,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,     0,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,     0,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
    3301,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   925,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,    26,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,   926,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
     927,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,    32,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,    41,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,   929,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,    60,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,   170,
     171,   172,   173,   174,   175,   176,     0,     0,   923,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,     0,     0,     0,     0,   187,
       7,     0,   188,   189,     0,   190,     0,     0,     0,     0,
       0,   194,   195,   196,   924,   198,   199,     0,   200,   201,
       0,     0,     0,     0,     0,     0,   207,     0,   209,     0,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,     0,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,     0,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,  -342,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
       0,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   925,   267,   268,   269,     0,     0,     0,     0,
       0,     0,     0,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,     0,   281,     0,   282,     0,     0,
       0,   284,   285,     0,     0,     0,     0,     0,     0,   288,
       0,     0,     0,   289,   290,   291,   292,   293,    26,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,     0,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,   926,     0,     0,   305,     0,     0,     0,
     307,   308,     0,     0,   309,   927,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,    32,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
       0,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   928,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   383,   384,     0,
       0,     0,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,     0,     0,     0,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,     0,     0,   422,     0,   424,    41,     0,   425,
       0,     0,     0,   427,     0,     0,   429,   430,     0,   431,
     929,   432,     0,     0,   433,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   443,   444,     0,   445,     0,     0,
       0,     0,   447,   448,   449,     0,     0,     0,     0,   451,
       0,     0,     0,     0,     0,     0,   454,     0,     0,   457,
     458,     0,   459,     0,   461,     0,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,     0,   471,     0,     0,     0,
     472,     0,     0,     0,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,     0,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,     0,     0,
       0,     0,   510,     0,     0,   511,     0,     0,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,    60,     0,     0,     0,   524,     0,     0,
     526,     0,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   169,   170,   171,   172,   173,   174,   175,
     176,     0,     0,   923,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
       0,     0,     0,     0,   187,     7,     0,   188,   189,     0,
     190,     0,     0,     0,     0,     0,   194,   195,   196,   924,
     198,   199,     0,   200,   201,     0,     0,     0,     0,     0,
       0,   207,     0,   209,     0,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,     0,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,     0,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
       0,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   925,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,    26,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,   926,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
     927,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,    32,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,    41,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,   929,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,    60,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,   170,
     171,   172,   173,   174,   175,   176,     0,     0,   923,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,     0,     0,     0,     0,   187,
       7,     0,   188,   189,     0,   190,     0,     0,     0,     0,
       0,   194,   195,   196,   924,   198,   199,     0,   200,   201,
       0,     0,     0,     0,     0,     0,   207,     0,   209,     0,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,     0,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,     0,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,     0,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
       0,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   925,   267,   268,   269,     0,     0,     0,     0,
       0,     0,     0,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,     0,   281,     0,   282,     0,     0,
       0,   284,   285,     0,     0,     0,     0,     0,     0,   288,
       0,     0,     0,   289,   290,   291,   292,   293,    26,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,     0,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,   926,     0,     0,   305,     0,     0,     0,
     307,   308,     0,     0,   309,   927,     0,   310,   311,     0,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,    32,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
       0,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   928,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   383,   384,     0,
       0,     0,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,     0,     0,     0,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,     0,     0,   422,     0,   424,    41,     0,   425,
       0,     0,     0,   427,     0,     0,   429,   430,     0,   431,
     929,   432,     0,     0,   433,     0,   435,   436,   437,   438,
     439,   440,   441,     0,   443,   444,     0,   445,     0,     0,
       0,     0,   447,   448,   449,     0,     0,     0,     0,   451,
       0,     0,     0,     0,     0,     0,   454,     0,     0,   457,
     458,     0,   459,     0,   461,     0,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,     0,   471,     0,     0,     0,
     472,     0,     0,     0,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,     0,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,     0,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,     0,     0,
       0,     0,   510,     0,     0,  1466,     0,     0,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,    60,     0,     0,     0,   524,     0,     0,
     526,     0,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,     0,     0,   169,   170,   171,   172,   173,   174,   175,
     176,     0,     0,     0,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
       0,     0,     0,     0,   187,     0,     0,   188,   189,     0,
     190,     0,     0,     0,     0,     0,   194,   195,   196,     0,
     198,   199,     0,   200,   201,     0,     0,     0,     0,     0,
       0,   207,     0,   209,     0,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,     0,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,     0,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
       0,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,     0,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,     0,
     529
};

static const yytype_int16 yycheck[] =
{
       6,     3,   143,   609,   151,   608,   609,   632,  1116,    24,
    1013,  1014,    21,   930,    20,   986,  1256,  1506,    24,  1738,
    1213,  1024,  1379,  1232,    33,     6,  1035,     0,  1285,   582,
      36,    40,  1507,   140,     4,   608,   592,   661,    44,   592,
    1507,    47,  1709,   661,  1427,   962,    52,  1185,  1057,  2264,
    2107,  2108,   641,    59,  2264,   644,  1547,   766,   549,   550,
    1707,  1285,   553,   554,   555,   566,   959,   558,   559,   560,
     547,    45,  2712,  2587,  1120,   718,  1316,  1317,  2784,  2967,
    1320,  1321,  1322,  1323,  2361,  1325,  1326,  1327,  1328,  1329,
    1330,  1331,  1332,  1351,   109,  2729,  2373,  1379,  2003,   600,
    2502,  1120,  1307,   109,  3241,   926,   927,  2741,  2742,  1643,
    1315,  3081,  1620,  3067,   566,  2852,   612,  3572,  1077,   615,
     700,  1222,  3287,   703,  1430,  1450,  2463,  1675,  2262,   135,
    2262,   137,  1576,   139,   140,   141,  2061,  1967,  3108,  2112,
    3534,  2264,  2374,  3110,  1033,  2718,  2750,  1685,   600,   863,
    2692,   146,  1596,  3439,   151,   151,   137,  3551,   139,  3100,
    1604,  1605,  2337,  2337,   151,  3849,  3440,   151,  2752,  1058,
      13,  3902,  2756,  3242,    13,  2627,    17,    18,    18,   822,
     823,   824,    20,  2767,  2636,    17,    18,    20,  3711,  3373,
    3365,   834,    54,  1152,    50,  2779,  1734,    27,    20,    75,
      37,  2896,    21,  2337,    83,  2337,    18,    17,    18,  1106,
    1107,    83,  2101,    17,    18,    17,    18,    33,    39,  1191,
    1192,  1193,    17,    18,  2459,  2859,  2860,   118,    39,    63,
     163,   163,  2327,  4131,  1059,   116,  1208,    13,    17,    18,
     203,   182,    22,    31,  3611,    34,    17,    18,  2893,  2894,
      67,    39,   197,  1150,  2899,   185,  2901,    37,   182,    17,
      18,  2254,    20,  3657,    54,    66,   276,  2741,  2742,  1241,
     370,    51,  1244,    73,    66,   111,    17,    18,   197,    87,
     151,   225,    62,    63,   277,   325,  3210,    22,   163,    70,
      59,   211,   217,  1265,  1266,   294,  3220,  1269,    84,   203,
    3653,   331,   386,    12,   380,   374,    18,   378,    91,   400,
      55,  3936,   378,    46,  1286,  1287,    81,   132,   137,   456,
       9,    66,   279,   163,   367,   163,    73,    62,    63,    89,
      17,    18,   470,   260,   431,   236,  4613,    17,    18,   404,
     375,    17,    18,   465,   277,   277,   150,   134,   163,   240,
     132,   145,   231,  3637,   233,  4339,   436,   448,   200,   200,
      61,   236,   150,   283,   312,   844,   132,    21,   403,    13,
      17,    18,   257,   926,   927,  2244,   867,   930,    17,    18,
      13,   163,  3349,   262,   407,  2859,  2860,   200,   407,  3928,
    3845,   197,    37,   386,    17,    18,   445,   163,    13,   564,
     221,   222,   366,   200,   196,   200,   157,   564,   585,   962,
     221,   222,   242,   596,  2075,  4146,   529,  3054,   197,   630,
    2866,   630,  2745,   555,   171,    22,   558,  1685,     9,   630,
     585,   196,   431,    17,    18,   147,   129,   240,  2633,   369,
      37,   258,  3428,   584,    17,    18,  3432,   658,   136,   658,
     563,    72,    33,   608,    51,   418,   253,   658,    37,   566,
     263,  1354,    72,   136,   571,    62,    63,   555,  4152,  3106,
     558,    20,  3060,   169,   657,   240,  1734,   526,   426,  4018,
     286,   182,   446,   137,    63,   186,   427,   664,   511,   621,
     320,   656,   511,   600,   119,   974,   197,   122,   263,   192,
      69,   190,   146,   427,   293,  1398,   663,   294,  3074,  3075,
    3076,   591,  1221,   146,   418,  1623,   274,   474,   360,  1522,
    1109,   658,  1111,  1112,  1113,  1114,   664,  1236,   221,   564,
     366,   244,   562,   630,   294,   462,   330,  1540,   283,   545,
     253,  4818,   664,    21,   385,  4170,   431,   388,  3915,   649,
     556,  3918,  3919,   454,  3179,   503,  1052,   622,  2056,   589,
     566,   567,    17,    18,   635,   571,   536,   658,   574,   635,
     490,  3924,   679,   246,   658,   385,   366,   286,   388,   454,
     623,   385,   588,   385,   388,   510,   388,   387,   664,   658,
     385,  1171,   536,   388,   600,   558,   195,   366,   291,   461,
    3541,  1494,   608,   596,  3545,   575,   385,  1163,    54,   388,
    1163,  2745,   618,  2745,   385,   589,   656,   388,   628,  2110,
     564,   354,   493,  3511,   416,    17,    18,   385,   329,  1675,
     388,   343,   638,  1347,    17,    18,   635,   236,   439,  4094,
     387,  1534,   612,   426,   385,   615,  3217,   388,   467,   619,
     431,   416,   582,  3287,   558,   661,  1675,   663,  3942,   137,
    3174,  3549,  4121,  4647,   453,    17,    18,   312,   598,   505,
    1379,   461,   480,   679,   689,  1915,  1319,   370,   391,  1937,
    2803,  1570,   606,   689,  1573,   691,  1926,  3611,  1577,  1929,
    1579,  2866,  2866,  1336,   700,   628,   628,   703,   385,  3623,
     706,   388,    75,   493,  2061,   385,  2244,   713,   388,   385,
    3344,   630,   388,   658,  4612,  3639,  3640,   658,  1607,  1608,
    1609,  1198,  1199,   165,  2262,   597,   427,   503,   545,   662,
     662,  4125,  2866,  2968,  2866,    17,    18,  2626,   385,  2183,
     621,   388,   575,   564,   152,   294,   385,   638,  1225,   388,
    2743,   630,   540,   564,  4148,   862,  1233,    27,  1235,   575,
     766,  1720,   385,   575,   620,   388,  2861,  1664,    17,    18,
    1247,  1248,  1249,   561,   630,  1355,  1748,  1602,  1255,  2061,
     656,   615,  2687,  3967,   496,   497,   608,   662,  1406,  2327,
     630,  4522,  4159,  4524,  4525,   583,   658,  1714,   639,  2337,
     242,   385,   588,  4326,   388,   597,   644,   639,  1909,    17,
      18,   644,   385,   656,   594,   388,   657,   656,  3524,   656,
    4106,   827,   662,   829,   662,  4000,    17,    18,   658,   639,
     649,   833,   620,    17,    18,   639,  2344,   639,  4124,  4113,
     629,    17,    18,  2036,   639,   658,    11,   662,   854,   855,
     856,   661,   858,   859,   860,   657,   862,  3926,   864,   594,
     639,  2730,  1834,   658,   870,  1445,  1838,   608,   639,  4263,
    3344,  1495,    17,    18,   855,  1371,   627,  1495,   657,   860,
     662,   639,   431,   864,  3207,  1465,   657,   861,   503,  2550,
    1862,   865,    17,    18,   587,   165,   662,  1349,   639,  3345,
     658,   907,  2549,  3098,  3099,  3875,  1013,   922,  1015,  4640,
    4641,  1018,  1019,  4644,   602,   536,   922,   658,   924,  2638,
    3887,   923,   928,  3864,  3865,   367,   536,  1034,   624,   602,
     385,  2988,  3520,   388,   503,   647,   648,   649,   650,   651,
     652,   653,   654,   568,   657,   960,   571,    17,    18,   197,
    1574,   966,   639,   959,   960,  2453,  1574,   658,  3531,   639,
     966,  3527,   577,   639,   657,  1106,  1107,  1556,  1115,   236,
     657,  1685,   242,  3598,  2879,   564,  2881,   657,   658,  1475,
    4664,   657,   658,   953,  3041,  2519,  2244,    17,    18,   467,
     201,  3915,   639,   385,  3918,  3919,   388,   594,    17,    18,
     639,  1007,   385,  3517,  4735,   388,  3930,  1013,   607,  1015,
     657,   658,  1018,  1019,   200,   461,   639,    49,   657,   658,
    1734,   618,   401,  1524,  4483,  1643,  4485,  3569,  1034,   195,
     240,    17,    18,   385,   657,   658,   388,  3608,   203,   276,
     312,  2838,   130,   257,  2971,    17,    18,   420,  4732,   182,
     320,    17,    18,    17,    18,   639,  1645,  1646,   236,   656,
    3633,  2966,  3277,  3758,   250,   485,   639,  3277,  1657,  2327,
     236,  1077,  1524,  3207,   658,  3207,  1679,   485,   403,  2337,
     160,   869,  1052,  3687,  1054,   658,   635,  4057,   633,  3541,
     170,   485,   706,  3545,    13,   644,  1102,   367,   540,  1101,
    2767,   376,    27,   385,  3688,    27,   388,  1696,  4075,    83,
    1116,  3756,   379,  1108,  4508,  2118,   294,  2010,  1115,  1115,
    3765,   129,   376,  1832,   129,  1140,   354,   153,  1115,  1103,
    1104,  1115,    17,    18,  1140,   656,   385,   485,   190,   388,
     132,    17,    18,  1149,  3376,  3070,  1152,  2622,   376,  2624,
    2625,  2044,  2045,  2701,  3277,  3128,   376,  2624,  2625,  2399,
     376,  1714,  2208,   251,  3091,  1171,  1181,   485,  1149,  2178,
    3345,  3345,   371,   961,   494,  1181,  3006,   385,   650,  4573,
     388,   623,   555,    13,   639,   657,   218,   192,   399,  2208,
    1642,  1298,  2730,    35,   385,  2204,   376,   388,  2696,  3536,
     386,   385,   657,   658,   388,   376,   579,  2745,  2346,   385,
     287,  3345,   388,  3345,   266,  1221,   658,   431,    17,    18,
     376,   136,  4677,   129,    17,    18,   485,   146,  1335,   656,
    1236,    17,    18,    17,    18,  4159,   656,   664,  2736,   564,
     385,  2566,  1349,   388,  2688,   859,   494,   639,   656,   427,
      12,  2557,   660,   418,  3949,  3950,   639,   231,   129,   233,
     385,  3956,   656,   388,  3959,  3960,   658,    17,    18,  2474,
     540,  2480,  2481,  1380,   657,   658,    90,   656,   477,  1285,
    2169,  3976,   283,   291,   108,  1928,   291,   639,   262,   242,
     494,   502,  1298,  2182,   427,  3990,  2185,  2186,   112,  3994,
    3995,  3996,  3997,  3998,   384,   657,  3951,  1309,   656,  3954,
    2269,   388,    17,    18,   366,   385,   146,   242,   388,    67,
     242,   192,  2562,  2861,   644,    17,    18,   564,  2866,  1335,
    2587,   246,    17,    18,  1340,   738,   739,  2835,   656,  3984,
    3985,  3986,  2840,  1349,   664,   433,  1453,  3992,  1354,  1355,
    2848,  2849,  2061,   623,  3999,   385,  2854,   639,   388,   479,
     525,  4650,   370,   485,   390,   370,   385,   368,  1948,   388,
    2878,   133,  2473,  1379,  1380,   657,   658,   369,     6,  3026,
     608,   532,  2483,   658,   277,   291,   253,  4043,   658,  4554,
     639,   628,  1398,    17,    18,   320,   644,   656,   320,   385,
    1406,  1371,   388,  1418,   658,  1411,   273,  1413,   657,   658,
     813,   253,  1418,   385,   367,   580,   388,  1524,   545,   385,
     291,   385,   388,    24,   388,  3222,  4591,  4592,  1434,   556,
    3274,   639,    60,  4888,   276,    17,    18,  2694,   658,  1445,
     644,   607,   658,  3348,   558,   367,   478,  1453,   639,  1419,
     658,  3248,  3249,  1468,   542,   639,   621,    17,    18,  1465,
    3304,  1957,  1468,   639,   370,  4435,  4631,   658,  2048,   288,
    2694,   874,  2730,   606,   658,  1377,    17,    18,   658,   556,
      17,    18,   658,   563,  3018,  3019,  3020,   658,  1494,  1495,
      17,    18,  1498,   386,   639,    17,    18,    13,  2141,   370,
     385,  1507,   658,   388,    61,  1475,  1647,   656,    13,   385,
     258,  1517,   388,   658,   639,    17,    18,   214,  1524,  1525,
     536,   494,  4162,   151,  4164,   658,    17,    18,  1534,   348,
    2244,  3933,  2541,   658,   656,  1642,  4825,  4826,   660,   454,
    1546,  1547,     0,  4280,  4432,  1560,   136,  1562,   244,  3216,
    3217,  1557,  1558,  1559,  1560,  1561,  1562,   253,  1665,  2132,
    4697,  2062,  4516,   260,  4220,  1571,  1572,  4223,  1574,   639,
     485,   163,  1578,   174,   650,  1682,  1557,  1558,  1559,   587,
    1561,   657,   587,   133,  1599,   134,   385,   540,   658,   388,
     494,  1572,   385,  1599,   644,   388,   963,  1578,   440,   385,
     616,   385,   388,  2861,   388,  2498,   413,  1577,  2866,   639,
    2062,   585,  3087,  2327,   362,   564,  4353,  4354,   540,   485,
     639,   494,  2211,  2337,   644,   182,  2215,  2216,   658,   186,
     146,  2225,  2226,   185,   608,   385,  1642,  1643,   388,   658,
     197,   146,  4156,   278,  2200,   214,   281,  2200,  2242,   133,
    1552,  1553,  4358,   639,  1669,  2701,   246,  2251,  2252,  1665,
    1666,  1667,  1668,  1669,  2667,  2858,  3571,   639,   501,  3207,
     623,   644,   658,   639,   223,   639,  1682,    17,    18,   173,
     385,   587,  2701,   388,   644,   564,   658,   602,    83,   386,
    1705,   664,   658,   385,   658,   391,   388,    13,  1704,  1705,
     385,   623,   252,   388,  4344,   585,   291,   656,  4682,    17,
      18,  4685,  2605,  3070,  1720,  1082,   587,   536,  1688,  1122,
      25,  3104,    17,    18,  3224,  3223,   133,  3225,  2322,  2323,
    2324,  2325,    17,    18,  3232,  1741,   364,  1743,  3238,  3239,
     644,   656,  2880,    17,    18,   294,   612,   613,  3246,   656,
    3250,    17,    18,   277,   639,  3253,  3254,   664,  2651,    75,
     664,   385,  4510,   639,   388,  4042,   431,   600,  3266,  3267,
    3268,   644,   329,   658,  3272,  3273,  3620,   656,  2695,  2984,
     528,   664,   658,    46,   664,   370,   615,   452,  3070,   618,
     656,   664,  1933,   428,    17,    18,   197,   545,  3055,   200,
      17,    18,   430,   385,   432,    83,   388,  3345,    18,   642,
    3654,   363,   364,  2816,  3312,  3313,  3314,   369,   627,    17,
      18,  3665,  4336,   488,  3668,   385,  1832,  1833,   388,   105,
     214,  3055,  4806,   147,  2477,  1987,   231,  1989,   233,  3486,
     639,   231,  1949,   233,   385,   252,   639,   388,   385,    17,
      18,   388,    20,   639,  3047,   639,    17,    18,   385,   658,
     454,   388,   386,   385,   454,   658,   388,   262,    17,    18,
     427,  4619,   658,   485,   658,    17,    18,    17,    18,    17,
      18,   493,   218,   385,   234,   286,   388,  1893,   636,   639,
    2031,    18,   155,  2370,   385,   485,   555,   388,  2375,   558,
     555,  2519,   608,   558,  2522,   147,   203,  2824,   658,    17,
      18,   234,  2389,    17,    18,  2067,  2068,  2069,    17,    18,
    4554,  1936,   214,    17,    18,    17,    18,   263,    44,  1935,
    1936,   218,    17,    18,   639,  3433,    52,    17,    18,    17,
      18,  3608,  1948,  1949,    17,    18,  2423,   639,    17,    18,
     605,   657,   658,   658,   639,  2062,  1962,  4591,  4592,   143,
     141,  1967,   621,   380,   242,   657,  1972,   243,   250,  1975,
    2077,  1986,  1987,   658,  1989,   159,   263,  4617,  4618,    50,
    1986,  1987,  2606,  1989,   260,   200,  2542,  1957,  2606,  2542,
     631,   632,    17,    18,  2495,  3252,   272,  4631,  2013,   613,
     612,   613,  2017,  2559,  2010,  2558,  2559,  2013,  2115,   363,
     364,  2017,   602,  2490,  4130,   639,  2730,   658,    17,    18,
     147,  3688,   198,  4139,    17,    18,    17,    18,  3252,   343,
     582,  2046,  2047,   493,   658,    17,    18,   504,  2044,  2045,
    2046,  2047,  2048,  2495,   656,   385,   598,   504,   388,    17,
      18,   294,  2067,  2068,  2069,  2061,  2062,   639,    17,    18,
     657,  2067,  2068,  2069,    17,    18,   656,   485,   608,  2672,
     491,  2077,  2042,  3564,   662,   657,   567,   385,   354,   639,
     388,  1134,  1135,   361,   234,  2100,  2092,  3345,   240,   367,
     385,   657,   658,   388,  2100,   608,  3067,   657,   639,  2672,
     385,   343,   639,   388,  2110,   240,  3023,   283,   240,  2115,
     558,   385,   639,   664,   388,   603,   657,   639,   658,   385,
     657,   418,   388,   558,   664,   525,  2132,  1180,   173,    81,
     657,  3140,    17,    18,  1069,   657,  3636,   639,    17,    18,
    1075,  1076,  2695,  3352,   656,   658,  2152,  2861,   639,   157,
    3153,   664,  2866,   575,  3537,   657,  3049,  2751,     6,   437,
    2754,  2755,   385,  2757,   656,   388,  2760,  2761,   385,  2184,
    2764,   388,  3381,  3382,   656,  2769,   656,  2147,  2184,  2149,
    2774,  2775,  2776,  2777,  2778,    62,    63,   385,  2782,  2783,
     388,  2785,   368,   469,  2168,  3404,    73,  2791,  2792,  2793,
    2794,   656,   161,  2797,  2798,   656,  2800,  2213,  2214,   200,
     656,  2217,  3033,  3034,  3035,  3036,   343,   385,    17,    18,
     388,   658,    17,    18,   385,   656,  3758,   388,   525,  3422,
      17,    18,   656,  2214,    17,    18,   385,   656,    22,   388,
     656,    17,    18,   385,   196,   385,   388,   385,   388,   664,
     388,   656,  2267,    37,  2361,   626,   627,  3146,   629,  2229,
     631,  2267,   540,  2269,  3521,   541,  2373,    51,  2238,  2239,
    2864,  2824,    86,  2829,    88,   656,  2829,   385,    62,    63,
     388,   385,   656,   580,   388,   564,   385,   656,   240,   388,
      83,   385,   656,   385,   388,   656,   388,   656,   779,   639,
     385,    17,    18,   388,    97,   385,   178,   385,   388,   656,
     388,   263,   385,  3570,   592,   388,   385,   657,   132,   388,
     801,   656,    17,    18,   621,   656,    17,    18,   656,    20,
     656,   639,  2338,   814,   815,  2341,   656,   651,   652,   653,
     654,   155,   657,   658,   639,   623,  3570,    17,    18,   657,
     129,   657,   658,   656,   639,  2361,   657,   658,   656,  2466,
     385,  3070,   657,   388,   608,   639,   473,  2373,  1399,   496,
     497,  1402,   657,   639,  1405,    17,    18,   191,    20,   555,
     115,   656,   558,   657,   129,   661,   385,   147,  2495,   388,
    2497,   657,   385,  3310,   385,   388,  4453,   388,   657,   658,
    3018,  3019,  3020,   385,   243,    13,   388,   649,   650,   651,
     652,   653,   654,   192,  4629,   656,   639,   385,  4628,   656,
     388,   260,   639,   656,  3956,   656,   385,  3959,  3960,   388,
     656,   212,   385,   272,   657,   388,   656,  3630,   173,   178,
     657,   639,   221,   656,  3976,   657,   658,   192,   400,   556,
    3074,  3075,  3076,   656,   561,   656,  3074,  3075,  3076,   657,
    2466,   656,  3994,   656,   416,   136,   657,   658,   203,   656,
    3023,   639,   265,    17,    18,  3078,   221,   656,   639,   656,
    3033,  3034,  3035,  3036,   200,  2491,   231,   656,   233,  2495,
     639,  2497,  2498,   657,   658,    27,   657,   639,   605,   639,
     385,   639,  2979,   388,   540,   200,   385,  2614,   657,   388,
     656,  3514,   291,  2519,   621,   657,  2522,   657,   417,   657,
     647,   648,   649,   650,   651,   652,   653,   654,  4026,   473,
    4028,   639,  4030,  3157,   656,   639,   317,   318,   146,  3157,
     639,   322,   323,   324,  3553,   639,   291,   639,   341,   657,
     656,    83,   383,   657,   639,  2561,  4031,  3566,   657,   639,
     656,   639,   575,   657,  4031,   657,   639,    27,   657,   658,
     639,   376,   657,   366,   656,   246,  4074,   657,    34,   657,
     394,  2587,   656,   343,   657,  2591,   385,  3844,   657,   388,
     385,   370,  4736,   388,   657,   658,   657,   658,   385,  2605,
    2606,   388,   385,  3741,   656,   388,   657,   658,  2614,   385,
    2717,  2718,   388,   656,   639,   223,  2622,   656,  2624,  2625,
    3844,   656,  3211,    83,   438,   370,  3215,  3230,   656,    85,
     469,  3345,   657,   165,   656,    83,   429,  3231,   656,  2645,
     639,  2647,  4309,  4310,  4788,  2651,   639,  4791,   639,   656,
    3244,   183,   657,   658,   657,   658,   656,   639,   657,   657,
     658,   657,   658,    63,   657,    37,  2672,   656,  3776,   385,
     656,   639,   388,   657,   658,  2645,  2649,   657,   658,  4823,
     639,  3938,    83,   418,    62,    63,   639,   656,  2694,   657,
     385,    63,   656,   388,   385,   656,    97,   388,  2704,  2714,
    2715,   656,   541,  2709,   657,   161,   657,   658,  2714,  2715,
     242,  2717,  2718,   656,  3938,   385,   656,   165,   388,   119,
     656,  4778,   122,   183,   157,   158,   657,   658,  2709,   656,
     130,    35,   525,  4452,    20,   656,   496,   497,   656,   140,
     657,   658,    28,   385,   656,  3236,   388,   119,   148,   656,
     122,   656,    20,   656,   639,   657,   658,  3310,   130,   656,
     639,    28,  2732,  2733,  2734,  2735,   656,  2737,  2738,   657,
     658,   376,   657,   657,   658,   656,   148,   555,   657,  4277,
    4278,  4279,   242,   454,   567,    13,   656,    73,   320,   656,
    2796,   657,   658,   193,   242,   657,   658,    83,  4007,  3966,
    3967,   657,   658,  3970,   658,  2811,    73,   161,   587,   236,
     594,   511,  4169,    52,   485,    13,    83,  2823,   662,   657,
     658,  2827,  3989,   558,   657,   658,   288,  4316,  3995,   361,
     614,   615,  4889,   657,   658,   367,   665,   105,   657,   658,
     639,   657,   587,   147,   639,   580,   132,    45,    52,  2990,
     658,   251,   639,    39,   657,   658,   639,   383,   657,   376,
     320,   200,   657,   639,   265,   132,  2836,  2837,   376,  2839,
     657,  2841,  2842,  2843,  2844,  2845,  2846,  2847,   657,   251,
    2850,   657,   479,  2853,   596,  4052,   621,  2857,   648,   649,
     650,   651,   652,   653,   654,   163,    50,   567,   657,   658,
      98,   361,    12,  3527,   277,   103,  3013,   367,   200,  3527,
     651,   519,   520,   361,   522,  3392,   524,   493,   146,   367,
     206,   298,   299,   639,   657,   658,   664,   195,   115,   197,
     504,   602,   172,   541,   656,   147,   122,   314,   657,   658,
     341,  3035,  3036,   129,   639,   231,   214,   233,   639,   253,
     197,   219,   536,   353,   129,   555,   356,   413,   657,   658,
    3563,   511,   363,   364,   231,   366,   233,   536,   236,   639,
    3447,   288,   276,  3080,   164,   243,   197,   263,    92,   435,
     657,   658,   250,   658,   356,   656,   658,  1273,  1274,   437,
    3563,   377,   260,   657,   658,   223,   263,   639,   551,   185,
    3006,   657,  3008,   163,   272,   115,   192,  3013,   540,   277,
    3025,  3017,  3018,  3019,  3020,   471,   132,   192,   286,  3025,
     118,  3610,   663,   133,  3613,  3614,  3032,     6,   429,  4386,
     657,   658,  4199,   433,   147,   221,   222,   224,   382,   343,
     117,  4208,  3048,  3049,   657,   658,   221,  4287,     4,  3055,
    4217,   657,   658,   657,   658,  4222,   484,   255,   253,   363,
     364,   621,   129,   173,  3070,   132,   443,   444,  3074,  3075,
    3076,   657,   658,   658,  3080,   531,   400,   363,   364,   161,
     540,  3087,    59,   369,  4192,  4574,   354,   657,   658,   446,
     376,   623,   540,   203,   657,   658,   363,   364,   664,  4207,
     657,   658,   369,   658,   127,   291,  3112,    73,   376,   376,
     657,   658,   105,    13,   657,   658,   291,   296,   386,   298,
     299,   657,   658,   627,   525,   192,   658,  4625,   657,   501,
     416,   343,   330,   657,  3241,   314,   440,   657,   658,   146,
     253,    10,  3112,   658,   592,  4338,   657,   658,   664,   416,
     418,  3157,    58,   656,   221,  3170,  3162,   657,  3173,   657,
     658,   657,    68,   623,  3170,   657,   658,  3173,  3174,   355,
     657,   571,   657,   658,   664,   623,    82,   287,  4095,   365,
     276,  3162,    66,   369,   370,  3479,  3480,   664,    94,    95,
      96,   376,   496,   497,  4451,   370,   394,    81,   165,   571,
     600,   469,   663,   489,  3210,   392,   229,   113,   512,    93,
     658,    52,  3221,  3219,  3220,   288,   403,   288,  3227,   288,
    3226,   658,   489,   410,   291,   493,   288,  4451,   600,   288,
     343,  3819,  3820,   288,   658,  3241,  3242,   644,   656,   555,
     234,  3247,  3251,   129,   129,   230,  3252,  3262,  3257,   283,
     243,   147,   658,   200,  3263,  3264,  3262,   293,  3228,  3229,
    4269,  4454,    66,   167,   443,   444,   129,   260,  3274,  3825,
     662,   401,  3825,   541,   658,  3281,  3282,    81,   575,   272,
     575,  3287,   658,   665,   496,   497,  3256,   575,   400,    93,
     658,   519,   520,   521,   522,   523,   524,   644,  3304,   197,
     204,   147,   658,   370,   602,   628,   192,   192,   418,   253,
     333,   597,   196,   541,   337,   513,   658,  3287,   202,   664,
     658,   344,   509,  3912,   129,    73,   658,   132,   596,   192,
     597,   536,   253,  4250,   254,   221,   221,  3343,   651,   607,
     608,  3347,   517,   647,   648,   649,   650,   651,   652,   653,
     654,   553,   256,   187,   552,   197,   240,   253,   221,   658,
     628,   354,   630,   172,   268,  4473,  4474,   536,  4476,    20,
     508,  4538,   405,  4540,   203,   178,   644,   173,   564,   263,
     142,   491,   568,   496,   497,   571,   656,   192,   404,   657,
     658,   657,   196,   661,   662,   658,   582,  4400,   202,   658,
    4593,   587,   425,    56,   590,   291,   291,   627,   607,   603,
     658,   200,   587,   657,   657,   525,   221,   129,   605,  4676,
     132,   657,   657,   657,  3531,   651,   332,   657,   291,   200,
     657,  4539,   657,   650,   658,  3441,   240,   649,   650,   651,
     652,   653,   654,  3449,   350,   656,   556,   343,   657,   657,
     657,   657,  4676,   357,   105,   658,   657,  4193,  4194,   263,
     483,  4654,   658,   649,   650,   657,   657,   656,  4024,   657,
    4206,  4024,   596,   494,   656,   656,   469,  4213,   654,  3449,
     192,   658,   656,   564,   370,   370,   291,   657,  4224,  4225,
     658,   658,   564,  4601,  3500,  4603,  4604,   343,   129,  4416,
     564,   132,   232,   232,  4507,  4422,   241,   370,   250,   221,
     575,   621,   163,   658,   656,  3521,  3522,   547,    12,  3525,
     587,  3527,   656,    13,  4764,  3531,  3633,   212,   129,   200,
     658,   132,   416,   564,   647,   648,   649,   650,   651,   652,
     653,   654,  4095,   176,   474,  4516,   197,   658,   541,    58,
    3556,   115,   214,   495,   197,   664,   197,  3563,  3564,    68,
     274,   192,   656,   214,  3570,   370,   190,   656,   219,  3575,
     658,   658,   664,    82,  3589,   481,  4579,   105,   664,   291,
     204,   664,   200,  3589,   658,    94,    95,    96,   426,   657,
     221,   192,   243,  4833,   493,  3604,   400,   601,  3568,   250,
     496,   497,   625,   197,   113,  3611,   658,   658,  4865,   260,
     105,   376,   416,  3615,  3620,   376,   352,  3623,   641,  4876,
     221,   272,   525,  4880,   525,   484,   277,  3633,  4885,   376,
     514,  3637,   525,  3639,  3640,   286,   525,   543,   202,   197,
     131,  4865,   266,   525,   268,   656,   644,  3653,  3654,   567,
     496,   497,  4876,   644,   560,   644,  4880,    14,   370,  3665,
     291,  4885,  3668,   644,  3634,   603,   644,   287,  4329,   644,
     644,   644,  4333,  3643,   644,   644,   240,   608,   658,   644,
    3695,   644,    28,   644,    30,  4291,  3692,   644,   664,  3695,
     291,   644,   644,   644,  3700,   644,   644,  4250,   644,  3705,
     161,   587,   587,   354,   644,   644,  3712,   644,   249,   249,
     514,   485,   657,   597,  3720,   243,    62,    63,   644,    65,
       7,  3727,   657,   664,   587,   376,   658,    73,   657,   657,
     657,  3712,   260,   657,   657,   386,   360,    83,   657,   370,
     644,   645,   646,   657,   272,    91,   658,   104,   243,  4857,
     575,   647,   648,   649,   650,   651,   652,   653,   654,   664,
     575,   575,   664,   658,   635,   260,   283,   418,    89,   370,
      50,   644,   118,   656,   575,   656,   656,   272,   656,   136,
      83,   383,   587,   644,   200,   200,   132,  4412,    91,   135,
     200,   415,  3899,   597,   151,   176,   658,   260,   658,  4716,
     260,   647,   648,   649,   650,   651,   652,   653,   654,   389,
      50,   219,   564,   340,   564,   118,   173,   257,   469,   165,
     177,   431,   658,   332,   370,     7,   354,   334,  3834,   656,
     196,   376,   189,  3839,   118,   118,    81,   400,  3844,   400,
     115,   350,   493,  4504,   400,   142,  3816,   575,   376,   261,
    4511,   556,   261,   400,   556,   212,   142,   400,    50,   354,
      37,   400,   165,  4416,  4470,   402,   400,  4461,  4462,  4422,
     400,  4465,  4466,  4467,  4468,   587,   400,   449,   662,   656,
    4883,   376,   214,   240,   656,   231,   656,   233,   656,   246,
     541,   664,   651,  3899,   240,  3901,  3902,   251,   173,   656,
    3906,   247,   656,   251,   657,   656,   470,  4501,   657,  3915,
     431,   657,  3918,  3919,   657,   383,   262,   658,  3924,   658,
    3926,  4838,   656,  3893,  3930,   657,   664,   491,   203,   286,
     657,   657,  3938,   657,   651,  4042,  3942,   240,  3944,   376,
     236,   469,   657,   278,   400,   596,  4863,   658,   349,   453,
     514,   658,   200,   657,   463,   664,   587,   608,   260,  4100,
     260,   386,   139,   657,   657,   240,   431,   644,   658,   658,
     629,   118,   481,   319,   469,   656,   465,   628,   400,   630,
     234,   263,   263,   656,   664,   575,   587,   216,   165,   658,
     662,   168,   338,   644,   558,  4589,  4590,   561,   658,   657,
     656,    50,   657,   487,  4598,   657,   657,   658,  4014,   630,
     661,   662,   287,   541,   274,   657,   319,   467,   181,   286,
     644,   645,   646,   212,   154,  4031,   564,   270,   205,   658,
     657,   657,   485,   597,   543,   338,  4042,   260,   260,   658,
     511,   605,  4012,   376,   656,   634,   541,   393,   225,   395,
     656,   560,   657,   657,   231,   658,   233,   403,   361,   656,
     263,   263,   419,   658,   630,   658,   657,    20,   656,   414,
     376,   376,    83,   239,   197,  4678,   197,  4738,  4739,   197,
     657,   567,   439,   277,   657,   370,   657,   657,   657,    63,
     447,   251,   657,   340,   265,   657,   426,   657,   455,   658,
     657,    18,  4249,   657,   383,   630,   250,   656,   658,   657,
      75,   288,   664,   657,   656,  4121,   608,   418,   480,    20,
    4126,   608,   658,   656,  4130,   657,   608,   178,   485,   475,
     132,   132,   558,  4139,   656,   312,   412,   656,   413,    87,
    4146,   498,   499,   418,   656,   503,   664,   150,   132,    37,
     370,   180,   658,  4159,   340,   657,   143,   564,   564,   564,
     263,  4176,    28,  4716,    30,   558,   612,   279,   656,  4178,
    4176,   250,   608,   608,   657,   376,   382,   658,  4184,   656,
     316,    17,    18,   657,  4325,   618,   618,   533,   534,   535,
     527,   176,   464,   550,   540,   470,    62,    63,   657,    65,
     474,   658,   657,    64,   383,  4811,   602,    73,   546,    50,
     556,    50,  4214,   559,   160,    50,   491,    83,   656,   465,
    4226,   370,  4228,   580,   250,    91,    39,   656,   656,   656,
     376,    15,   578,   656,   602,  4241,   656,   540,   132,  4241,
     417,   263,    20,   263,   369,   602,   644,   604,   630,   426,
     596,   176,   118,   556,   199,   566,   142,   530,   142,   656,
     165,    50,    50,    50,   441,   197,   132,   656,   397,   135,
     657,  4286,   657,   656,   365,   370,   656,  4384,   656,   656,
    4286,   556,   459,  4289,   656,  4838,   561,   123,   124,   125,
     126,   127,   547,   613,   657,    13,   656,   162,   657,   165,
     286,   656,   658,   547,   657,   580,    12,   656,    26,   122,
    4863,    66,   658,   383,    66,   656,   129,    50,    50,    37,
      38,   657,   656,   140,  4330,   656,   503,   582,   197,   506,
     605,   658,   150,     5,   376,   376,   383,   592,   657,   657,
     383,   439,   136,   602,    62,    63,   621,   474,   658,   657,
     232,   156,   263,   657,   609,    50,    74,   476,   236,   536,
     370,   656,   493,  2504,   658,   231,  2649,   233,   623,  2855,
    4030,  4026,   185,  4498,   240,  4028,  1054,  3203,  4384,   192,
    4144,   247,   100,   934,   102,  1107,   104,  4496,  4615,  4785,
     226,   227,   228,   229,  4396,  4781,   262,  4323,   116,  4568,
    1131,  4020,    52,   610,  1972,  2060,  3006,  3826,   221,   222,
     276,  2289,  4418,  4419,  3033,  4385,  2560,   695,  1691,   137,
     138,  2558,  4514,  2559,  1179,  1937,  4335,  2810,  2264,  3663,
    3043,  3838,  3048,  3500,  4584,  1450,  4287,  4680,  4833,   694,
    3841,  4772,  4811,  4470,  2208,  4451,   164,   165,  4153,  3281,
    2803,   169,  3906,   319,   172,  2811,  3284,  4846,  4658,  3699,
    3373,  3967,  4000,   718,  4371,  4396,  4678,  4384,   723,  2717,
    4611,  4039,   338,  3429,  3432,  2954,  3424,  4483,   291,  4485,
    4787,    84,    84,   201,  4738,   203,  4739,  4594,  4160,  4620,
    4511,  4504,  4207,   211,  3277,   213,  1081,   333,  2810,   335,
     336,   337,  4330,  2691,  1144,  4182,   761,  2269,   344,  1616,
    4672,  2581,  3925,   231,  3025,   233,  4522,  4658,  4524,  4525,
    2549,   239,   240,   778,  2046,  4531,  3487,   393,  2460,   395,
    4500,  1731,  1705,  2610,  4411,  1004,  4656,   403,  3449,   991,
    2990,  2106,   355,   261,  2369,  1098,  2637,  2365,  4554,   385,
    1236,  3539,   388,  2632,  4488,  4312,   369,   370,  2972,  4776,
    3727,  4777,  4568,  1208,  3803,   283,  4568,   822,   823,   824,
     825,  2484,  3434,  3938,  4128,  1636,  1636,  3087,  4584,   834,
    3273,  4439,  4780,  3080,  4554,  4127,  4127,  2338,  4594,   425,
    4697,    84,  1418,  1468,   312,  2543,  2586,  3844,  3516,  4614,
    3570,  3515,  4676,   621,  1741,   714,  2179,  1565,  4614,   475,
     609,   609,  1115,  2180,   869,   109,  3944,  4587,  4588,  2685,
    1960,  1476,  3490,  4831,  4849,  4631,  4297,  4480,  4880,  4885,
     811,  4386,  3521,  2670,  4640,  4641,  3563,   608,  4644,  4780,
    1517,  1890,   608,  4784,  2135,  2662,   482,   483,  2663,  1496,
    2017,   600,  1642,   978,  2522,   910,  2605,  4275,  4282,  3008,
    3289,  4631,   380,  4770,  1408,   601,  4672,   533,   534,   535,
    4676,   926,   927,   985,   540,   930,   645,   645,   645,    -1,
    1644,    -1,    -1,  1107,    -1,    -1,  1107,    -1,   406,  1107,
     556,  4697,    -1,   559,    -1,   950,    -1,    -1,    -1,   417,
     418,    -1,    -1,   421,   422,    -1,    -1,   962,    -1,    -1,
      -1,    -1,   578,    -1,    -1,    -1,    -1,    -1,  4688,  4689,
      -1,    -1,    -1,    -1,   442,    -1,    -1,    -1,    -1,  4735,
     596,    -1,    -1,    -1,    -1,   149,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4886,   123,   124,   125,   126,
     127,   564,    -1,    -1,    -1,   568,    -1,    -1,   571,    -1,
      -1,    -1,    -1,    -1,  4770,  4872,    -1,    -1,    -1,   582,
    4776,  4777,   490,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    -1,   625,
     656,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   639,   640,   641,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,   235,   540,   237,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   649,   650,    -1,    -1,
     558,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,    -1,    -1,    -1,    -1,  4865,
      -1,    -1,    -1,    -1,    -1,    -1,  4872,    -1,    -1,    -1,
    4876,    -1,    -1,  4843,  4880,    -1,    -1,    -1,    -1,  4885,
      -1,   295,    -1,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   616,   313,
     314,   315,    -1,    -1,  1159,    -1,   624,  1162,  1163,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1187,  1188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,
    1205,  1206,  1207,    -1,    -1,    -1,   333,    -1,   335,   336,
     337,  1216,  1217,    -1,  1219,  1220,    -1,   344,    -1,  1224,
    1225,    -1,    -1,  1228,  1229,  1230,  1231,    -1,  1233,  1234,
    1235,    -1,    -1,    -1,    -1,    -1,    -1,  1242,  1243,    -1,
    1245,  1246,  1247,  1248,  1249,    -1,    -1,  1252,  1253,  1254,
    1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,    -1,  1264,
      -1,    -1,  1267,  1268,    -1,    -1,    -1,  1272,    -1,    -1,
      -1,  1276,  1277,  1278,    -1,    -1,    -1,    -1,    -1,   443,
     444,    -1,    -1,  1288,  1289,  1290,    -1,    -1,    -1,    -1,
      -1,    -1,  1297,    -1,    -1,    -1,    -1,    -1,   425,  1304,
    1305,  1306,  1307,    -1,    -1,    -1,    37,    -1,    -1,    -1,
    1315,  1316,  1317,    -1,  1319,  1320,  1321,  1322,  1323,    -1,
    1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,    -1,    -1,
      -1,  1336,  1337,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    12,    -1,    14,    -1,    16,    -1,    -1,    -1,
      62,    63,    -1,    65,    -1,    -1,    -1,    -1,    28,    -1,
      30,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,   139,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1422,   623,    -1,
      60,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    -1,  1438,   165,    -1,   118,   168,    -1,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    91,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,   694,
      -1,    -1,   132,    -1,   225,   135,    -1,    -1,   625,    -1,
     231,    -1,   233,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,   151,  1517,   640,   641,    -1,    -1,    -1,   723,   159,
      -1,    -1,    -1,   163,    -1,   165,    -1,  1532,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1549,    -1,    -1,    -1,    -1,   231,
      -1,   233,    -1,    -1,    -1,   195,   761,   288,   240,    -1,
      -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   778,    -1,    -1,    -1,    -1,    -1,    -1,
     262,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,
     240,  1606,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     825,    -1,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,
      -1,    -1,    -1,    -1,    -1,    -1,   417,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   426,    -1,    -1,   338,    -1,
      -1,    -1,   342,    -1,    -1,   910,    -1,    -1,    -1,  1714,
     441,   393,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,   459,    28,
      -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    -1,   950,   386,    -1,    -1,  1754,
      -1,    -1,    -1,   393,    -1,   395,    -1,    -1,    -1,    -1,
     400,    -1,    -1,   403,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    91,   475,   434,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,   448,   449,
     450,   451,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   555,    -1,    -1,   558,    -1,    -1,
      -1,    -1,    -1,   132,    -1,   475,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   533,   534,   535,    -1,    -1,    -1,    -1,   540,    -1,
      -1,    -1,    -1,  1868,  1869,  1870,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   556,    -1,    -1,   559,  1883,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   533,   534,   535,   578,    -1,    -1,    -1,
     540,    -1,    -1,    -1,  1909,    -1,    -1,    -1,    -1,    -1,
    1915,    -1,    -1,  1918,   596,  1920,   556,    -1,    -1,   559,
      -1,  1926,    -1,  1928,  1929,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   231,    -1,   233,    -1,    -1,    -1,   578,    -1,
      -1,   240,    -1,   583,    -1,    -1,    -1,    -1,   247,    -1,
      -1,    -1,    -1,    -1,  1159,  1960,   596,  1162,    -1,    -1,
      -1,    -1,    -1,   262,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1187,  1188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1196,  1197,    -1,    -1,  1200,  1201,  1202,  1203,  1204,
    1205,  1206,  1207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1216,  1217,    -1,  1219,  1220,    -1,    -1,    -1,  1224,
     319,    -1,   662,  1228,  1229,  1230,  1231,    -1,    -1,  1234,
      -1,    -1,    -1,    -1,    -1,    -1,  2041,  1242,  1243,   338,
    1245,  1246,    -1,    -1,    -1,  2050,    -1,  1252,  1253,  1254,
      -1,    -1,  1257,  1258,  1259,  1260,  1261,  1262,    -1,  1264,
      -1,    -1,  1267,  1268,    -1,    -1,    -1,  1272,    -1,    -1,
      -1,  1276,  1277,  1278,  2079,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1288,  1289,  1290,    -1,    14,    -1,    16,
      -1,    -1,  1297,    -1,   393,    -1,   395,    -1,    -1,  1304,
    1305,  1306,    -1,    -1,   403,    -1,    -1,  2112,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,  2133,    -1,
      -1,    -1,  1337,    60,    -1,    -1,  2141,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,  2150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   475,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2200,    -1,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
     137,   138,    -1,    -1,    -1,    -1,    -1,  1422,    -1,    -1,
      -1,    -1,    -1,   150,   151,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1438,   533,   534,   535,    -1,    -1,    -1,
      -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,   556,    -1,  2264,
     559,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,
    2285,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
      -1,    -1,    -1,   220,    -1,    -1,    -1,   596,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1517,    -1,    -1,    -1,    -1,    -1,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,    -1,  1532,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,    -1,    -1,
      -1,    -1,  2347,    -1,  1549,    -1,  2351,    -1,    -1,    -1,
      -1,  2356,  2357,    -1,    -1,   282,    -1,    -1,    -1,   286,
    2365,    -1,  2367,    -1,  2369,  2370,  2371,  2372,    -1,    -1,
    2375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2385,  2386,    -1,  2388,  2389,    -1,  2391,  2392,  2393,  2394,
      -1,  2396,    -1,    -1,  2399,    -1,    -1,    -1,    -1,    -1,
      -1,  1606,    -1,  2408,    -1,    -1,    -1,    -1,    -1,    -1,
    2415,    -1,  2417,    -1,  2419,  2420,    -1,  2422,  2423,    -1,
      -1,    -1,  2427,  2428,  2429,    -1,    -1,    -1,  2433,  2434,
    2435,    -1,  2437,    -1,  2439,    -1,  2441,    -1,  2443,    -1,
    2445,    -1,    -1,    -1,    -1,  2450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2467,    -1,    -1,    -1,    -1,    -1,    -1,  2474,
      -1,   398,  2477,   400,    -1,    -1,    -1,    -1,  2483,    -1,
      -1,  2486,    -1,    -1,    -1,  2490,   413,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   424,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   446,
      -1,    -1,   449,    -1,   451,    -1,    -1,   454,    -1,    -1,
     457,   458,    -1,    -1,    -1,    -1,    -1,  2542,    -1,    -1,
      -1,   468,    -1,    -1,   471,    -1,    -1,    -1,    -1,  1754,
      -1,    -1,   479,  2558,  2559,  2560,    -1,  2562,   485,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,
      -1,   498,   499,   500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   531,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   539,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2640,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   583,    -1,    -1,    -1,
      -1,    -1,    -1,  1868,  1869,  1870,    -1,    -1,   595,    -1,
      -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,    -1,
     607,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1909,    -1,    -1,    -1,    -1,    -1,
     637,  2716,    -1,  1918,    -1,  1920,   643,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2729,    -1,    -1,    -1,    -1,   656,
      -1,    -1,    -1,    -1,    -1,    -1,  2741,  2742,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2803,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2824,
      -1,    -1,    -1,    -1,  2829,  2830,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2041,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2050,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2859,  2860,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2079,    14,    -1,    16,    -1,  2884,
      -1,    -1,    -1,  2888,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2112,    -1,    -1,
    2915,  2916,    -1,    52,    53,    -1,    -1,    56,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    65,    66,  2133,    -1,
      -1,  2936,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2945,    -1,  2947,    -1,  2949,  2150,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2979,    -1,    -1,    -1,    -1,  2984,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   151,    -1,    -1,    -1,    -1,    -1,  3023,    -1,
      -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,  3033,  3034,
    3035,  3036,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   210,    -1,   212,    -1,    -1,  3081,   216,    -1,    -1,
    2285,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3108,    -1,    -1,    -1,   246,    -1,   248,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3128,    -1,   264,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2347,   282,    -1,    -1,  2351,   286,    -1,    -1,
      -1,  2356,  2357,    -1,   293,    -1,    -1,    -1,    -1,    -1,
    2365,    -1,  2367,    -1,  2369,    -1,  2371,  2372,    -1,    -1,
      -1,    -1,    -1,    -1,  3179,    -1,    -1,    -1,    -1,    -1,
    2385,  2386,    -1,  2388,    -1,    -1,  2391,  2392,  2393,  2394,
      -1,  2396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2408,    -1,    -1,    -1,    -1,    -1,    -1,
    2415,    -1,  2417,    -1,  2419,  2420,    -1,  2422,    -1,    -1,
      -1,    -1,  2427,  2428,  2429,    -1,    -1,    -1,  2433,  2434,
    2435,    -1,  2437,    -1,  2439,    -1,  2441,    -1,  2443,    -1,
    2445,    -1,   381,    -1,    -1,  2450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
      -1,   400,  2467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3277,    -1,   413,    -1,    -1,    -1,  2483,    -1,
      -1,  2486,    -1,    -1,    -1,   424,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3310,    -1,   446,    -1,    -1,
     449,    -1,   451,    -1,   453,   454,    -1,    -1,   457,   458,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   468,
      -1,    -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,  3344,
     479,    -1,    -1,    -1,    -1,    -1,   485,    -1,    -1,    -1,
    3355,    -1,    -1,    -1,   493,  2560,    -1,    -1,    -1,   498,
     499,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3385,    -1,    -1,    -1,  3389,  3390,    -1,  3392,    -1,    -1,
      -1,    -1,   531,    -1,    -1,    -1,  3401,    -1,    -1,    -1,
     539,  3406,    -1,    -1,  3409,    -1,  3411,  3412,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2640,    -1,    -1,    -1,    -1,
      -1,    -1,  3447,    -1,   583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,    -1,
     599,    -1,    -1,   602,    -1,    -1,    -1,    -1,   607,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3481,    -1,    -1,    -1,
      -1,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,
     629,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,    -1,    34,    -1,   643,    -1,    38,    -1,    -1,    -1,
    3515,    -1,    -1,    -1,    -1,    -1,    -1,   656,    -1,    -1,
      52,    53,    -1,    -1,    56,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3552,    -1,    -1,
      -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3572,    -1,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3598,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
      -1,    -1,    -1,    -1,    -1,  2830,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   210,  2884,
     212,    -1,    -1,  2888,   216,    -1,    -1,    -1,   220,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,  3709,  3710,    -1,    -1,    -1,    -1,
    2915,  2916,    -1,    -1,   246,    -1,   248,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2936,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2945,    -1,  2947,    -1,  2949,    -1,    -1,    -1,    -1,    -1,
     282,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    12,
      -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3825,    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    65,  3868,    -1,    -1,   398,    -1,   400,    -1,
    3875,    -1,    -1,    -1,    -1,    -1,  3081,    -1,    -1,    -1,
      83,   413,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,   424,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,  3108,    -1,    -1,  3911,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   446,   118,    -1,   449,    -1,   451,
      -1,   453,   454,  3128,    -1,   457,   458,    -1,    -1,   132,
      -1,    -1,   135,    -1,    -1,    -1,   468,    -1,    -1,   471,
     143,    -1,    -1,    -1,    -1,    -1,    -1,   479,   151,    36,
      37,    -1,    -1,   485,    -1,    42,   159,    44,    -1,    46,
      47,   493,   165,    -1,    -1,    -1,   498,   499,   500,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,   531,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4024,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
     233,    -1,   119,    -1,    -1,   122,    -1,   240,    -1,    -1,
      -1,    -1,    -1,   130,   247,    -1,    -1,    -1,    -1,    -1,
      -1,   583,  4057,    -1,    -1,    -1,  4061,    -1,    -1,   262,
      -1,   148,    -1,   595,    -1,    -1,    -1,   599,    -1,    -1,
     602,    -1,    -1,    -1,    -1,   607,    -1,    -1,    -1,   166,
      -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,  4094,
    4095,    -1,    -1,    -1,    -1,    -1,    -1,   629,    -1,    -1,
      -1,    -1,    -1,    -1,   191,   637,   193,    -1,    -1,    -1,
      -1,   643,    -1,    -1,    -1,    -1,   319,    -1,    -1,    -1,
     207,   208,    -1,    -1,   656,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,    -1,   342,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4153,    -1,
    3355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   251,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3385,    -1,    -1,   386,  3389,  3390,    -1,    -1,    -1,    -1,
     393,    -1,   395,   280,    -1,    -1,  3401,    -1,    -1,    -1,
     403,  3406,   289,   290,  3409,   292,  3411,  3412,    -1,  4214,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4243,   326,
     327,   328,    -1,    -1,    -1,  4250,   449,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,    -1,   353,    -1,    -1,   356,
      -1,    -1,   475,    -1,    -1,    -1,  3481,    -1,    -1,    -1,
      -1,    -1,  4287,    -1,    -1,   372,   373,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4302,    -1,  4304,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   408,   409,    -1,  4329,    -1,    -1,    -1,  4333,    -1,
     533,   534,   535,    -1,    -1,    -1,    -1,   540,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   433,  3552,    -1,    -1,
      -1,    -1,    -1,   556,    -1,    -1,   559,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3572,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4396,    -1,   596,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,
      -1,  4416,    -1,    -1,    -1,    -1,    -1,  4422,    -1,    -1,
     507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   565,    -1,
      -1,   568,    -1,    -1,   571,   572,   573,   574,    -1,    -1,
      -1,    -1,    -1,    -1,  4499,    -1,    -1,    -1,    -1,  4504,
      -1,    -1,    -1,    -1,  3709,  3710,  4511,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   614,   615,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   641,  4560,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4620,    -1,    -1,    -1,    -1,
      -1,  4626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3868,  4669,    -1,    -1,    -1,    -1,    -1,
    3875,    -1,  4677,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4708,    -1,    -1,  3911,    -1,    -1,    -1,
      -1,  4716,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4736,    -1,  4738,  4739,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4764,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4788,    -1,    -1,  4791,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4823,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4833,    -1,
      -1,    -1,    -1,  4838,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4057,    -1,    -1,    -1,  4061,    -1,  4863,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4888,    -1,    -1,    -1,    -1,    -1,  4094,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4243,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4302,    -1,  4304,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4560,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,  4669,    74,    75,    76,    77,    78,
      79,    80,  4677,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,  4708,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
     269,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,  4888,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,   576,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
     659,   660,    -1,    -1,   663,   664,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      39,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,   663,   664,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,   263,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
     276,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,   485,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   664,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,
     155,    -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,   263,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,
      -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,   546,   547,    -1,    -1,   550,   551,   552,   553,    -1,
     555,   556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   664,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,   150,    -1,    -1,   153,
     154,   155,    -1,    -1,    -1,   159,    -1,   161,   162,    -1,
     164,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,    -1,   237,   238,   239,    -1,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,   485,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,    -1,   530,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,    -1,   559,   560,   561,   562,    -1,
      -1,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,   657,    -1,    -1,    19,    -1,    -1,    22,
     664,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,   150,    -1,    -1,
     153,   154,   155,    -1,    -1,    -1,   159,    -1,   161,   162,
      -1,   164,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,    -1,    -1,   359,   360,   361,   362,
      -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,
     373,   374,   375,    -1,   377,   378,   379,   380,    -1,   382,
     383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
     413,   414,   415,    -1,   417,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,   447,   448,    -1,   450,   451,   452,
      -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,
     463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,    -1,
     483,   484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,
      -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,    -1,    -1,   526,    -1,    -1,    -1,   530,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,
     633,   634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,   657,    15,    -1,    -1,    -1,    19,
     663,   664,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
     150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,
      -1,   161,   162,    -1,   164,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,    -1,   237,   238,   239,
      -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,
     530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,    -1,   559,
     560,   561,   562,    -1,    -1,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,   656,    -1,    15,    -1,
      -1,    -1,    19,    -1,   664,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,    -1,
      -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,    -1,
     237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,   250,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,    -1,    -1,
     337,   338,    -1,   340,    -1,   342,    -1,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
      -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,
     367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,
     377,   378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,
     397,    -1,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,    -1,   413,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,
     457,    -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,
     467,    -1,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,    -1,   483,   484,    -1,    -1,
      -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,
      -1,    -1,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,
      -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,   546,
     547,    -1,    -1,   550,   551,   552,   553,    -1,   555,   556,
      -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,   625,   626,
      -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,
     637,   638,    -1,    -1,   641,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   664,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   651,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,   664,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,   656,    -1,    15,
      -1,    -1,    -1,    19,    -1,   664,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,   663,   664,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,   150,    -1,    -1,
     153,   154,   155,    -1,    -1,    -1,   159,    -1,   161,   162,
      -1,   164,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,    -1,    -1,   359,   360,   361,   362,
      -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,
     373,   374,   375,    -1,   377,   378,   379,   380,    -1,   382,
     383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
     413,   414,   415,    -1,   417,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,   447,   448,    -1,   450,   451,   452,
      -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,
     463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,    -1,
     483,   484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,
      -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,    -1,    -1,   526,    -1,    -1,    -1,   530,   531,   532,
      -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,   546,   547,    -1,    -1,   550,   551,   552,
     553,    -1,   555,   556,    -1,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,
     633,   634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   664,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,    -1,
      -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,   161,
     162,    -1,   164,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,    -1,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,   361,
     362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,   531,
     532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,   546,   547,    -1,    -1,   550,   551,
     552,   553,    -1,   555,   556,    -1,    -1,   559,   560,   561,
     562,    -1,    -1,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,
      -1,   583,   584,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   664,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   664,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
     150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,
      -1,   161,   162,    -1,   164,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,    -1,   237,   238,   239,
      -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,
     530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,   546,   547,    -1,    -1,
     550,   551,   552,   553,    -1,   555,   556,    -1,    -1,   559,
     560,   561,   562,    -1,    -1,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   664,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   663,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   663,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   663,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   663,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   663,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   663,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,   663,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,    -1,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,   188,
     189,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,
      -1,   270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,    -1,    -1,    -1,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,    -1,    -1,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,    -1,
      -1,   450,    -1,   452,   453,    -1,   455,    -1,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,   465,   466,   467,    -1,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,   480,   481,    -1,   483,    -1,    -1,    -1,    -1,   488,
     489,   490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,    -1,    -1,   505,   506,    -1,   508,
      -1,   510,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,    -1,   532,    -1,    -1,    -1,   536,    -1,    -1,
      -1,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,    -1,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
     629,    -1,    -1,    -1,   633,    -1,    -1,   636,    -1,   638,
      -1,     5,   641,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   658,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,   150,    -1,    -1,   153,
     154,   155,    -1,    -1,    -1,   159,    -1,   161,   162,    -1,
     164,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,    -1,   237,   238,   239,    -1,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,   275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,    -1,   530,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,     5,   641,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,   656,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,     5,   641,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   651,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,   150,    -1,    -1,   153,
     154,   155,    -1,    -1,    -1,   159,    -1,   161,   162,    -1,
     164,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,    -1,   237,   238,   239,    -1,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,    -1,   530,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,    -1,   559,   560,   561,   562,    -1,
      -1,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,     5,   641,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,   651,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,     5,   641,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   651,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,   150,    -1,    -1,   153,
     154,   155,    -1,    -1,    -1,   159,    -1,   161,   162,    -1,
     164,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,    -1,   237,   238,   239,    -1,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,    -1,   530,   531,   532,    -1,
      -1,    -1,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,   546,   547,    -1,    -1,   550,   551,   552,   553,
      -1,   555,   556,    -1,    -1,   559,   560,   561,   562,    -1,
      -1,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,     5,   641,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,   651,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,   150,    -1,    -1,   153,   154,   155,    -1,    -1,    -1,
     159,    -1,   161,   162,    -1,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,    -1,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,   494,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,   546,   547,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,     5,   644,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,   104,    -1,   106,    -1,   108,    -1,   110,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,   136,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
     151,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
      -1,   242,    -1,    -1,    -1,   246,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,   286,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,   485,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,   602,   603,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,   104,    -1,
     106,    -1,   108,    -1,   110,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
     136,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,   151,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,    -1,
     246,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
     286,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,   485,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,   498,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,   602,   603,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
     221,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
     291,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,   370,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,   516,   517,   518,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,   587,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,   221,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,   370,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,   587,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
     221,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
     291,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,   370,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,   587,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,   221,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,   370,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,   587,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,   109,   110,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    39,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
     221,   222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,   370,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
     396,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,   587,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
     291,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,   370,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,   396,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,   587,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
     291,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,   370,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,   396,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,   587,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,   109,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,   110,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    20,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,   517,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    13,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,   150,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,   154,   155,    -1,   157,   158,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,    -1,    -1,   450,
      -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,   510,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
      -1,   532,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
      -1,   157,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,
     266,   267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,    -1,
      -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,   455,
      -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,   465,
     466,   467,    -1,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,   483,    -1,    -1,
      -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,   505,
     506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,    -1,   532,    -1,    -1,    -1,
     536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,
      -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,   627,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,   154,   155,    -1,   157,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,    -1,    -1,   450,
      -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,   510,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
      -1,   532,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,   627,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,
     266,   267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,    -1,
      -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,   455,
      -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,   465,
     466,   467,    -1,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,   483,    -1,    -1,
      -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,   505,
     506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,    -1,   532,    -1,    -1,    -1,
     536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,
      -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,    -1,    -1,   450,
      -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,   510,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
      -1,   532,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,
     266,   267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,    -1,
      -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,   455,
      -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,   465,
     466,   467,    -1,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,   483,    -1,    -1,
      -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,   505,
     506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,    -1,   532,    -1,    -1,    -1,
     536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,
      -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
     161,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,    -1,    -1,   450,
      -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,   510,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
      -1,   532,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,   161,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,
     266,   267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,    -1,
      -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,   455,
      -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,   465,
     466,   467,    -1,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,   483,    -1,    -1,
      -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,   505,
     506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,    -1,   532,    -1,    -1,    -1,
     536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,
      -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
      -1,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,    -1,    -1,   450,
      -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,   510,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
      -1,   532,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
      -1,    -1,    -1,   159,    -1,    -1,   162,    -1,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,
     266,   267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,    -1,
      -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,   455,
      -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,   465,
     466,   467,    -1,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,   483,    -1,    -1,
      -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,   505,
     506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,    -1,   530,    -1,   532,    -1,    -1,    -1,
     536,    -1,    -1,    -1,   540,    -1,   542,   543,   544,   545,
     546,   547,    -1,    -1,   550,   551,   552,   553,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,
      -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,   154,   155,    -1,    -1,    -1,   159,    -1,
      -1,   162,    -1,   164,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,    -1,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,    -1,    -1,   450,
      -1,   452,    -1,    -1,   455,    -1,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,   480,
     481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,   510,
      -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,    -1,   530,
      -1,   532,    -1,    -1,    -1,   536,    -1,    -1,    -1,   540,
      -1,   542,   543,   544,   545,   546,   547,    -1,    -1,   550,
     551,   552,   553,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,    -1,
     641
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    56,    60,    65,
      66,    85,   104,   128,   136,   137,   138,   150,   151,   163,
     177,   194,   210,   212,   216,   220,   234,   246,   248,   264,
     282,   286,   293,   381,   398,   400,   413,   424,   446,   449,
     451,   453,   454,   457,   458,   468,   471,   479,   485,   493,
     498,   499,   500,   531,   539,   583,   595,   599,   602,   607,
     629,   637,   643,   656,   667,   670,   671,   672,   673,   674,
     676,   681,   683,   696,   727,   755,   762,   763,   777,   778,
     797,   816,   831,   891,   945,   983,  1064,  1109,  1112,  1122,
    1127,  1133,  1146,  1149,  1155,  1158,  1163,  1170,  1182,  1183,
    1359,  1361,  1373,  1376,  1401,  1409,  1422,  1429,  1443,  1447,
    1448,  1452,  1463,  1471,  1475,  1480,  1481,  1482,  1536,  1567,
    1573,  1575,  1582,  1585,  1619,  1621,  1627,  1628,  1629,  1630,
    1683,  1691,  1692,  1693,    12,   115,   133,   203,   287,   418,
     491,   556,  1065,  1652,  1653,  1654,  1655,   198,   283,   368,
    1157,  1450,   363,   364,  1216,  1620,   564,  1525,   240,     5,
       7,     8,     9,    10,    11,    12,    15,    19,    22,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    34,    38,
      42,    45,    46,    47,    49,    51,    52,    55,    58,    59,
      61,    62,    64,    65,    67,    68,    69,    70,    71,    72,
      74,    75,    76,    77,    78,    79,    80,    82,    83,    84,
      85,    86,    87,    88,    89,    91,    92,    94,    95,    96,
      97,    98,   100,   103,   106,   108,   111,   113,   117,   118,
     119,   122,   127,   128,   133,   135,   139,   141,   142,   143,
     144,   145,   150,   153,   154,   155,   159,   161,   162,   164,
     165,   166,   168,   169,   171,   172,   173,   174,   175,   176,
     177,   180,   181,   182,   183,   186,   187,   189,   190,   191,
     194,   198,   199,   201,   203,   205,   206,   207,   208,   209,
     210,   211,   213,   216,   217,   218,   220,   224,   225,   229,
     230,   231,   232,   233,   237,   238,   239,   242,   247,   248,
     252,   254,   255,   257,   258,   262,   265,   266,   267,   270,
     273,   274,   280,   281,   283,   285,   287,   288,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   312,   313,   314,   315,   317,   318,
     319,   320,   322,   323,   324,   329,   330,   331,   332,   333,
     334,   337,   338,   340,   342,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   356,   359,   360,   361,   362,
     366,   367,   371,   373,   374,   375,   377,   378,   379,   380,
     382,   383,   392,   393,   394,   397,   399,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   413,   414,   415,
     417,   419,   420,   421,   422,   423,   425,   426,   427,   430,
     434,   435,   436,   437,   438,   441,   442,   443,   444,   445,
     447,   448,   450,   451,   452,   455,   457,   459,   460,   462,
     463,   465,   467,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   483,   484,   488,   489,   490,
     491,   495,   499,   501,   502,   503,   504,   505,   506,   508,
     509,   510,   511,   512,   513,   520,   521,   523,   526,   530,
     531,   532,   536,   539,   540,   542,   543,   544,   545,   546,
     547,   550,   551,   552,   553,   555,   556,   559,   560,   561,
     562,   565,   566,   568,   569,   570,   571,   577,   578,   579,
     583,   584,   585,   586,   588,   589,   591,   592,   594,   595,
     598,   601,   603,   605,   606,   613,   616,   620,   621,   622,
     623,   624,   625,   626,   633,   634,   636,   637,   638,   641,
     721,  1524,  1528,  1534,  1535,   798,   312,   555,   558,  1569,
    1150,   633,  1623,   287,   388,   556,  1410,  1360,   115,   173,
     203,   240,   287,   418,   470,   491,   556,   561,   580,   605,
     621,  1372,  1528,  1157,   108,   764,   720,   664,  1521,  1523,
    1528,   682,   779,  1374,   407,   511,  1476,   118,   240,   638,
    1487,  1569,   832,  1157,   656,   892,  1528,  1472,   479,   605,
    1569,  1157,   834,  1377,  1464,   517,   752,   756,   757,  1528,
     720,  1623,  1528,  1188,  1190,  1191,  1192,   532,  1537,  1430,
     756,    13,   503,   577,    13,   503,   558,  1424,   407,   511,
    1574,  1402,  1528,   833,    34,    85,   161,   413,   435,   471,
     531,  1685,   656,  1184,  1185,     0,   163,   668,   413,   115,
     202,   470,   514,   597,   605,   702,   703,  1042,  1043,  1044,
    1372,   182,   198,   401,  1449,  1450,  1521,  1528,   644,  1077,
    1528,   644,   721,   214,   721,   275,  1525,  1528,  1530,   837,
     838,   841,   864,  1528,  1101,  1102,  1071,  1204,  1652,   644,
    1569,  1182,  1373,  1376,  1401,  1409,  1446,    25,  1623,  1164,
     728,   664,   627,   799,   800,   803,   807,   694,   695,  1525,
    1123,   621,  1147,  1569,    18,  1624,   214,   454,   839,   864,
     236,   294,   427,  1420,  1421,     8,    22,    31,    37,    39,
      40,    41,    43,    56,    57,    62,    63,    71,    74,    76,
      77,    78,    79,    80,    97,   101,   102,   107,   109,   110,
     114,   115,   120,   121,   122,   127,   129,   132,   178,   184,
     185,   192,   198,   207,   209,   215,   221,   222,   229,   234,
     246,   249,   267,   272,   280,   291,   316,   321,   333,   337,
     339,   343,   344,   345,   346,   347,   355,   363,   364,   365,
     369,   370,   375,   396,   403,   408,   409,   411,   425,   453,
     454,   467,   469,   476,   477,   483,   537,   538,   544,   548,
     549,   554,   564,   568,   569,   570,   571,   581,   582,   583,
     587,   590,   605,   609,   610,   611,   612,   617,   619,   625,
     626,   641,   649,   650,   655,   656,   659,   660,   663,   664,
    1210,  1211,  1212,  1213,  1217,  1225,  1226,  1227,  1228,  1229,
    1230,  1238,  1242,  1256,  1506,  1509,  1511,  1512,  1513,  1517,
    1519,  1524,  1528,   234,  1371,  1371,  1371,   234,  1370,   214,
    1371,  1371,  1371,   864,  1371,  1371,  1371,  1569,   677,  1453,
     141,    13,    14,   104,   110,   136,   151,   173,   177,   189,
     212,   240,   246,   286,   419,   423,   439,   447,   455,   485,
     498,   499,   550,   580,   602,   604,  1530,  1586,  1590,  1591,
    1593,  1595,  1596,  1528,   380,    70,   431,   664,  1530,   792,
     793,   134,   223,   294,  1379,  1528,  1525,   217,   510,  1477,
     250,  1483,  1568,    34,    70,   188,   259,   271,   380,   466,
     741,   776,   777,   780,   781,   782,   784,   785,   786,   787,
     789,   812,   814,   820,   827,  1524,  1529,  1535,  1569,   984,
    1204,    50,   893,   200,    37,   312,  1435,  1473,  1528,   720,
    1159,  1128,   741,   823,   134,   294,  1380,  1408,   312,   426,
     503,  1465,  1466,   613,   753,   493,   758,     7,    13,   423,
    1583,  1584,  1591,  1593,   575,  1624,  1189,   250,   386,  1323,
    1324,  1353,  1354,    13,   146,   223,   519,   520,   521,   522,
     523,   524,   541,  1197,  1198,  1199,  1648,  1538,    62,    63,
     132,   211,   283,   351,   403,   470,   490,   577,   663,  1007,
    1528,  1541,  1553,  1557,  1558,    13,    26,    38,    62,    74,
     100,   102,   104,   116,   165,   169,   172,   201,   203,   211,
     213,   239,   240,   261,   283,   312,   380,   406,   417,   418,
     421,   422,   442,   490,   503,   540,   558,   624,  1007,  1041,
    1431,  1435,  1436,  1438,  1447,  1524,  1554,   758,   504,   694,
     431,   630,  1113,  1114,  1115,   504,   694,  1423,  1528,  1525,
    1569,  1408,   821,  1210,    39,   221,   222,   564,  1507,  1508,
    1526,  1684,  1684,  1684,  1684,  1684,  1184,   657,   485,   662,
    1528,   234,   944,   944,   944,  1649,  1653,  1654,  1655,   491,
     704,   240,   240,   240,   558,  1445,  1444,   331,   562,   589,
    1067,   603,   109,  1530,  1531,  1532,  1590,  1069,   843,   865,
    1528,  1068,  1073,     6,    60,   151,   364,   430,   432,   866,
     558,   236,   379,  1103,  1104,  1105,   525,  1656,  1657,   173,
    1070,  1530,  1134,   817,  1165,  1166,  1167,  1168,  1521,   656,
     729,  1528,   808,   157,   810,  1210,   807,   575,  1365,  1366,
    1521,  1148,  1365,    59,   366,   366,   446,  1625,   842,   865,
       6,   200,  1411,  1417,  1418,  1528,  1420,   656,   656,   656,
    1225,   656,   656,   656,  1210,  1259,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
    1209,  1209,  1209,   656,  1208,   656,   656,   656,   564,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,  1210,   656,   656,   656,   656,  1257,  1258,  1517,
    1528,   656,   656,   656,   656,   656,   656,   656,   656,   656,
    1210,  1208,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
    1208,   564,   656,   656,   656,   564,   656,   656,   656,   564,
    1508,   656,  1209,  1208,  1208,   656,   656,   656,   656,   656,
     656,  1225,  1225,  1225,  1210,  1643,  1644,  1528,  1243,  1528,
      17,    18,   385,   388,   639,  1214,  1215,   167,   204,   256,
     268,   357,   644,   645,   646,  1218,    35,   147,   253,   276,
     343,   440,   496,   497,   512,   647,   648,   649,   650,   651,
     652,   653,   654,  1216,  1225,    73,   387,   658,  1526,   656,
     664,   178,  1528,   721,  1528,   178,  1528,   865,   721,   720,
    1530,   875,  1436,   721,   720,  1364,  1371,   608,   678,    37,
     139,   165,   168,   205,   225,   288,   312,   417,   426,   441,
     459,   503,   506,   536,  1454,  1459,  1460,  1524,  1569,    90,
     663,   765,   766,   767,   768,  1528,   417,  1594,   473,   473,
     556,   561,   605,   621,  1209,   383,  1598,   555,   376,  1600,
      69,   503,  1597,   116,   621,  1599,   575,   376,   658,    20,
     644,  1309,  1310,  1576,  1528,   161,  1210,   236,  1100,   511,
      91,   426,  1478,    52,    89,   294,  1489,  1521,  1570,  1571,
     815,  1528,   200,   360,   790,  1529,  1529,  1528,   783,   161,
     776,   662,   671,   826,   665,  1156,   657,  1210,   278,   281,
     428,   894,   896,   663,   675,  1525,   288,  1160,  1531,  1533,
    1161,  1162,  1521,   621,  1125,  1569,   601,   826,   250,  1367,
    1381,  1382,  1521,  1468,    52,  1467,   658,  1526,    58,    68,
      82,    94,    95,    96,   113,   332,   350,   481,   543,   560,
     759,   761,   383,  1594,   376,   200,   376,   479,  1626,  1625,
     596,  1631,  1632,  1355,    50,   277,  1328,  1329,  1330,   200,
    1194,   197,   286,  1200,   651,  1201,  1202,  1204,  1199,   132,
    1540,  1556,  1558,   493,   470,   664,    37,   132,   494,   644,
    1008,  1009,  1392,  1530,   197,  1392,  1564,  1530,  1543,   663,
    1530,    37,   132,  1011,  1012,  1530,   664,  1544,  1542,  1392,
     504,   172,   276,   628,  1442,   656,   115,   173,   203,   418,
     558,   580,   621,  1442,    13,   954,  1530,  1328,   200,   253,
    1437,  1439,    72,   536,   197,   536,   555,   511,    72,   536,
      13,    45,    98,   103,   255,   330,   394,   513,   552,  1425,
    1426,  1427,   694,   225,   536,   695,   536,  1328,  1442,  1439,
     288,   164,    75,   420,   555,   579,   197,  1203,   536,   616,
    1116,  1117,  1116,   378,   635,    92,   658,  1116,  1116,  1366,
    1100,   826,   150,   658,   377,  1687,   551,  1688,   260,   462,
    1686,   657,  1632,  1634,  1635,  1636,  1637,  1190,   163,   669,
    1216,  1528,   720,   720,    11,   203,   418,   580,   708,  1204,
    1651,  1657,  1665,  1670,  1671,  1672,  1678,   203,   708,  1650,
    1657,  1665,  1672,  1678,  1652,   944,   944,   944,   944,   944,
    1446,  1451,  1507,  1528,   132,   941,   942,   951,   952,  1016,
     118,  1209,   663,   722,     6,   844,   722,   382,   117,   861,
     861,   861,     4,  1521,  1105,   484,   621,   721,  1657,  1135,
    1136,  1366,   818,   819,   253,   658,   400,  1176,  1178,  1179,
     730,   731,  1210,  1210,   741,   161,   801,   684,   182,   427,
     658,  1124,  1365,    61,   182,   186,   197,   329,   427,  1151,
    1152,  1153,    59,   446,   844,   861,  1368,  1369,  1521,  1522,
    1528,   658,  1414,   664,  1419,  1210,  1210,    13,   146,  1250,
    1311,  1250,  1250,  1250,   627,  1261,  1210,  1210,  1256,  1256,
    1210,  1210,  1210,  1210,  1223,  1224,  1210,  1210,  1210,  1210,
     146,  1250,  1311,   657,   129,   192,   221,   291,   370,   587,
     657,  1337,  1340,  1341,   657,  1210,  1210,  1210,  1210,  1517,
    1643,   123,   124,   125,   126,   127,   226,   227,   228,   229,
     333,   335,   336,   337,   344,   425,   482,   483,   625,   640,
     641,  1306,  1307,  1210,  1256,   119,   122,   568,   571,  1308,
     146,  1245,  1210,  1210,  1210,  1210,  1306,  1256,  1210,  1256,
    1258,    10,   658,   664,   146,  1250,  1210,  1210,   146,  1250,
    1210,  1210,  1256,  1256,  1256,  1210,  1210,  1210,  1256,  1213,
    1210,  1210,  1210,  1210,  1210,  1210,   657,  1210,  1250,  1250,
    1210,  1210,   146,  1250,  1210,  1307,  1307,  1210,    48,   269,
     576,  1210,  1210,   657,  1518,  1519,  1528,  1250,  1250,  1210,
    1210,  1210,   657,   658,   657,   485,   656,  1640,  1641,  1210,
     663,  1244,  1530,   664,  1210,  1210,  1210,  1212,   185,   369,
     582,   598,  1216,    13,    19,  1212,  1219,  1213,  1213,   656,
    1225,  1213,  1213,  1213,  1213,   276,  1213,  1213,   249,  1213,
     249,  1213,  1213,  1213,  1213,  1213,    35,   253,   276,   440,
    1530,  1225,  1210,  1231,  1528,   664,   376,   875,  1589,  1591,
     367,   623,   876,   877,   165,  1533,  1605,  1365,  1362,   663,
     679,   680,   288,   288,   288,   288,    52,   288,   694,   288,
     658,  1203,  1455,   122,   568,   571,   760,   770,  1242,  1511,
    1517,  1530,   658,   644,   555,   656,  1611,  1533,  1611,  1611,
    1611,  1531,  1532,  1533,  1606,  1610,   203,   418,   558,  1592,
     173,   177,   189,   419,   447,   455,   499,   550,  1596,  1528,
     190,   360,  1528,  1577,  1578,   234,   567,  1381,  1525,   230,
     605,  1210,  1479,  1171,   283,  1488,  1310,   658,   818,   200,
    1528,  1210,   293,   662,    34,   293,   453,   629,  1365,  1205,
      75,   656,   901,   902,   901,   902,   401,   904,   218,   263,
    1530,    33,   575,  1474,   658,   575,   658,   575,  1126,  1365,
     824,  1382,  1378,   400,  1275,  1276,   575,  1470,   694,  1466,
     658,   644,   197,   658,  1533,  1532,  1607,   203,   418,  1592,
    1528,    13,   146,  1639,   153,   390,  1348,  1349,  1356,  1325,
    1200,   291,   370,   474,   587,  1331,  1332,  1509,  1528,   152,
     485,   656,   660,  1196,  1262,  1263,  1264,  1265,  1266,  1277,
    1278,  1290,   628,  1312,   602,   253,   658,  1210,  1515,  1528,
     658,  1539,  1392,  1591,  1528,    73,  1014,  1210,  1533,   375,
     403,   564,  1565,   257,   431,  1559,  1560,  1561,  1562,   211,
     283,   490,  1555,  1392,  1528,   577,  1545,  1556,   658,  1547,
      13,    37,   132,   376,  1210,  1566,   536,   253,  1440,  1203,
    1203,   651,   944,   721,   721,   721,  1521,   721,  1521,   288,
     348,   536,  1434,  1434,  1442,  1528,   721,  1442,  1532,  1437,
    1442,  1525,   721,  1442,   254,   553,   187,   197,  1428,   658,
     172,   536,  1437,  1521,  1439,  1437,  1437,  1210,  1442,  1442,
    1442,  1111,   445,   526,  1118,  1119,  1110,   508,  1115,  1263,
     822,  1507,   405,  1689,  1324,  1330,  1638,   178,   701,  1589,
    1606,   203,  1671,   944,   944,  1204,   173,   944,  1657,  1530,
    1528,  1528,  1528,  1521,   942,    73,  1007,   142,  1530,    83,
      97,   265,   341,   366,   429,   525,   724,   726,   436,   591,
     862,   863,   242,   858,   859,   860,   867,   875,   877,   656,
    1525,    27,   320,   852,   853,   854,   867,   868,   869,   875,
     877,   845,   846,   852,  1066,   133,   252,   944,  1072,   658,
     404,  1137,   742,   132,  1169,  1528,  1167,  1521,   890,  1178,
     240,   263,  1039,  1180,   657,   658,   809,    56,   627,   802,
     804,   149,   235,   237,   295,   297,   298,   299,   300,   301,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   313,
     314,   315,   443,   444,   685,   686,   693,  1366,   197,  1154,
     603,  1152,    83,   361,   437,   592,   855,   856,   857,   867,
     871,   872,   873,   874,   875,   877,   607,   840,   658,  1415,
    1275,   664,  1419,  1418,   200,   651,  1528,   658,   657,  1250,
     657,  1251,   657,   657,   657,  1210,   157,   627,  1260,    20,
     657,   608,   657,   657,   657,   658,   657,   658,   657,   658,
     658,   658,   658,   608,   658,  1239,   657,   651,   657,   658,
     658,   657,   657,   657,   657,   200,   658,   657,   658,  1241,
     657,   658,   658,   658,   650,   657,   658,   657,   657,   656,
    1517,  1528,  1250,   657,   657,   657,  1250,   657,   658,   657,
     657,   657,   657,   657,   657,   658,   657,   253,   657,   658,
     658,   657,   658,   658,   657,   657,   657,   658,   200,   658,
    1250,   657,   657,   658,   658,   658,   657,   200,  1210,   200,
    1210,   200,  1210,   200,   657,   658,   657,   657,   657,   657,
     658,    20,   274,   658,  1030,   657,  1256,  1281,  1282,  1283,
     656,  1186,  1187,   596,  1645,   661,  1555,   494,  1528,   185,
     369,   582,   598,   656,    18,  1210,  1643,   171,  1316,  1213,
    1210,  1210,  1213,   656,  1225,  1213,  1204,  1235,  1236,  1237,
     656,   664,  1528,  1521,   876,   658,  1392,  1393,   658,    54,
     461,  1106,  1365,  1530,   658,   694,  1460,  1365,  1461,   768,
     771,   772,   767,   371,   477,   769,  1528,  1612,  1613,   575,
     232,   630,   658,  1588,   651,  1521,  1528,  1604,  1604,  1604,
     190,   204,   266,   268,   360,   415,   644,   645,   646,  1579,
    1581,  1312,   794,  1375,  1533,  1172,  1173,  1174,  1175,  1521,
     241,   294,   431,   635,  1572,  1571,   250,   813,   828,   830,
     829,   656,  1204,  1337,   547,   905,   895,    12,   897,  1210,
    1525,  1533,  1533,  1162,  1521,  1365,   182,   427,   606,  1129,
    1130,  1131,  1210,   485,   493,   612,   613,   656,   936,  1383,
    1386,   656,   129,   192,   221,   291,   370,   587,  1336,    13,
    1469,   761,   760,  1591,   212,   200,   658,  1604,  1604,  1604,
    1633,   564,  1527,  1527,   663,  1350,  1351,  1352,  1530,  1210,
    1326,  1516,   176,   474,   374,   658,  1289,  1528,   105,   243,
     260,   272,   354,   469,   541,  1273,  1274,   658,  1521,  1289,
    1313,   214,  1317,   495,  1202,  1205,  1205,   664,  1556,   197,
    1566,   197,   132,  1013,  1015,  1530,  1392,   656,   656,   274,
     378,   635,   658,   658,   664,   664,   664,  1558,  1210,  1559,
    1546,  1548,  1549,  1525,   200,  1441,  1525,  1210,   657,  1528,
     720,  1442,   426,  1328,  1427,  1440,  1442,  1437,  1521,  1442,
    1442,   658,   601,  1120,   493,   741,   658,   197,  1690,  1328,
     940,   941,   630,  1587,   944,   721,  1528,   721,   944,   944,
     705,   585,   608,  1052,   376,   376,   697,  1393,  1393,   352,
    1525,   525,   525,   525,   525,   525,   484,  1525,  1525,  1393,
     658,   860,   115,   224,   392,   403,   410,   509,   605,   706,
     707,  1393,  1393,   658,   854,   847,   848,   867,   868,   869,
       6,    12,    14,    16,    28,    30,    60,    65,    66,    71,
      83,    91,   101,   118,   135,   143,   144,   151,   159,   165,
     175,   195,   238,   240,   247,   262,   286,   319,   338,   342,
     381,   386,   393,   395,   400,   403,   434,   448,   449,   450,
     451,   475,   533,   534,   535,   540,   556,   559,   578,   583,
     596,   888,   947,   949,   951,   952,  1078,  1082,  1084,  1087,
    1093,  1094,  1095,  1097,  1098,  1320,  1524,  1521,   376,   716,
    1074,  1136,   197,   131,   740,   743,  1177,   656,  1210,   567,
     805,   804,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   658,   603,  1393,  1393,  1393,
    1393,   658,   857,   287,   183,   849,   850,   851,   867,   868,
     869,   870,   873,   874,   875,   877,  1369,  1528,   608,  1412,
    1528,  1263,   664,  1419,   249,  1210,   657,  1210,   567,  1210,
    1210,   161,    37,    63,   119,   122,   130,   148,   251,   356,
     501,   571,   600,  1252,  1008,  1224,  1210,  1223,  1256,  1210,
    1210,  1008,  1252,  1256,   657,   249,   249,  1210,  1210,  1210,
    1256,  1210,  1210,  1210,  1210,  1210,  1213,   657,   657,  1210,
    1210,  1210,  1210,  1210,  1210,  1256,   249,  1210,  1210,  1210,
     657,  1210,  1210,  1210,  1210,   200,  1210,   200,  1210,   200,
    1210,  1210,  1210,    37,    63,  1025,  1026,  1027,  1028,  1029,
    1337,  1336,   657,   657,  1193,  1194,  1195,  1646,  1647,  1648,
    1186,   657,   485,  1639,  1530,  1210,  1643,  1212,   657,   658,
     657,  1225,  1306,  1306,    18,  1210,  1643,  1316,  1210,   657,
     658,  1255,  1256,  1528,  1363,  1591,   953,  1530,  1533,  1106,
     680,   197,   630,  1456,  1457,   644,   658,   657,   658,  1606,
      50,   620,   630,  1608,     7,  1610,   664,   664,   575,   575,
     575,  1580,  1328,   741,  1383,   658,  1176,  1178,  1527,   635,
     283,    89,   788,   818,   820,   823,   821,   898,   899,   900,
    1528,   910,  1213,    50,   656,   912,   902,   644,   656,   575,
     200,  1132,  1130,   161,   937,  1384,   656,  1389,  1394,  1389,
     657,   936,  1385,  1514,  1515,  1518,  1528,  1387,  1305,  1528,
     644,   383,  1605,  1532,   200,   200,   200,  1183,  1357,  1530,
     658,   658,    21,   137,  1327,  1332,  1333,   176,  1332,  1332,
    1279,  1284,  1289,  1262,   260,   260,   389,  1291,   272,   469,
    1273,  1291,  1262,  1264,  1275,  1286,  1287,  1210,    50,   219,
    1314,   340,    20,  1206,  1525,  1528,   651,  1528,   670,  1533,
     564,   564,   431,   452,   488,  1563,  1561,  1560,  1392,  1547,
     658,  1551,  1553,  1557,   129,   192,   291,   370,   587,  1338,
    1432,   169,   624,   370,  1441,  1312,  1437,  1119,   296,   693,
    1121,  1404,  1405,  1518,   161,  1336,   334,     7,  1528,   656,
     465,  1679,  1666,   721,   196,    49,   218,   478,  1058,  1058,
     376,  1521,  1521,   276,   656,   879,   882,   946,   948,   949,
    1015,  1009,   118,   118,   133,   252,   221,   291,   370,   587,
     878,  1339,  1340,  1524,   860,  1525,  1525,  1525,  1525,  1336,
    1525,  1525,   657,   658,   878,   878,   854,   658,   848,    81,
      93,   400,   962,   972,   973,  1039,  1043,  1044,  1099,  1393,
    1099,   400,  1393,  1393,  1099,  1393,   400,   400,  1393,  1393,
     575,   142,  1393,   261,   556,   196,   400,   416,  1039,  1099,
     261,  1393,   400,   556,   142,  1393,  1393,  1393,  1393,  1393,
    1099,   400,    50,  1393,  1393,   890,  1393,   400,   402,    20,
     575,   644,  1108,   400,   400,  1393,  1393,  1393,  1393,   145,
     330,  1528,  1393,  1393,   400,  1393,   947,   658,   887,   888,
    1082,   656,   664,   961,   974,  1520,  1528,  1392,  1658,    87,
     480,   449,  1075,    13,    75,  1138,    99,   179,   748,   774,
    1528,   161,   776,   662,   656,   416,  1302,  1303,  1304,  1528,
     741,  1210,   656,   656,   656,  1336,  1525,  1525,  1338,  1525,
    1336,  1525,  1525,  1525,  1525,  1525,  1525,  1525,  1336,  1336,
    1525,   111,   366,   505,  1512,  1525,  1336,   686,  1525,  1337,
     878,   878,   857,   214,  1393,   658,   851,   664,  1263,  1312,
    1419,  1312,  1210,   657,  1210,   567,   656,   999,  1000,  1000,
    1000,   656,   994,   995,   999,  1254,  1000,   251,  1000,   251,
     657,   657,   657,    20,  1220,   657,    20,   657,   657,   657,
    1240,  1210,  1210,   657,   657,   658,   657,   386,  1247,   658,
     658,   657,   658,   657,   253,  1232,  1233,   657,   657,   657,
     657,   658,   657,   657,  1210,   657,   197,   657,   657,   658,
     657,   658,   658,   657,  1210,   657,  1210,   657,  1210,   657,
     657,   657,   656,  1020,  1020,    21,   137,   467,   649,  1022,
    1023,  1024,   658,   658,  1312,  1201,  1648,   657,  1635,  1282,
    1642,   664,  1062,   657,  1256,  1212,   657,   658,   657,  1205,
    1237,   657,  1458,   431,    58,    68,    82,    94,    95,    96,
     113,   332,   350,   463,   481,   543,   560,   773,   772,  1613,
     630,  1616,   403,   564,  1530,   383,   651,   651,  1606,  1606,
    1606,   656,   795,   376,  1399,  1174,  1521,  1178,   236,  1181,
    1484,   791,  1528,   811,  1529,   811,   825,   825,   825,   657,
     658,  1205,   896,   400,   913,   914,  1337,   898,  1533,   349,
     453,  1197,  1390,  1391,  1518,  1395,   658,   656,  1386,   657,
     657,   658,   664,  1631,   657,   658,   760,   200,  1607,  1607,
    1607,  1007,  1010,  1351,  1516,  1333,   596,   657,  1635,  1285,
     661,   260,  1291,  1291,  1277,   260,   376,   608,  1310,  1197,
    1318,  1516,  1315,  1323,  1525,  1528,   664,   657,   657,    84,
     588,   431,  1566,  1550,  1552,  1328,  1433,  1442,   644,   658,
     658,  1403,  1392,   629,  1532,  1673,   130,   251,   433,   542,
     957,   656,   721,   709,   118,  1521,   699,   700,  1521,   276,
     936,   958,   959,   960,   961,   962,   886,   887,   658,   948,
     707,   848,  1061,  1520,   944,    66,   196,   416,   597,   971,
    1038,   944,  1039,  1040,  1040,   234,   943,   132,  1528,  1520,
    1157,  1338,  1336,  1370,  1336,    13,  1083,  1091,  1092,  1528,
    1157,  1525,  1525,  1007,  1393,  1336,   263,  1371,   263,  1370,
    1370,   953,  1092,  1393,   190,   266,   366,   956,  1336,   132,
    1528,  1338,  1338,  1370,  1157,  1321,  1322,  1518,   132,  1336,
     132,  1336,  1342,   889,  1525,  1157,  1521,  1157,  1157,    86,
      88,   132,   155,   191,   394,   438,   955,   132,  1336,   132,
    1336,   132,  1336,  1336,  1342,  1083,   950,     6,   151,  1095,
     958,  1528,     9,   190,  1107,   439,   970,   971,  1032,   975,
     664,   132,  1339,  1525,  1528,   656,  1659,  1216,  1622,    24,
     174,   710,   575,   143,   159,   712,    13,   656,  1139,   216,
     658,   744,    90,   112,   662,  1083,   657,   658,   806,   689,
     690,  1336,   691,   692,  1336,   687,   688,  1336,  1528,   878,
     851,  1528,  1312,  1323,  1306,  1210,   129,   291,   370,   587,
    1253,   370,   656,   995,  1001,    63,   119,   122,   130,   148,
     193,   251,   353,   356,   433,   571,   600,   987,   988,  1221,
    1252,   657,  1306,  1306,  1210,    50,   487,  1246,  1210,  1210,
    1256,    46,   354,   657,   630,  1234,  1210,  1306,  1210,  1210,
    1210,  1210,   657,   657,   657,  1337,   657,  1030,  1025,  1023,
    1025,  1026,  1336,  1317,  1193,  1640,  1528,   657,  1256,  1206,
     181,   286,   212,   564,    20,   608,  1609,   456,  1614,  1614,
    1614,   132,  1210,  1397,  1398,   157,   158,   796,   154,  1181,
     270,   236,   454,  1490,   658,   900,   657,   218,   263,   915,
     657,   658,   657,  1201,   658,  1392,  1396,  1397,  1394,  1388,
    1386,  1514,  1528,   890,  1528,  1607,  1009,  1358,  1327,  1639,
    1310,  1265,  1262,  1277,   260,   260,  1262,  1277,  1267,  1268,
    1300,  1301,  1201,   631,   632,   658,  1319,  1327,  1210,  1328,
     651,  1551,  1556,  1328,  1525,   693,  1405,  1312,  1398,   732,
     733,   734,  1528,   511,  1680,     9,    33,   835,   376,   634,
     698,   656,   656,  1521,   657,   657,   658,   883,  1490,   948,
    1157,   656,   263,   263,  1040,   944,  1061,  1528,   944,   944,
    1216,   151,   493,  1083,  1520,  1080,   658,  1337,  1009,  1525,
    1370,  1091,  1520,  1520,   630,  1525,   974,  1083,   658,  1327,
     893,  1083,  1088,  1083,   656,   657,  1528,  1521,    36,    37,
      42,    44,    46,    47,   119,   122,   130,   148,   166,   191,
     193,   207,   208,   251,   280,   289,   290,   292,   326,   327,
     328,   345,   346,   347,   353,   356,   372,   373,   408,   409,
     433,   489,   493,   507,   565,   568,   571,   572,   573,   574,
     614,   615,   641,   985,   986,   987,   988,   989,   990,   991,
     992,  1528,  1528,  1660,    20,   414,  1210,  1210,   376,   716,
     721,   376,    83,   717,  1140,   239,   197,  1528,   985,  1005,
     197,   197,   657,  1303,   567,   657,   658,   657,   658,   657,
     658,   277,  1334,   657,   657,   657,   657,   657,    22,    37,
      51,   594,  1007,  1017,  1018,   658,   370,  1000,   994,    63,
    1000,   251,  1222,   657,   657,   657,   657,  1248,  1507,   657,
     657,   658,   657,   340,   265,   426,   657,   657,   657,   657,
     657,   657,  1021,   657,   658,  1314,   657,    18,  1462,   383,
    1525,    67,   258,   362,   528,   545,   636,  1602,  1603,   630,
    1615,  1615,  1615,   657,   658,   741,   792,  1400,   250,  1528,
     656,   903,   897,   916,  1528,   914,   938,  1391,  1398,   657,
    1634,    75,  1491,  1280,   376,  1270,  1277,  1277,   376,  1272,
    1210,   656,  1298,  1299,  1288,  1516,   418,  1343,  1323,   657,
     658,   735,  1525,   244,   253,   391,   736,   737,   738,   739,
     136,   246,   602,   836,   480,  1530,   656,  1059,  1060,  1528,
    1059,   657,   881,   880,   960,    20,   939,  1085,  1210,   944,
    1061,  1528,   608,  1051,   585,  1061,  1061,   178,   132,   132,
     974,  1151,  1092,  1014,  1520,  1106,   558,  1107,  1079,  1322,
    1089,  1091,  1081,  1461,   656,  1033,   999,   999,  1000,  1000,
     994,   412,   656,   994,   994,  1018,    63,   614,   987,   989,
    1018,  1018,    63,   615,   615,   618,   994,   656,  1000,  1000,
    1000,  1018,   999,  1000,   976,   994,   618,   999,  1018,    37,
     999,  1019,   999,   999,  1000,  1001,   664,   657,   658,  1661,
    1662,  1306,   503,  1525,   150,  1076,  1143,  1528,    13,   656,
    1141,   745,  1014,   132,   775,   751,   752,  1336,   746,   747,
     741,   690,   692,   688,   474,  1332,  1413,  1017,  1008,  1019,
     370,  1018,  1249,  1516,  1210,   340,   180,   657,  1336,  1323,
     143,   564,   564,   564,    18,  1601,   212,   317,   318,   322,
     323,   324,  1617,  1618,  1398,   263,   558,  1204,   906,   656,
     612,   917,  1193,   160,   170,   384,   563,  1492,  1493,   279,
    1494,  1640,  1269,   608,  1271,   608,  1305,   195,   236,   607,
    1293,  1294,  1297,  1193,  1327,  1528,  1353,  1354,  1334,  1674,
     734,  1005,   657,   658,   734,   376,   710,   382,  1059,   657,
     658,  1327,   656,   657,  1634,   946,   656,   936,   401,   656,
    1086,   657,  1061,  1051,   585,  1058,   963,  1058,   965,   966,
     122,   568,   571,   649,   650,  1510,  1511,  1107,  1521,  1157,
    1090,  1129,   657,  1034,  1528,   316,  1035,   501,   600,   642,
     996,   997,   998,  1063,  1507,   996,   996,  1018,   618,   996,
    1063,  1018,   996,    28,    73,    83,   132,   206,   369,   376,
     416,   489,   597,   977,   978,  1002,  1003,  1004,  1031,  1216,
    1524,   527,   993,  1018,  1019,  1018,  1019,   996,   996,  1528,
    1528,   485,   656,  1663,   711,   718,   719,   657,   658,  1142,
     516,   518,   749,   750,   751,   754,  1216,  1528,  1210,  1182,
     176,   474,   464,  1416,   657,   658,  1327,   657,   657,  1328,
      64,  1602,   383,  1336,  1336,  1336,  1512,   370,   649,  1335,
    1618,   602,  1521,   910,   546,   911,   908,   909,  1528,   253,
     273,    83,    91,   118,   240,   319,   338,   361,   556,   933,
     934,   935,  1436,    50,    50,   160,    50,  1493,   529,   563,
    1495,  1496,  1210,   656,  1210,   656,   657,  1039,  1039,  1294,
    1344,  1200,   465,  1681,   738,  1204,   715,   716,   656,   657,
      83,   262,   630,  1046,  1050,  1054,  1057,  1524,  1060,   370,
    1047,  1049,  1054,  1056,   886,   936,   884,  1337,   913,   969,
     967,  1058,   656,   964,   656,   656,  1512,  1512,   890,   250,
     657,   658,   201,   399,   502,   376,  1036,   998,   657,   658,
     657,  1013,  1525,   365,  1006,  1510,    15,   602,   132,   263,
      20,  1004,   263,   369,  1392,   644,  1188,  1184,   630,  1664,
     530,   713,   776,  1528,   416,  1144,  1145,  1528,   658,   776,
     199,   176,  1201,  1516,  1343,   291,   370,  1406,  1407,  1518,
    1275,  1205,  1337,   657,   658,   919,   566,  1393,  1393,   142,
     142,  1393,  1393,  1393,  1393,   656,   928,   935,   165,  1507,
    1507,    50,  1507,    50,    50,  1496,  1305,  1305,   197,  1292,
    1292,   656,  1675,   723,  1667,   712,   706,   585,   608,  1045,
    1048,  1053,  1054,  1055,  1525,  1393,   397,  1096,  1097,  1098,
    1057,  1392,  1327,   657,  1096,  1056,   883,   657,  1631,   657,
     656,   656,   968,  1059,   656,  1059,  1059,   656,  1528,   136,
     602,  1018,  1507,  1018,   656,  1207,   365,   613,   656,   132,
    1339,  1525,  1528,   370,   657,    55,    66,   283,  1210,   162,
     714,   657,   658,   750,  1327,  1200,   658,  1392,  1485,   657,
     907,   909,   656,   921,   923,   918,  1525,  1525,  1393,  1393,
    1339,  1339,  1337,  1530,   547,   929,   930,  1393,  1507,  1507,
    1507,   657,   657,   214,   260,   386,  1296,  1295,  1204,  1345,
    1346,  1347,  1005,   724,   725,  1622,  1682,  1521,   717,   657,
    1058,  1058,  1096,  1055,  1336,  1524,  1098,  1097,   132,  1339,
    1525,  1528,   885,  1059,  1059,   656,   657,  1059,   657,   657,
     913,    54,   366,   461,   493,  1037,  1037,   657,  1337,  1207,
     984,  1634,    66,   383,    66,  1210,  1145,  1407,  1398,  1010,
     911,   656,   922,   923,   924,   325,   920,   923,  1525,  1525,
     931,   657,   658,   953,    50,    50,   656,   656,  1210,   657,
     658,  1676,   140,   776,   197,   150,  1634,   657,   657,  1059,
    1045,   657,  1046,  1047,   657,     5,   132,   369,   376,   376,
     657,   657,   383,   383,  1486,   657,   658,   325,   926,   927,
    1213,   932,  1530,   930,  1302,  1304,  1205,  1347,   723,  1204,
     718,  1032,  1045,   657,  1045,   602,   136,   404,   622,   979,
     474,  1497,   923,   658,   925,   933,   657,   657,  1677,  1668,
    1045,  1037,  1037,    83,   597,   980,   981,   982,   232,  1491,
     927,   657,   776,   156,  1525,   263,   982,    50,  1494,   476,
    1507,   236,  1498,  1669,   370,   656,  1500,   776,   279,   474,
    1499,   657,   663,  1501,  1502,  1518,   493,  1503,  1530,   657,
     658,  1504,  1505,  1518,  1502,   658,  1392,  1505,  1204,  1398,
    1205
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 2024 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
              my_yyabort_error((ER_EMPTY_QUERY, MYF(0)));

            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 2033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 2058 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2137 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2151 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2160 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 2175 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 2181 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)thd->memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr,
                                                               thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 2209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HELP"));
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2225 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2229 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2239 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2251 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2255 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2259 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2268 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2280 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2284 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2293 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2298 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
               my_yyabort_error((ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0),
                                 SLAVE_MAX_HEARTBEAT_PERIOD));

            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2325 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2329 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_do_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2333 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2348 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2361 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_do_domain_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2374 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_domain_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, (yyvsp[(3) - (3)].ulonglong_number));
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2410 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2422 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2440 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
              my_yyabort_error((ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME"));
#endif
         }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2453 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->create_info.init();
            if (lex->set_command_with_check(SQLCOM_CREATE_TABLE, (yyvsp[(2) - (5)].num), (yyvsp[(1) - (5)].object_ddl_options) | (yyvsp[(4) - (5)].object_ddl_options)))
               MYSQL_YYABORT;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.default_table_charset= NULL;
            lex->name= null_lex_str;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.use_default_db_type(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER_THD(thd, ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2491 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (8)].key_type), (yyvsp[(5) - (8)].lex_str), (yyvsp[(6) - (8)].key_alg), (yyvsp[(1) - (8)].object_ddl_options) | (yyvsp[(4) - (8)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2498 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2501 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (7)].key_type), (yyvsp[(5) - (7)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(4) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2508 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2511 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (7)].key_type), (yyvsp[(5) - (7)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(4) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2518 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2520 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->set_command_with_check(SQLCOM_CREATE_DB, 0, (yyvsp[(1) - (6)].object_ddl_options) | (yyvsp[(3) - (6)].object_ddl_options)))
               MYSQL_YYABORT;
            lex->name= (yyvsp[(4) - (6)].lex_str);
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.set((yyvsp[(1) - (1)].object_ddl_options));
            Lex->create_view_mode= ((yyvsp[(1) - (1)].object_ddl_options).or_replace() ? VIEW_CREATE_OR_REPLACE :
                                                      VIEW_CREATE_NEW);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2539 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2541 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_USER, (yyvsp[(1) - (5)].object_ddl_options) | (yyvsp[(3) - (5)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2547 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_ROLE, (yyvsp[(1) - (6)].object_ddl_options) | (yyvsp[(3) - (6)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2556 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2559 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->set_command(SQLCOM_CREATE_SERVER, (yyvsp[(1) - (1)].object_ddl_options)); }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2561 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2566 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(2) - (3)].object_ddl_options)))
              MYSQL_YYABORT;
            Lex->server_options.reset((yyvsp[(3) - (3)].lex_str));
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2573 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->server_options.scheme= (yyvsp[(8) - (12)].lex_str); }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.username.str == 0);
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2588 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.host.str == 0);
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2593 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.db.str == 0);
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2598 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.owner.str == 0);
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2603 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.password.str == 0);
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2608 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.socket.str == 0);
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2613 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            if (lex->add_create_options_with_check((yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2640 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2651 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2664 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2678 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2687 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, 0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2694 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2702 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2708 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2714 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion= (yyvsp[(3) - (4)].num)
                                    ? Event_parse_data::ON_COMPLETION_DROP
                                    : Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2723 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2732 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
              my_yyabort_error((ER_EVENT_RECURSION_FORBIDDEN, MYF(0)));
              
            if (!make_sp_head(thd, lex->event_parse_data->identifier, TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2763 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2791 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2802 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2819 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2820 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2824 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2825 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2831 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2833 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2835 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2837 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2839 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2841 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2843 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2848 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2849 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= ! (yyvsp[(1) - (2)].num); }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2854 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2858 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2865 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2873 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 2889 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root);
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2893 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2911 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (1)].lex_str).str));

            sp_variable *spvar= spc->add_variable(thd, (yyvsp[(1) - (1)].lex_str));

            lex->init_last_field(&spvar->field_def, (yyvsp[(1) - (1)].lex_str).str,
                                 thd->variables.collation_database);
            (yyval.spvar)= spvar;
          }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2925 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_variable *spvar= (yyvsp[(2) - (3)].spvar);

            spvar->type= (yyvsp[(3) - (3)].field_type);
            if (lex->sphead->fill_field_definition(thd, lex, (yyvsp[(3) - (3)].field_type),
                                                   lex->last_field))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

            (yyval.spvar)= spvar;
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2954 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyvsp[(2) - (2)].spvar)->mode=(yyvsp[(1) - (2)].spvar_mode); }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2958 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2959 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2960 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_OUT; }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2961 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_INOUT; }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2965 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2970 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2980 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
              my_yyabort_error((ER_SP_VARCOND_AFTER_CURSHNDLR, MYF(0)));
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
              my_yyabort_error((ER_SP_CURSOR_AFTER_HANDLER, MYF(0)));
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;

            // get the last variable:
            uint num_vars= pctx->context_var_count();
            uint var_idx= pctx->var_context2runtime(num_vars - 1);
            sp_variable *spvar= pctx->find_variable(var_idx);

            lex->sphead->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
            thd->lex->init_last_field(&spvar->field_def, spvar->name.str,
                                      thd->variables.collation_database);
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3014 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (yyvsp[(4) - (5)].field_type);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null(thd);
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
              bool last= i == num_vars - 1;
            
              if (!spvar)
                MYSQL_YYABORT;
            
              if (!last)
                spvar->field_def= *lex->last_field;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
              spvar->field_def.field_name= spvar->name.str;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new (thd->mem_root)
                                  sp_instr_set(lex->sphead->instructions(),
                                               pctx, var_idx, dflt_value_item,
                                               var_type, lex, last);
              if (is == NULL || lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3070 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str));
            if(spc->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3082 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new (thd->mem_root) sp_instr_hpush_jump(sp->instructions(),
                   ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3109 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
              my_yyabort_error((ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str));

            i= new (thd->mem_root)
                 sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                ctx->current_cursor_count());
            if (i == NULL || sp->add_instr(i) || ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3162 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
              my_yyabort_error((ER_SP_BAD_CURSOR_SELECT, MYF(0)));
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3181 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3182 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3188 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3190 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3195 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
              my_yyabort_error((ER_SP_DUP_HANDLER, MYF(0)));

            sp_instr_hpush_jump *i= (sp_instr_hpush_jump *)sp->last_instruction();
            i->add_condition((yyvsp[(1) - (1)].spcondvalue));
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3210 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
              my_yyabort_error((ER_WRONG_VALUE, MYF(0), "CONDITION", "0"));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3222 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
              my_yyabort_error((ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3240 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3241 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3246 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3250 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3262 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3268 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3291 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;

            /* SIGNAL foo cannot be used outside of stored programs */
            if (lex->spcont == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            if (cond->type != sp_condition_value::SQLSTATE)
              my_yyabort_error((ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0)));
            (yyval.spcondvalue)= cond;
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3306 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3311 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3313 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3318 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3326 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3335 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
              my_yyabort_error((ER_DUP_SIGNAL_SET, MYF(0),
                                Diag_condition_item_names[index].str));
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3351 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3371 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3377 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3379 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3381 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3383 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3385 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3387 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3389 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3391 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3393 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3395 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3397 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3399 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3419 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3434 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3436 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3441 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3456 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3462 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3471 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3488 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3497 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3499 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3508 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3513 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3519 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3528 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3536 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3538 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3540 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3542 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3544 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3546 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3548 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3550 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3552 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3554 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3556 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3558 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3560 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            spc->add_variable(thd, (yyvsp[(1) - (1)].lex_str));
            (yyval.num)= 1;
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3577 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
            spc->add_variable(thd, (yyvsp[(3) - (3)].lex_str));
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3591 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3592 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3618 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sphead->new_cont_backpatch(NULL);
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3624 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3628 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            /* "USE db" doesn't work in a procedure */
            if (lex->sql_command == SQLCOM_CHANGE_DB)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "USE"));
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new (thd->mem_root)
                sp_instr_stmt(sp->instructions(), lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3681 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
              my_yyabort_error((ER_SP_BADRETURN, MYF(0)));

            sp_instr_freturn *i;

            i= new (thd->mem_root)
                 sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                  sp->m_return_field_def.sql_type, lex);
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;
            sp->m_flags|= sp_head::HAS_RETURN;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3706 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;
            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., SP_LAB_ITER),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            n= ctx->diff_handlers(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(hpop);
            }
            n= ctx->diff_cursors(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(cpop);
            }
            i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->push_backpatch(i, lab);  /* Jumping forward */
            sp->add_instr(i);
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3756 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;

            n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL ||
                  sp->add_instr(hpop))
                MYSQL_YYABORT;
            }
            n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL ||
                  sp->add_instr(cpop))
                MYSQL_YYABORT;
            }
            i= new (thd->mem_root)
              sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3797 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3815 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3830 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3835 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3859 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3873 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3889 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, ctx, (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3907 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0));
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3919 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;

            /**
              An example of the CASE statement in use is
            <pre>
            CREATE PROCEDURE proc_19194_simple(i int)
            BEGIN
              DECLARE str CHAR(10);

              CASE i
                WHEN 1 THEN SET str="1";
                WHEN 2 THEN SET str="2";
                WHEN 3 THEN SET str="3";
                ELSE SET str="unknown";
              END CASE;

              SELECT str;
            END
            </pre>
              The actions are used to generate the following code:
            <pre>
            SHOW PROCEDURE CODE proc_19194_simple;
            Pos     Instruction
            0       set str@1 NULL
            1       set_case_expr (12) 0 i@0
            2       jump_if_not 5(12) (case_expr@0 = 1)
            3       set str@1 _latin1'1'
            4       jump 12
            5       jump_if_not 8(12) (case_expr@0 = 2)
            6       set str@1 _latin1'2'
            7       jump 12
            8       jump_if_not 11(12) (case_expr@0 = 3)
            9       set str@1 _latin1'3'
            10      jump 12
            11      set str@1 _latin1'unknown'
            12      stmt 0 "SELECT str"
            </pre>
            */

            Lex->sphead->new_cont_backpatch(NULL);

            /*
              BACKPATCH: Creating target label for the jump to after END CASE
              (instruction 12 in the example)
            */
            Lex->spcont->push_label(thd, empty_lex_str, Lex->sphead->instructions());
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 3987 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              BACKPATCH: Resolving forward jump from
              "case_stmt_action_then" to after END CASE
              (jump from instruction 4 to 12, 7 to 12 ... in the example)
            */
            Lex->sphead->backpatch(Lex->spcont->pop_label());

            if ((yyvsp[(3) - (6)].num))
              Lex->spcont->pop_case_expr_id();

            Lex->sphead->do_cont_backpatch();
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4003 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); /* For expr $2 */ }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4005 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (case_stmt_action_expr(Lex, (yyvsp[(2) - (2)].item)))
              MYSQL_YYABORT;

            if (Lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4013 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4015 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4030 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4034 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4046 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4055 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4059 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4069 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4078 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new (thd->mem_root)
              sp_instr_error(ip, lex->spcont, ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4092 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4093 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (3)].lex_str));

            if (lab)
              my_yyabort_error((ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            lex->name= (yyvsp[(1) - (3)].lex_str);
          }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4108 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(6) - (6)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(6) - (6)].lex_str).str, (yyvsp[(5) - (6)].splabel)->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(6) - (6)].lex_str).str));
            }
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4123 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4134 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->push_label(thd, lex->name,
                                                   lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4149 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(2) - (4)].spblock).hndlrs)
            {
              i= new (thd->mem_root)
                sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(2) - (4)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (4)].spblock).curs)
            {
              i= new (thd->mem_root)
                sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(2) - (4)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
            (yyval.splabel) = lex->spcont->pop_label();
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4179 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4193 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[(1) - (2)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4224 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4226 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[(4) - (6)].item), lab->ip, lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            if ((yyvsp[(1) - (1)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(1) - (1)].lex_str).str,
                                lab->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            }
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4257 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            DBUG_ASSERT(lab->name.length == 0);
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4266 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4271 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4273 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4279 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 4286 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 4291 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4297 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4299 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 4306 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4308 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 4314 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 4319 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 4321 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 4326 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4328 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 4330 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 4364 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 4366 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 400:

/* Line 1455 of yacc.c  */
#line 4376 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 4382 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 4405 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4499 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4523 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4536 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4549 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4554 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4567 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4575 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4591 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4599 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP"));
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT"));
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4635 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE, MYF(0),
                                "STORAGE ENGINE"));
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4651 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT"));
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4665 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4667 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                  my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
              }
              if (prefix_number >> 31)
                my_yyabort_error((ER_SIZE_OVERFLOW_ERROR, MYF(0)));
              number= prefix_number << text_shift_number;
            }
            else
              my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
            (yyval.ulonglong_number)= number;
          }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4709 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4710 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4711 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4717 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4717 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4719 "/home/buildbot/git/sql/sql_yacc.yy"
    {

            Lex->create_info.add(DDL_options_st::OPT_LIKE);
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4732 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4733 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4737 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4739 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4740 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4742 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4743 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4748 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4784 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4790 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4808 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
              my_yyabort_error((ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                                "--skip-partition"));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), "partitioning",
                              "--with-plugin-partition"));
#endif
          }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4823 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(thd, ER_PARTITION_ENTRY_ERROR);
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4835 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4844 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4851 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4852 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4854 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4856 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4858 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4860 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4864 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4866 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4871 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4873 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4889 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4890 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4894 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4895 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of partition fields"));
          }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4926 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4937 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4945 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4947 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "partitions"));

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4959 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 4961 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 4962 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 4965 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 4970 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 4974 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 4975 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 4980 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of subpartition fields"));
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 4995 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5010 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5012 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "subpartitions"));
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5024 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "RANGE"));
            if (part_info->part_type == LIST_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "LIST"));
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5034 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_PART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5055 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5056 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new (thd->mem_root) partition_element();

            if (!p_elem ||
                 part_info->partitions.push_back(p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5081 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5086 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5097 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
              if (part_info->part_type == LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5113 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5125 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5127 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5139 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5165 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5170 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val(thd))
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5199 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(thd, ER_ROW_SINGLE_PARTITION_FIELD_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5210 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5211 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5227 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5229 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5252 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5253 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(thd, ER_MAXVALUE_IN_VALUES_IN);
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5271 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5291 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5330 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5331 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5336 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new (thd->mem_root)
                                           partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5369 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5374 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5382 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5383 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5387 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5388 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5393 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5407 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5409 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5411 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5413 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5415 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5417 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5426 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5441 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5445 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5455 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5456 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5460 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5461 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5465 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5466 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5470 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5471 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5476 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5480 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).init();
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5491 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_NOT_EXISTS);
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5498 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).init();
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5502 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_OR_REPLACE);
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5530 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5535 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5540 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5545 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5550 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5560 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5575 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5581 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5596 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5601 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5616 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5622 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5640 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5645 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5650 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5660 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5665 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5670 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5674 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5698 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5703 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5713 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5715 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5717 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5719 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5730 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5735 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5743 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5751 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5766 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[(4) - (4)].charset)))
              MYSQL_YYABORT;
          }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5774 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5791 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                                            thd->lex->create_info.tmp_table());

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
                my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER_THD(thd, ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str), false)))
              (yyval.db_type)= plugin_hton(plugin);
            else
              my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5822 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5823 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5824 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5825 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5826 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5827 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5828 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5832 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5833 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5834 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5838 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5839 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5840 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5841 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5847 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5869 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].key_alg), (yyvsp[(2) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5874 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5876 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[(3) - (5)].lex_str), (yyvsp[(5) - (5)].key_alg), (yyvsp[(2) - (5)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5881 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5883 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(1) - (4)].key_type), (yyvsp[(4) - (4)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5888 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(1) - (4)].key_type), (yyvsp[(4) - (4)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5895 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5899 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(2) - (5)].key_type), (yyvsp[(4) - (5)].lex_str).str ? (yyvsp[(4) - (5)].lex_str) : (yyvsp[(1) - (5)].lex_str), (yyvsp[(5) - (5)].key_alg), (yyvsp[(3) - (5)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5904 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5907 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(2) - (6)].key_type), (yyvsp[(4) - (6)].lex_str).str ? (yyvsp[(4) - (6)].lex_str) : (yyvsp[(1) - (6)].lex_str), (yyvsp[(6) - (6)].key_alg), (yyvsp[(3) - (6)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5912 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5914 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->check_add_key((yyvsp[(4) - (5)].object_ddl_options)) ||
               !(Lex->last_key= (new (thd->mem_root)
                                 Key(Key::MULTIPLE, (yyvsp[(1) - (5)].lex_str).str ? (yyvsp[(1) - (5)].lex_str) : (yyvsp[(5) - (5)].lex_str),
                                     HA_KEY_ALG_UNDEF, true, (yyvsp[(4) - (5)].object_ddl_options)))))
              MYSQL_YYABORT;
            Lex->option_list= NULL;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5923 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= (new (thd->mem_root)
                       Foreign_key((yyvsp[(5) - (10)].lex_str).str ? (yyvsp[(5) - (10)].lex_str) : (yyvsp[(1) - (10)].lex_str),
                                   lex->last_key->columns,
                                   (yyvsp[(10) - (10)].table)->db,
                                   (yyvsp[(10) - (10)].table)->table,
                                   lex->ref_list,
                                   lex->fk_delete_opt,
                                   lex->fk_update_opt,
                                   lex->fk_match_option,
                                    (yyvsp[(4) - (10)].object_ddl_options)));
            if (key == NULL)
              MYSQL_YYABORT;
            /*
              handle_if_exists_options() expectes the two keys in this order:
              the Foreign_key, followed by its auto-generated Key.
            */
            lex->alter_info.key_list.push_back(key, thd->mem_root);
            lex->alter_info.key_list.push_back(Lex->last_key, thd->mem_root);
            lex->option_list= NULL;

            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5948 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5961 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5962 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5966 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5971 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Create_field *f= new (thd->mem_root) Create_field();

            if (check_string_char_length(&(yyvsp[(1) - (1)].lex_str), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(1) - (1)].lex_str).str));

            if (!f)
              MYSQL_YYABORT;

            lex->init_last_field(f, (yyvsp[(1) - (1)].lex_str).str, NULL);
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5984 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->set_last_field_type((yyvsp[(3) - (3)].field_type)); }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5986 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Create_field *f= lex->last_field;

            if (f->check(thd))
              MYSQL_YYABORT;

            lex->alter_info.create_list.push_back(f, thd->mem_root);

            if (f->flags & PRI_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[(1) - (5)].lex_str), Key::PRIMARY, Lex->check_exists);
            else if (f->flags & (UNIQUE_FLAG | UNIQUE_KEY_FLAG))
              add_key_to_list(lex, &(yyvsp[(1) - (5)].lex_str), Key::UNIQUE, Lex->check_exists);
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6010 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6011 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6016 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6020 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6024 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6030 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6031 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6035 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6041 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6047 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6052 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6057 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
              my_yyabort_error((ER_SYNTAX_ERROR, MYF(0)));
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6070 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Virtual_column_info *v= new (thd->mem_root) Virtual_column_info();
            if (!v)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            v->expr_str.str= (char* ) thd->memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            v->expr_str.length= expr_len;
            v->expr_item= (yyvsp[(2) - (3)].item);
            Lex->last_field->vcol_info= v;
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6086 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=(yyvsp[(1) - (3)].field_type); }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6087 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=(yyvsp[(1) - (3)].field_type); }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6089 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)=MYSQL_TYPE_FLOAT;
            if (Lex->length && !Lex->dec)
            {
              int err;
              ulonglong tmp_length= my_strtoll10(Lex->length, NULL, &err);
              if (err || tmp_length > PRECISION_FOR_DOUBLE)
                my_yyabort_error((ER_WRONG_FIELD_SPEC, MYF(0),
                                  Lex->last_field->field_name));
              if (tmp_length > PRECISION_FOR_FLOAT)
                (yyval.field_type)= MYSQL_TYPE_DOUBLE;
              Lex->length= 0;
            }
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_BIT;
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6109 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)=MYSQL_TYPE_BIT;
          }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6113 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_TINY;
          }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6118 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_TINY;
          }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6123 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6127 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6132 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)=MYSQL_TYPE_STRING;
            bincmp_collation(national_charset_info, (yyvsp[(3) - (3)].num));
          }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6137 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_STRING;
            bincmp_collation(national_charset_info, (yyvsp[(2) - (2)].num));
          }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6143 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6148 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6154 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6158 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
            bincmp_collation(national_charset_info, (yyvsp[(3) - (3)].num));
          }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6168 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER_THD(thd, ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.field_type)=MYSQL_TYPE_YEAR;
          }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6186 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_DATE; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6188 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)= opt_mysql56_temporal_format ?
                MYSQL_TYPE_TIME2 : MYSQL_TYPE_TIME; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6191 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.field_type)= opt_mysql56_temporal_format ?
                  MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                Unless --explicit-defaults-for-timestamp is given.
              */
              if (!opt_explicit_defaults_for_timestamp)
                Lex->last_field->flags|= NOT_NULL_FLAG;
              (yyval.field_type)= opt_mysql56_temporal_format ? MYSQL_TYPE_TIMESTAMP2
                                              : MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6208 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)= opt_mysql56_temporal_format ?
                MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6211 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_BLOB;
          }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6221 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->last_field->geom_type= (yyvsp[(1) - (3)].geom_type);
            (yyval.field_type)=MYSQL_TYPE_GEOMETRY;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6237 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6242 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6247 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6249 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6251 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_BLOB; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6253 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6255 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6257 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6261 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6263 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_ENUM; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6265 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_SET; }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6267 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)=MYSQL_TYPE_LONGLONG;
            Lex->last_field->flags|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6277 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_GEOMETRY; }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6278 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6280 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.geom_type)= Field::GEOM_POINT;
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6285 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTIPOINT; }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6286 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_LINESTRING; }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6287 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTILINESTRING; }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6288 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_POLYGON; }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6289 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6293 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6297 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6298 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6302 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6303 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6307 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6308 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6309 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6310 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6311 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6315 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_LONG; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6316 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_TINY; }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6317 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_SHORT; }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6318 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_INT24; }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6319 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_LONGLONG; }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6324 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6329 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6331 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6336 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->srid= 0; }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->srid=atoi((yyvsp[(3) - (3)].lex_str).str);
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6346 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6348 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6350 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6355 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6363 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6364 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6368 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6373 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6374 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= UNSIGNED_FLAG;}
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6375 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6379 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6380 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6381 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6382 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6385 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6386 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6390 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6391 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6395 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6396 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6400 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6405 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags&= ~ NOT_NULL_FLAG; }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6406 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= NOT_NULL_FLAG; }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6407 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->def= (yyvsp[(2) - (2)].item); }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6409 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->last_field->on_update= item;
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6415 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6417 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6423 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6429 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6435 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6440 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6442 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname));
            Lex->last_field->charset= (yyvsp[(2) - (2)].charset);
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6449 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6465 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->last_field->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6471 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->last_field->option_list, &Lex->option_list_last);
          }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6480 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.field_type)= (yyvsp[(1) - (2)].field_type);

          if ((yyvsp[(2) - (2)].charset))
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          Lex->set_last_field_type((yyvsp[(1) - (2)].field_type));
        }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6495 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6501 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6505 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6506 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6511 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6515 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6519 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6520 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6524 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6525 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6530 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6535 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6539 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6540 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6545 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6552 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6553 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6557 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6558 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6562 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6563 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6567 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6568 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_latin1; }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6570 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2"));
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6577 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(NULL, false); }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6578 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(&my_charset_bin, false); }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6579 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation((yyvsp[(1) - (2)].charset), (yyvsp[(2) - (2)].num)); }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6580 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(NULL, true); }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6581 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation((yyvsp[(2) - (2)].charset), true); }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6585 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6586 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6591 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(thd, ER_SYNTAX_ERROR);
            MYSQL_YYABORT;
          }
        }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6599 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6603 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6604 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6608 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6611 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6612 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6613 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6614 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6627 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6634 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6639 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6648 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6649 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6653 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6654 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6675 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6681 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key, thd->mem_root);
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6688 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key, thd->mem_root);
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6700 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6702 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6704 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6706 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6717 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6723 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6730 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6737 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6745 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6746 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6747 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6748 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6749 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6753 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6754 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6758 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6759 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6763 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6768 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6769 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6770 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6774 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6775 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6779 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6784 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6795 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6796 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6800 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6801 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6805 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6806 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6825 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6826 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6830 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6831 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6832 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6836 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6838 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6843 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6845 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6847 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6855 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6863 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6869 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->last_key->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
              my_yyabort_error((ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6896 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6897 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6898 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_key->columns.push_back((yyvsp[(3) - (4)].key_part), thd->mem_root);
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6907 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_key->columns.push_back((yyvsp[(1) - (2)].key_part), thd->mem_root);
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6914 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6920 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
              my_yyabort_error((ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str));
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6931 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6932 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 6936 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6937 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6942 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->interval_list.push_back((yyvsp[(1) - (1)].string), thd->mem_root); }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6944 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->interval_list.push_back((yyvsp[(3) - (3)].string), thd->mem_root); }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6952 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->name= null_lex_str;
            Lex->only_view= FALSE;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->select_lex.init_order();
            Lex->create_info.init();
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 6976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 6986 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6991 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7000 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "DATABASE"));
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7016 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7031 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7038 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7046 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7053 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7062 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7064 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(5) - (5)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_begin= (yyvsp[(3) - (5)].simple_string);
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7085 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(7) - (11)].num) || (yyvsp[(8) - (11)].num) || (yyvsp[(9) - (11)].num) || (yyvsp[(10) - (11)].num) || (yyvsp[(11) - (11)].num)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7099 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7109 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7114 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.reset((yyvsp[(3) - (3)].lex_str));
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7123 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7127 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7128 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7129 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7130 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7134 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7136 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7147 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7148 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7152 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7153 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7159 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7167 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7189 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
            DBUG_ASSERT(!Lex->if_exists());
            Lex->create_info.add((yyvsp[(3) - (4)].object_ddl_options));
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7203 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7227 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7239 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7251 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7296 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7303 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            DBUG_ASSERT(!Lex->create_info.if_not_exists());
            lex->create_info.set((yyvsp[(3) - (4)].object_ddl_options));
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7326 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7344 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7363 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7367 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7374 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7375 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7380 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str,
                                                          thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7409 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7413 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7418 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7424 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->last_field->change= (yyvsp[(4) - (6)].lex_str).str;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->last_field->change= Lex->last_field->field_name;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7437 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, primary_key_name,
                                        FALSE));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7478 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7484 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7490 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new (thd->mem_root) Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7499 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= (new (thd->mem_root)
                               Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7509 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str));
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname));
            if (Lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[(5) - (5)].charset)))
              MYSQL_YYABORT;
            Lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7539 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7549 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7553 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7570 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7575 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7588 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7595 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7596 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7600 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7601 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7605 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7619 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7621 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7628 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7629 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7630 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7634 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7648 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7649 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7650 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7651 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7663 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7665 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7670 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7679 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7689 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7705 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7709 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7716 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7720 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7727 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7731 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7735 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7741 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7743 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7752 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7753 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7754 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7758 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7760 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
               my_yyabort_error((ER_BAD_SLAVE_UNTIL_COND, MYF(0)));
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7781 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7788 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7792 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7793 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7794 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7799 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7804 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7814 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7824 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7825 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7829 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7830 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7834 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7835 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7836 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7840 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7841 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7846 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7856 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7876 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7878 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7885 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7887 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7890 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7892 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->column_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7903 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7905 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->index_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7917 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7919 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7924 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7932 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7939 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back((LEX_STRING*)
                                        thd->memdup(&str, sizeof(LEX_STRING)),
                                        thd->mem_root);
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7964 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 7968 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 7978 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "CHECK"));
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 7990 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7991 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7995 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7996 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8000 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8001 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8002 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8003 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8004 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8005 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8009 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8010 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8015 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8025 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8035 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8036 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8037 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8042 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8046 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8055 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8075 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8088 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8111 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8121 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8130 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8131 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8136 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8157 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8167 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8177 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8184 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8193 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8199 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8200 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8210 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8223 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8231 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8240 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(true);
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8245 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8254 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* Parentheses carry no meaning here */
            lex->current_select->set_braces(false);
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8284 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (11)].num) && (yyvsp[(10) - (11)].num))         /* double "INTO" clause */
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "INTO", "INTO"));

            if ((yyvsp[(9) - (11)].num) && ((yyvsp[(2) - (11)].num) || (yyvsp[(10) - (11)].num))) /* "INTO" with "PROCEDURE ANALYSE" */
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO"));
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8302 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8329 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8344 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT"));
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8358 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE"));

            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8375 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE"));

            Lex->safe_to_cache_query=1;
            Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8396 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8403 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(thd, &thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8435 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
                my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str));
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8456 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_start();
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8462 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8474 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8475 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8476 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8477 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8478 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8482 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8483 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8484 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8488 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8489 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8490 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8494 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8495 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8501 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item), thd->mem_root);
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item), thd->mem_root);
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item)= new (thd->mem_root) Item_cond_or(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item)= new (thd->mem_root) Item_func_xor(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item), thd->mem_root);
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item), thd->mem_root);
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item)= new (thd->mem_root) Item_cond_and(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8608 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8626 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8632 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8638 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8654 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8660 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator(thd, (yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8682 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8688 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8703 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item), thd->mem_root);
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_in(thd, *(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8717 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item), thd->mem_root);
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item), thd->mem_root);
            Item_func_in *item= new (thd->mem_root) Item_func_in(thd, *(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8727 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between(thd, (yyvsp[(1) - (5)].item), (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8733 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between(thd, (yyvsp[(1) - (6)].item), (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(thd, item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8752 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[(1) - (4)].item), (yyvsp[(3) - (4)].item), (yyvsp[(4) - (4)].item),
                                                   Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8759 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8775 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex(thd, (yyvsp[(1) - (4)].item), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8800 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8806 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8818 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8830 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8836 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8854 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8866 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 8895 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 8896 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 8897 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8898 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 8899 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 8900 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 8904 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8905 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8910 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8916 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8921 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 8928 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 8935 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 8942 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 8949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 8956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 8961 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= thd->variables.collation_connection; }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 8963 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 8969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 8976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 8983 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 8991 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9002 "/home/buildbot/git/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9024 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def), thd->mem_root);
       }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9031 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def), thd->mem_root);
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9044 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string(thd, (yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation(thd, (yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9055 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item_param); }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9059 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9065 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9069 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9075 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9087 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect(thd, (yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9093 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9095 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9102 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9109 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect(thd, (yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9115 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[(3) - (4)].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[(2) - (4)].lex_str));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9139 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item), thd->mem_root);
            Item_func_match *i1= new (thd->mem_root) Item_func_match(thd, *(yyvsp[(2) - (7)].item_list),
                                                                     (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(thd, i1);
            (yyval.item)= i1;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9149 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9156 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9164 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(thd, *(yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9170 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9177 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9183 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_splocal *il= (yyvsp[(3) - (4)].item)->get_item_splocal();
            if (il)
              my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str));
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9193 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(thd, Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(5) - (5)].item), (yyvsp[(2) - (5)].item), (yyvsp[(3) - (5)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9228 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9237 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9246 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9252 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert(thd, (yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].item), (yyvsp[(7) - (10)].item), (yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item), thd->mem_root);
            list->push_front((yyvsp[(3) - (6)].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9284 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item), thd->mem_root);
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9295 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9301 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9307 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9313 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9319 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9325 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast(thd, (yyvsp[(3) - (4)].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast(thd, (yyvsp[(3) - (4)].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9351 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9357 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9363 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9375 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9387 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(5) - (6)].item), (yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9422 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9429 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9435 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9442 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9450 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9463 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract(thd, (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9469 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format(thd, (yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9475 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9482 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_locate(thd, (yyvsp[(5) - (6)].item), (yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9488 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9495 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9501 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9513 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9519 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local(thd, (yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9543 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(7) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(3) - (8)].interval_time_st), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9549 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff(thd, (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item), (yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9562 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9569 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9577 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9584 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9591 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9598 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9605 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9622 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9628 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(thd, *(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9640 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9646 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9653 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9659 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9665 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9671 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9689 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root)
              Item_func_password(thd, (yyvsp[(3) - (4)].item), Item_func_password::OLD);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9696 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item* i1;
            i1= new (thd->mem_root) Item_func_password(thd, (yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9704 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_quarter(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9710 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9716 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9722 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9728 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9736 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1;
            LEX_STRING name= {C_STRING_WITH_LEN("default_week_format")};
            if (!(i1= get_system_var(thd, OPT_SESSION,
                                     name, null_lex_str)))
              MYSQL_YYABORT;
            i1->set_name((const char *)
                         STRING_WITH_LEN("@@default_week_format"),
                         system_charset_info);
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9756 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9762 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9768 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, (yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_char_typecast(thd, (yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num),
                                                               &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, item, 0, (yyvsp[(6) - (7)].ulong_num),
                                        MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num),
                                                            (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9795 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9810 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_precise_rel(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                 Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9823 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 9830 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 9837 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 9844 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 9851 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item)));
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 9855 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 9874 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 9893 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 9946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str));
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 9984 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 9986 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 9990 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 9991 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 9995 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 9996 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10000 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10001 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10013 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10021 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10054 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10060 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10066 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10078 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int(thd, (int32) 0L, 1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10087 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10093 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10095 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10097 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, *(yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10103 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10114 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10120 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10132 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10150 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10156 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10162 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10168 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10172 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(thd, Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10187 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10192 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10199 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item, thd->mem_root);
          }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10217 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10232 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10233 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10238 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10243 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_yyabort_error((ER_WRONG_USAGE, MYF(0),
                                "CUBE/ROLLUP", "ORDER BY"));
            }
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10265 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10267 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10289 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10291 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= thd->variables.collation_connection; }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10293 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10295 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10297 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10299 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10301 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10303 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10305 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10307 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10309 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10315 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10321 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10323 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10325 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10328 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10329 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10334 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10341 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10348 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10349 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10354 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10361 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10368 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10369 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10373 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10374 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10379 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item), thd->mem_root);
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item), thd->mem_root);
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10387 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item), thd->mem_root);
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10397 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10399 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(thd)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10410 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10421 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10422 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10428 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10450 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10453 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10461 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on(thd, (yyvsp[(3) - (6)].table_list), (yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10469 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10473 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10488 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            add_join_on(thd, (yyvsp[(5) - (8)].table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10508 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10514 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10524 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on(thd, (yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10541 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10545 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10563 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10564 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10565 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10569 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10570 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10578 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10584 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10598 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10603 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10650 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new (thd->mem_root) Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10735 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].num))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10745 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();

            if ((yyvsp[(1) - (5)].table_list) != NULL)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10768 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10780 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10796 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(thd))
              MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10801 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10840 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10845 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
              my_yyabort_error((ER_VIEW_SELECT_DERIVED, MYF(0)));

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(thd))
            {
              /* we are not in parentheses */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10867 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10868 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10873 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10876 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10877 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10878 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10882 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 10883 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 10893 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10906 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10910 "/home/buildbot/git/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10915 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10916 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10921 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10923 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10933 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new (thd->mem_root) List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s, thd->mem_root);
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10944 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s, thd->mem_root);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10956 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10957 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10958 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10959 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10960 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10961 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10962 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10963 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10964 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10965 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10966 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10967 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10971 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10972 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10973 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10974 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10975 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10976 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10977 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10978 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10979 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10983 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10984 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10985 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10986 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10996 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) thd->memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11011 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11013 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11017 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11029 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11044 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string_ascii(thd, "", 0) :
                 new (thd->mem_root) Item_string_ascii(thd, "\\", 1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11070 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11072 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11076 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11078 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                                "global union parameters"));
            lex->current_select->olap= CUBE_TYPE;

            my_yyabort_error((ER_NOT_SUPPORTED_YET, MYF(0), "CUBE"));
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11095 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                                "global union parameters"));
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE &&
                !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(thd))
                MYSQL_YYABORT;
            }
            if (sel->master_unit()->is_union() && !sel->braces)
            {
               /*
                 At this point we don't know yet whether this is the last
                 select in union or not, but we move ORDER BY to
                 fake_select_lex anyway. If there would be one more select
                 in union mysql_new_select will correctly throw error.
               */
               DBUG_ASSERT(sel->master_unit()->fake_select_lex);
               lex->current_select= sel->master_unit()->fake_select_lex;
             }
          }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11187 "/home/buildbot/git/sql/sql_yacc.yy"
    {

          }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11194 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11196 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11200 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11201 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11202 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11206 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11207 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11212 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            if (sel->master_unit()->is_union() && !sel->braces)
            {
              /* Move LIMIT that belongs to UNION to fake_select_lex */
              Lex->current_select= sel->master_unit()->fake_select_lex;
              DBUG_ASSERT(Select);
            }
          }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11225 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11233 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11237 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11251 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11268 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal(thd, (yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
            my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          if (splocal->type() != Item::INT_ITEM)
            my_yyabort_error((ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0)));
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11295 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyvsp[(1) - (1)].item_param)->limit_clause_param= TRUE;
        }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11299 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11311 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11320 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11327 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11338 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11339 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11343 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11344 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11345 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11349 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11350 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11351 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11352 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11353 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11354 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11358 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11359 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11360 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11361 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11362 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11366 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11367 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11368 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11369 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11370 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11374 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11375 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11376 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11377 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11378 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11383 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(thd, ER_ONLY_INTEGERS_ALLOWED); }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11392 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11393 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11397 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11399 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
              my_yyabort_error((ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE"));

            if (&lex->select_lex != lex->current_select)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery"));
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(thd, &lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11428 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
            (yyval.num)= true;
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11436 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11437 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11456 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                (!(lex->result= new (thd->mem_root) select_dumpvar(thd))))
              MYSQL_YYABORT;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11463 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11468 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11472 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->result)
            {
              if ((yyvsp[(1) - (1)].myvar) == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)Lex->result)->var_list.push_back((yyvsp[(1) - (1)].myvar), thd->mem_root);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(Lex->describe);
            }
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11492 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.myvar) = Lex->result ? new (thd->mem_root) my_var_user((yyvsp[(2) - (2)].lex_str)) : NULL;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_variable *t;

            if (!Lex->spcont || !(t= Lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            (yyval.myvar) = Lex->result ? (new (thd->mem_root)
                                my_var_sp((yyvsp[(1) - (1)].lex_str), t->offset, t->type,
                                          Lex->sphead)) :
                                NULL;
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11509 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11510 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
              my_yyabort_error((ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO"));
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11524 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange=
                    new (thd->mem_root) sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result=
                    new (thd->mem_root) select_export(thd, lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11534 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11537 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result=
                      new (thd->mem_root) select_dump(thd, lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11550 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11567 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11578 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_TABLE, (yyvsp[(2) - (4)].num), (yyvsp[(4) - (4)].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11585 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11586 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11587 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11604 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_DB, (yyvsp[(3) - (4)].object_ddl_options));
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11610 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
               my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str));
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[(3) - (6)].object_ddl_options));
            spname= new (thd->mem_root) sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[(3) - (4)].object_ddl_options));
            spname= new (thd->mem_root) sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            lex->set_command(SQLCOM_DROP_PROCEDURE, (yyvsp[(3) - (4)].object_ddl_options));
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11649 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_USER, (yyvsp[(3) - (5)].object_ddl_options));
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11653 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_ROLE, (yyvsp[(3) - (5)].object_ddl_options));
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11657 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_VIEW, (yyvsp[(3) - (3)].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11664 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->set_command(SQLCOM_DROP_EVENT, (yyvsp[(3) - (4)].object_ddl_options));
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11671 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_TRIGGER, (yyvsp[(3) - (4)].object_ddl_options));
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11682 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11687 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_SERVER, (yyvsp[(3) - (4)].object_ddl_options));
            Lex->server_options.reset((yyvsp[(4) - (4)].lex_str));
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11700 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11729 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11740 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11745 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11753 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_NONE);
        }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_EXISTS);
        }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11763 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11764 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11772 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11780 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11785 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11790 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11797 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11802 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11807 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11815 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11824 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11828 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11830 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11840 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11841 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11846 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11854 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11855 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11856 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11858 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list= new (thd->mem_root) List_item) ||
                lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11869 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root); }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11870 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root); }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11874 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11875 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11877 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11878 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11880 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11881 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11896 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item), thd->mem_root) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11905 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11906 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11910 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11911 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list= new (thd->mem_root) List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11921 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11929 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11935 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11947 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11958 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11992 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12002 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12015 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item), thd->mem_root) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12024 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12025 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12047 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12058 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12059 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12067 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12078 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12096 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new (thd->mem_root) Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12109 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12124 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12125 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12129 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12130 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12134 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12135 "/home/buildbot/git/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12136 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12152 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12176 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12180 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12184 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12188 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12192 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12200 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12208 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12215 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12219 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12228 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->create_info.init();
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12237 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12251 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12259 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12275 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12283 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12291 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12298 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12311 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12313 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12315 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12324 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12328 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12338 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12343 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12352 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12364 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12374 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12376 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12378 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12380 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12382 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12384 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              MYSQL_YYABORT;
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12391 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12399 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12409 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12423 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (4)].lex_user);
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12436 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_SHOW_CREATE_DB, (yyvsp[(3) - (4)].object_ddl_options));
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12441 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12449 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12461 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12466 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12478 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12485 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12492 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12498 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12505 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12512 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12517 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12527 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12534 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             bool in_plugin;
             lex->sql_command= SQLCOM_SHOW_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[(1) - (3)].lex_str).str, &in_plugin);
             if (!table || !table->old_format || !in_plugin)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[(2) - (3)].simple_string));
               MYSQL_YYABORT;
             }
             if (lex->wild && table->idx_field1 < 0)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[(3) - (3)].simple_string));
               MYSQL_YYABORT;
             }
             if (make_schema_select(thd, Lex->current_select, table))
               MYSQL_YYABORT;
           }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12556 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12558 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12560 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12574 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12575 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12579 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12580 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12589 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12590 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12594 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12595 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12599 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12601 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
            (yyval.simple_string)= (yyvsp[(2) - (3)].simple_string);
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
            (yyval.simple_string)= (yyvsp[(2) - (3)].simple_string);
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12631 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12635 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->analyze_stmt= true;
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12664 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12665 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12666 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12670 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
              Lex->explain_json= true;
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
              DBUG_ASSERT(Lex->explain_json==false);
            else
              my_yyabort_error((ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12683 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12684 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12686 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12700 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12707 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12712 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12722 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12727 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12729 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12742 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num); }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12744 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(thd, ER_NO_TABLES_USED);
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12751 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12757 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12762 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12764 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12766 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12768 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12770 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12772 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS"));
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12780 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12782 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12784 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12786 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name= empty_lex_str;
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12791 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12793 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE"));
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12801 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12803 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12805 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12807 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->type|= REFRESH_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[(1) - (2)].lex_str).str);
             if (!table || !table->reset_table)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[(2) - (2)].simple_string));
               MYSQL_YYABORT;
             }
             Lex->view_list.push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[(1) - (2)].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
           }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12822 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12823 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12827 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12828 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12832 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12837 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 12846 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 12848 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 12850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->type|= REFRESH_MASTER;
             Lex->next_binlog_file_number= 0;
          }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 12855 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 12859 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 12860 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 12864 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 12866 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->next_binlog_file_number = (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 12873 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 12879 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 12888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 12892 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item), thd->mem_root);
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 12904 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 12912 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 12918 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 12919 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 12920 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 12923 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 12924 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 12925 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 12927 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 12935 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item), thd->mem_root);
         }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 12939 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user), thd->mem_root);
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 12947 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 12954 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 12965 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 12976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 12986 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 12996 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13000 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13004 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13005 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13009 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13010 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13014 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13016 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13023 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13027 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13028 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13029 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13044 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13056 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13079 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13084 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13091 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13093 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13105 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13106 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13110 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13111 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13112 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13117 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root); }
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13119 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root); }
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13123 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13125 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param(thd, (yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13133 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13134 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item), thd->mem_root) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item), thd->mem_root))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13157 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(thd, tmp.str, tmp.length,
                                                cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13181 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13193 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer(thd, (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13200 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13219 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13226 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string)= (yyvsp[(1) - (1)].string); }
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13245 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13254 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
            const char *query_start= lex->sphead ? lex->sphead->m_tmp_query
                                                 : thd->query();
            item= new (thd->mem_root) Item_param(thd, lip->get_tok_start() -
                                                      query_start);
            if (!((yyval.item_param)= item) || lex->param_list.push_back(item, thd->mem_root))
              my_yyabort_error((ER_OUT_OF_RESOURCES, MYF(0)));
          }
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13286 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13287 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg(thd);
          }
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13296 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13297 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13298 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13300 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item)= new (thd->mem_root) Item_null(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int(thd, (char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int(thd, (char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13326 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_hex_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13338 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13344 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(thd, NULL, (yyvsp[(2) - (2)].string)->ptr(), (yyvsp[(2) - (2)].string)->length(),
                                           (yyvsp[(1) - (2)].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13362 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13382 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13388 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13397 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13409 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13415 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13421 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13436 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13437 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13442 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13451 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13465 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13470 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
                my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal(thd, (yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13512 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13517 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13533 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13538 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT"));

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE"));

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool tmp_read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(thd, Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            tmp_read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13610 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13663 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13665 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str));
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str));
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13675 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13681 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13686 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13692 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13698 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13714 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13723 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new (thd->mem_root) Table_ident(thd, db, (yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13732 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13734 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_with_error(system_charset_info, &(yyval.lex_str),
                                          thd->charset(), (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13762 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13790 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13804 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13806 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13815 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13826 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13827 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13828 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13846 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13876 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           if ((yyvsp[(1) - (1)].lex_user)->user.str != current_user.str && (yyvsp[(1) - (1)].lex_user)->host.str == 0)
             (yyvsp[(1) - (1)].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
         }
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13897 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13898 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13899 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13900 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13901 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13902 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13903 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13904 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13905 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13906 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13907 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13908 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13909 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13910 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13911 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13912 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13913 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13914 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13915 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13916 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13917 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13918 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13919 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13920 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13921 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13922 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13923 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13924 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13925 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13926 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13927 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13928 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13929 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13930 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13931 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13932 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13933 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13934 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13935 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13936 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13937 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13938 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13939 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13940 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13941 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13942 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13943 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13944 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13945 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13946 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13947 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13948 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13949 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13951 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13952 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13953 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13954 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13955 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13956 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13957 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13967 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13968 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13969 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13970 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13971 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13972 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13973 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13974 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13975 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13976 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13977 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13978 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13979 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13980 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13981 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13982 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13983 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13984 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13985 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13986 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13987 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13988 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13989 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13990 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13991 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13992 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13993 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13994 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13995 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13996 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13997 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13998 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13999 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14000 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14001 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14002 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14003 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14004 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14005 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14006 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14007 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14008 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14009 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14010 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14011 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14012 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14013 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14014 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14015 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14016 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14021 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14022 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14023 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14024 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14025 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14026 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14027 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14028 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14029 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14030 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14031 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14032 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14033 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14034 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14035 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14036 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14037 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14038 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14039 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14040 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14041 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14042 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14043 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14044 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14045 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14046 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14049 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14050 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14051 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14052 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14053 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14054 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14055 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14056 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14057 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14058 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14059 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14060 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14061 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14062 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14063 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14064 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14065 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14066 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14067 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14068 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14069 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14070 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14071 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14072 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14073 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14074 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14075 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14076 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14077 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14078 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14079 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14080 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14081 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14082 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14083 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14084 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14085 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14086 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14087 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14088 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14089 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14090 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14091 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14092 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14093 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14094 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14095 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14097 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14098 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14099 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14100 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14102 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14103 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14104 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14105 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14106 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14107 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14108 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14109 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14110 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14111 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14112 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14113 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14114 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14115 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14116 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14118 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14119 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14120 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14121 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14122 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14123 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14125 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14126 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14127 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14128 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14130 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14131 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14132 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14133 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14134 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14135 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14136 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14137 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14138 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14139 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14140 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14141 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14143 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14144 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14145 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14146 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14147 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14148 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14149 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14150 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14151 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14152 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14153 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14154 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14155 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14156 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14157 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14158 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14159 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14160 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14161 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14162 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14163 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14164 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14165 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14166 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14167 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14168 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14169 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14170 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14171 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14172 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14173 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14174 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14175 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14176 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14177 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14178 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14179 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14180 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14181 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14182 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14183 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14184 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14185 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14187 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14188 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14189 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14190 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14191 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14192 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14193 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14194 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14195 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14196 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14197 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14198 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14199 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14200 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14201 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14202 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14203 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14204 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14205 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14206 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14207 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14208 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14209 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14210 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14211 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14212 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14213 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14214 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14215 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14216 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14217 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14218 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14219 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14220 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14221 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14222 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14223 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14224 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14225 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14226 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14227 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14228 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14229 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14230 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14231 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14232 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14233 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14234 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14235 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14236 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14237 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14238 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14239 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14240 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14241 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14242 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14243 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14244 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14245 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14246 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14247 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14248 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14249 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14250 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14251 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14252 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14253 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14254 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14255 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14256 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14257 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14258 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14259 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14260 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14261 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14262 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14263 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14264 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14265 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14266 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14267 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14268 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14269 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14270 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14271 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14272 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14273 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14274 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14275 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14276 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14277 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14278 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14279 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14291 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14301 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14303 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->option_type= OPT_SESSION;
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->autocommit= 0;
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14311 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0), "SET STATEMENT"));
            lex->stmt_var_list= lex->var_list;
            lex->var_list.empty();
          }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14319 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14334 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14340 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14344 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14349 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14365 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14379 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14383 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14388 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14392 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14409 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14410 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14411 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14415 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14416 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14417 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14418 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14422 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14423 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14424 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14425 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14455 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14481 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new (thd->mem_root) set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14492 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= (new (thd->mem_root)
                  set_var_collation_client(cs2,
                                           thd->variables.collation_database,
                                            cs2));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14518 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(thd, ER_SYNTAX_ERROR);

            MYSQL_YYABORT;
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new (thd->mem_root) set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            LEX_USER *user;
            if (!(user=(LEX_USER *) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role(user,
                                                             (yyvsp[(3) - (3)].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14569 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role((yyvsp[(5) - (5)].lex_user), (yyvsp[(3) - (5)].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14581 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_role *var= new (thd->mem_root) set_var_role((yyvsp[(2) - (2)].lex_str));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14589 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_password *var= (new (thd->mem_root)
                                    set_var_password(lex->definer));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14605 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14631 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", ""));
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after "));
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14689 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_read_only"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14707 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_isolation"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14724 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14725 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14729 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14730 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14731 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14732 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14737 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (spc && spc->find_variable(pw, false))
              my_yyabort_error((ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str));
            if (!(lex->definer= (LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            lex->definer->user= current_user;
            lex->definer->plugin= empty_lex_str;
            lex->definer->auth= empty_lex_str;
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14750 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer= (yyvsp[(2) - (3)].lex_user); }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14754 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer->pwhash= (yyvsp[(1) - (1)].lex_str);}
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14755 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer->pwtext= (yyvsp[(3) - (4)].lex_str); }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->definer->pwtext= (yyvsp[(3) - (4)].lex_str);
            Lex->definer->pwhash.str= Item_func_password::alloc(thd,
                                   (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length, Item_func_password::OLD);
            Lex->definer->pwhash.length=  SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
          }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14767 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 14775 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 14781 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 14792 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "LOCK"));
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 14800 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14804 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 14805 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14815 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14829 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14830 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14832 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14836 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 14837 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 14842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "UNLOCK"));
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 14850 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14859 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14868 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14877 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int(thd, (int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 14907 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14908 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 14912 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14913 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14917 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14918 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14919 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 14920 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 14922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list= new (thd->mem_root) List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 14930 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 14934 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 14935 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 14936 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 14937 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 14938 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 14945 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 14950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 14956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 14967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 14978 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 14982 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 14989 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[(1) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 14998 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[(4) - (4)].lex_user); }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15000 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15005 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15011 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15030 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15041 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[(1) - (4)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15059 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer = 0; }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15060 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer = (yyvsp[(3) - (3)].lex_user); }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15063 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15064 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15068 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15073 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->reset_auth();
          }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15091 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[(1) - (1)].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            (yyvsp[(1) - (1)].lex_str).str[(yyvsp[(1) - (1)].lex_str).length] = '\0';
            if ((yyvsp[(1) - (1)].lex_str).length == 0)
              my_yyabort_error((ER_INVALID_ROLE, MYF(0), ""));
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         cs, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15118 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15120 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15138 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15139 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15141 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15144 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15145 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15147 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15148 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15149 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15150 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15151 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15152 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15153 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 15154 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 15155 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 15156 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15157 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 15158 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15159 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15160 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15161 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 15162 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15163 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 15164 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 15165 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 15166 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 15167 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 15168 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 15169 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15170 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15171 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15172 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15173 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 15174 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 15178 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 15179 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15189 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SUBJECT"));
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "ISSUER"));
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15203 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "CIPHER"));
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15213 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 15224 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2678:

/* Line 1455 of yacc.c  */
#line 15233 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 15242 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 15254 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 15259 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 15267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 15272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 15280 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 15285 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 15296 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->pwtext= (yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
          }
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 15303 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->pwhash= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 15308 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 15314 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 15320 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 15325 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 15339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *new_str= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= (new (thd->mem_root)
                                LEX_COLUMN(*new_str,lex->which_columns));
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col, thd->mem_root);
            }
          }
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 15369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 15373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 15377 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 15381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2705:

/* Line 1455 of yacc.c  */
#line 15387 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2707:

/* Line 1455 of yacc.c  */
#line 15392 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 15393 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 15397 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 15398 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 15402 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 15404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 15410 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 15416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 15422 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 15428 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.max_statement_time= (yyvsp[(2) - (2)].item_num)->val_real();
            lex->mqh.specified_limits|= USER_RESOURCES::MAX_STATEMENT_TIME;
          }
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 15437 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 15442 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 15447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_COMPOUND;
            Lex->sphead->set_stmt_end(thd);
            Lex->sphead->restore_thd_mem_root(thd);
          }
    break;

  case 2720:

/* Line 1455 of yacc.c  */
#line 15455 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 15456 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 15460 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2723:

/* Line 1455 of yacc.c  */
#line 15461 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 15466 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2725:

/* Line 1455 of yacc.c  */
#line 15467 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2726:

/* Line 1455 of yacc.c  */
#line 15468 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2727:

/* Line 1455 of yacc.c  */
#line 15473 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2728:

/* Line 1455 of yacc.c  */
#line 15474 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2729:

/* Line 1455 of yacc.c  */
#line 15475 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2730:

/* Line 1455 of yacc.c  */
#line 15479 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2731:

/* Line 1455 of yacc.c  */
#line 15480 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2732:

/* Line 1455 of yacc.c  */
#line 15485 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2733:

/* Line 1455 of yacc.c  */
#line 15497 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2734:

/* Line 1455 of yacc.c  */
#line 15507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2735:

/* Line 1455 of yacc.c  */
#line 15516 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2736:

/* Line 1455 of yacc.c  */
#line 15525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2737:

/* Line 1455 of yacc.c  */
#line 15538 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2739:

/* Line 1455 of yacc.c  */
#line 15544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2740:

/* Line 1455 of yacc.c  */
#line 15549 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2742:

/* Line 1455 of yacc.c  */
#line 15560 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2743:

/* Line 1455 of yacc.c  */
#line 15564 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2744:

/* Line 1455 of yacc.c  */
#line 15565 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2745:

/* Line 1455 of yacc.c  */
#line 15569 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2746:

/* Line 1455 of yacc.c  */
#line 15583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2749:

/* Line 1455 of yacc.c  */
#line 15595 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2750:

/* Line 1455 of yacc.c  */
#line 15596 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2751:

/* Line 1455 of yacc.c  */
#line 15597 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2752:

/* Line 1455 of yacc.c  */
#line 15603 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2753:

/* Line 1455 of yacc.c  */
#line 15608 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2755:

/* Line 1455 of yacc.c  */
#line 15617 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2756:

/* Line 1455 of yacc.c  */
#line 15622 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (5)].select_lex);
          }
    break;

  case 2757:

/* Line 1455 of yacc.c  */
#line 15631 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2758:

/* Line 1455 of yacc.c  */
#line 15637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2759:

/* Line 1455 of yacc.c  */
#line 15658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2764:

/* Line 1455 of yacc.c  */
#line 15693 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2765:

/* Line 1455 of yacc.c  */
#line 15695 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2766:

/* Line 1455 of yacc.c  */
#line 15702 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2767:

/* Line 1455 of yacc.c  */
#line 15703 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2768:

/* Line 1455 of yacc.c  */
#line 15704 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2769:

/* Line 1455 of yacc.c  */
#line 15706 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2770:

/* Line 1455 of yacc.c  */
#line 15712 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2771:

/* Line 1455 of yacc.c  */
#line 15717 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2772:

/* Line 1455 of yacc.c  */
#line 15728 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2773:

/* Line 1455 of yacc.c  */
#line 15730 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2774:

/* Line 1455 of yacc.c  */
#line 15732 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2788:

/* Line 1455 of yacc.c  */
#line 15765 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2789:

/* Line 1455 of yacc.c  */
#line 15779 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->definer= (yyvsp[(3) - (3)].lex_user);
            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
            Lex->ssl_cipher= Lex->x509_subject= Lex->x509_issuer= 0;
            bzero(&(Lex->mqh), sizeof(Lex->mqh));
          }
    break;

  case 2790:

/* Line 1455 of yacc.c  */
#line 15795 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2791:

/* Line 1455 of yacc.c  */
#line 15797 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2792:

/* Line 1455 of yacc.c  */
#line 15799 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2793:

/* Line 1455 of yacc.c  */
#line 15804 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2794:

/* Line 1455 of yacc.c  */
#line 15806 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2795:

/* Line 1455 of yacc.c  */
#line 15808 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2796:

/* Line 1455 of yacc.c  */
#line 15813 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2798:

/* Line 1455 of yacc.c  */
#line 15831 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2800:

/* Line 1455 of yacc.c  */
#line 15837 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
    break;

  case 2801:

/* Line 1455 of yacc.c  */
#line 15843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
    break;

  case 2802:

/* Line 1455 of yacc.c  */
#line 15851 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2803:

/* Line 1455 of yacc.c  */
#line 15860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2806:

/* Line 1455 of yacc.c  */
#line 15881 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2807:

/* Line 1455 of yacc.c  */
#line 15883 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2808:

/* Line 1455 of yacc.c  */
#line 15885 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2809:

/* Line 1455 of yacc.c  */
#line 15887 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2810:

/* Line 1455 of yacc.c  */
#line 15900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(3) - (3)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 2811:

/* Line 1455 of yacc.c  */
#line 15909 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $10 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2812:

/* Line 1455 of yacc.c  */
#line 15915 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $14 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2813:

/* Line 1455 of yacc.c  */
#line 15920 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER"));

            lex->stmt_definition_begin= (yyvsp[(2) - (16)].simple_string);
            lex->ident.str= (yyvsp[(9) - (16)].simple_string);
            lex->ident.length= (yyvsp[(13) - (16)].simple_string) - (yyvsp[(9) - (16)].simple_string);
            lex->spname= (yyvsp[(5) - (16)].spname);

            if (!make_sp_head(thd, (yyvsp[(5) - (16)].spname), TYPE_ENUM_TRIGGER))
              MYSQL_YYABORT;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2814:

/* Line 1455 of yacc.c  */
#line 15938 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $19 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(11) - (18)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2815:

/* Line 1455 of yacc.c  */
#line 15970 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->lex->udf.type= UDFTYPE_AGGREGATE; }
    break;

  case 2816:

/* Line 1455 of yacc.c  */
#line 15971 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->lex->udf.type= UDFTYPE_FUNCTION;  }
    break;

  case 2817:

/* Line 1455 of yacc.c  */
#line 15977 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[(2) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
              my_yyabort_error((ER_NATIVE_FCT_NAME_COLLISION, MYF(0), (yyvsp[(3) - (7)].lex_str).str));
            lex->sql_command= SQLCOM_CREATE_FUNCTION;
            lex->udf.name= (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns= (Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl= (yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2818:

/* Line 1455 of yacc.c  */
#line 15995 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= Lex;
            Lex_input_stream *lip= YYLIP;
            const char* tmp_param_begin;

            if (lex->add_create_options_with_check((yyvsp[(2) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION"));

            if (!make_sp_head(thd, (yyvsp[(3) - (4)].spname), TYPE_ENUM_FUNCTION))
              MYSQL_YYABORT;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2819:

/* Line 1455 of yacc.c  */
#line 16016 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2820:

/* Line 1455 of yacc.c  */
#line 16020 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->init_last_field(&lex->sphead->m_return_field_def, NULL,
                                 thd->variables.collation_database);
          }
    break;

  case 2821:

/* Line 1455 of yacc.c  */
#line 16026 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $12 */
            if (Lex->sphead->fill_field_definition(thd, Lex, (yyvsp[(11) - (11)].field_type),
                                                   Lex->last_field))
              MYSQL_YYABORT;
          }
    break;

  case 2822:

/* Line 1455 of yacc.c  */
#line 16032 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2823:

/* Line 1455 of yacc.c  */
#line 16039 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
              my_yyabort_error((ER_SP_NORETURN, MYF(0), sp->m_qname.str));
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to
                occur before the call), the warning will provide a hint
                explaining the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER_THD(thd, ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2824:

/* Line 1455 of yacc.c  */
#line 16091 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(2) - (3)].object_ddl_options)))
              MYSQL_YYABORT;

            if (Lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE"));

            if (!make_sp_head(thd, (yyvsp[(3) - (3)].spname), TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2825:

/* Line 1455 of yacc.c  */
#line 16103 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2826:

/* Line 1455 of yacc.c  */
#line 16112 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2827:

/* Line 1455 of yacc.c  */
#line 16116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2828:

/* Line 1455 of yacc.c  */
#line 16120 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2829:

/* Line 1455 of yacc.c  */
#line 16134 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2830:

/* Line 1455 of yacc.c  */
#line 16138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2831:

/* Line 1455 of yacc.c  */
#line 16142 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2832:

/* Line 1455 of yacc.c  */
#line 16146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2833:

/* Line 1455 of yacc.c  */
#line 16150 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2834:

/* Line 1455 of yacc.c  */
#line 16154 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2835:

/* Line 1455 of yacc.c  */
#line 16161 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2836:

/* Line 1455 of yacc.c  */
#line 16168 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2837:

/* Line 1455 of yacc.c  */
#line 16175 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2838:

/* Line 1455 of yacc.c  */
#line 16184 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2839:

/* Line 1455 of yacc.c  */
#line 16185 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2840:

/* Line 1455 of yacc.c  */
#line 16189 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2841:

/* Line 1455 of yacc.c  */
#line 16190 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2842:

/* Line 1455 of yacc.c  */
#line 16191 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2843:

/* Line 1455 of yacc.c  */
#line 16195 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2844:

/* Line 1455 of yacc.c  */
#line 16196 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2845:

/* Line 1455 of yacc.c  */
#line 16201 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2846:

/* Line 1455 of yacc.c  */
#line 16203 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2848:

/* Line 1455 of yacc.c  */
#line 16208 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2849:

/* Line 1455 of yacc.c  */
#line 16209 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2850:

/* Line 1455 of yacc.c  */
#line 16214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2851:

/* Line 1455 of yacc.c  */
#line 16221 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2852:

/* Line 1455 of yacc.c  */
#line 16231 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2853:

/* Line 1455 of yacc.c  */
#line 16237 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2854:

/* Line 1455 of yacc.c  */
#line 16248 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 44859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



